
G0_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002914  08002914  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002914  08002914  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002914  08002914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800291c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002928  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002928  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009536  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b1  00000000  00000000  000295b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002ac68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088b  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251bb  00000000  00000000  0002c00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b919  00000000  00000000  000511c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8e03  00000000  00000000  0005cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dec  00000000  00000000  001458e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001486d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028bc 	.word	0x080028bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080028bc 	.word	0x080028bc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9c5 	bl	800055a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8c8 	bl	8000368 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f84e 	bl	8000278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001dc:	2100      	movs	r1, #0
 80001de:	4802      	ldr	r0, [pc, #8]	; (80001e8 <main+0x20>)
 80001e0:	f001 fba4 	bl	800192c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x1c>
 80001e6:	bf00      	nop
 80001e8:	20000028 	.word	0x20000028

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b096      	sub	sp, #88	; 0x58
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2244      	movs	r2, #68	; 0x44
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fb32 	bl	8002864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	463b      	mov	r3, r7
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800020e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000212:	f000 fcb5 	bl	8000b80 <HAL_PWREx_ControlVoltageScaling>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800021c:	f000 f8bc 	bl	8000398 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000220:	2310      	movs	r3, #16
 8000222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800022c:	2370      	movs	r3, #112	; 0x70
 800022e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000230:	2300      	movs	r3, #0
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fcf7 	bl	8000c2c <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000244:	f000 f8a8 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800024c:	2300      	movs	r3, #0
 800024e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025c:	463b      	mov	r3, r7
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f8bf 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800026c:	f000 f894 	bl	8000398 <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3758      	adds	r7, #88	; 0x58
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08e      	sub	sp, #56	; 0x38
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	f107 031c 	add.w	r3, r7, #28
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002aa:	4b2e      	ldr	r3, [pc, #184]	; (8000364 <MX_TIM2_Init+0xec>)
 80002ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80002b2:	4b2c      	ldr	r3, [pc, #176]	; (8000364 <MX_TIM2_Init+0xec>)
 80002b4:	227f      	movs	r2, #127	; 0x7f
 80002b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <MX_TIM2_Init+0xec>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 80002be:	4b29      	ldr	r3, [pc, #164]	; (8000364 <MX_TIM2_Init+0xec>)
 80002c0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80002c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c6:	4b27      	ldr	r3, [pc, #156]	; (8000364 <MX_TIM2_Init+0xec>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <MX_TIM2_Init+0xec>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d2:	4824      	ldr	r0, [pc, #144]	; (8000364 <MX_TIM2_Init+0xec>)
 80002d4:	f001 fa72 	bl	80017bc <HAL_TIM_Base_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80002de:	f000 f85b 	bl	8000398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ec:	4619      	mov	r1, r3
 80002ee:	481d      	ldr	r0, [pc, #116]	; (8000364 <MX_TIM2_Init+0xec>)
 80002f0:	f001 fd36 	bl	8001d60 <HAL_TIM_ConfigClockSource>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80002fa:	f000 f84d 	bl	8000398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002fe:	4819      	ldr	r0, [pc, #100]	; (8000364 <MX_TIM2_Init+0xec>)
 8000300:	f001 fab3 	bl	800186a <HAL_TIM_PWM_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800030a:	f000 f845 	bl	8000398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	4619      	mov	r1, r3
 800031c:	4811      	ldr	r0, [pc, #68]	; (8000364 <MX_TIM2_Init+0xec>)
 800031e:	f002 fa19 	bl	8002754 <HAL_TIMEx_MasterConfigSynchronization>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000328:	f000 f836 	bl	8000398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 31250;
 8000330:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000334:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	4619      	mov	r1, r3
 8000344:	4807      	ldr	r0, [pc, #28]	; (8000364 <MX_TIM2_Init+0xec>)
 8000346:	f001 fbf7 	bl	8001b38 <HAL_TIM_PWM_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000350:	f000 f822 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <MX_TIM2_Init+0xec>)
 8000356:	f000 f867 	bl	8000428 <HAL_TIM_MspPostInit>

}
 800035a:	bf00      	nop
 800035c:	3738      	adds	r7, #56	; 0x38
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_GPIO_Init+0x2c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <MX_GPIO_Init+0x2c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_GPIO_Init+0x2c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>
	...

080003a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x44>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x44>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6613      	str	r3, [r2, #96]	; 0x60
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x44>)
 80003b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_MspInit+0x44>)
 80003c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_MspInit+0x44>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	6593      	str	r3, [r2, #88]	; 0x58
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_MspInit+0x44>)
 80003d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003fc:	d10b      	bne.n	8000416 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <HAL_TIM_Base_MspInit+0x38>)
 8000400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000402:	4a08      	ldr	r2, [pc, #32]	; (8000424 <HAL_TIM_Base_MspInit+0x38>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6593      	str	r3, [r2, #88]	; 0x58
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_TIM_Base_MspInit+0x38>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000448:	d11c      	bne.n	8000484 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_TIM_MspPostInit+0x64>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a0f      	ldr	r2, [pc, #60]	; (800048c <HAL_TIM_MspPostInit+0x64>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <HAL_TIM_MspPostInit+0x64>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000462:	2320      	movs	r3, #32
 8000464:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000466:	2302      	movs	r3, #2
 8000468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000472:	2301      	movs	r3, #1
 8000474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 f9c6 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000

08000490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <NMI_Handler+0x4>

08000496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <HardFault_Handler+0x4>

0800049c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <MemManage_Handler+0x4>

080004a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <UsageFault_Handler+0x4>

080004ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004dc:	f000 f892 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <SystemInit+0x20>)
 80004ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <SystemInit+0x20>)
 80004f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000540 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800050c:	f7ff ffea 	bl	80004e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490d      	ldr	r1, [pc, #52]	; (8000548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000536:	f002 f99d 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053a:	f7ff fe45 	bl	80001c8 <main>

0800053e <LoopForever>:

LoopForever:
    b LoopForever
 800053e:	e7fe      	b.n	800053e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000540:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800054c:	0800291c 	.word	0x0800291c
  ldr r2, =_sbss
 8000550:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000554:	20000078 	.word	0x20000078

08000558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000558:	e7fe      	b.n	8000558 <ADC1_2_IRQHandler>

0800055a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000560:	2300      	movs	r3, #0
 8000562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f91f 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f80e 	bl	800058c <HAL_InitTick>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d002      	beq.n	800057c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	71fb      	strb	r3, [r7, #7]
 800057a:	e001      	b.n	8000580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800057c:	f7ff ff12 	bl	80003a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_InitTick+0x6c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d023      	beq.n	80005e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_InitTick+0x70>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_InitTick+0x6c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f91d 	bl	80007f6 <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10f      	bne.n	80005e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d809      	bhi.n	80005dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f000 f8f5 	bl	80007be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_InitTick+0x74>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	e007      	b.n	80005ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e004      	b.n	80005ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e001      	b.n	80005ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000008 	.word	0x20000008
 8000628:	20000074 	.word	0x20000074

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000074 	.word	0x20000074

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff47 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff5c 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffb0 	bl	8000764 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e17f      	b.n	8000b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8171 	beq.w	8000b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b01      	cmp	r3, #1
 8000842:	d005      	beq.n	8000850 <HAL_GPIO_Init+0x40>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b02      	cmp	r3, #2
 800084e:	d130      	bne.n	80008b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2203      	movs	r2, #3
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000886:	2201      	movs	r2, #1
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f003 0201 	and.w	r2, r3, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d118      	bne.n	80008f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008c4:	2201      	movs	r2, #1
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	f003 0201 	and.w	r2, r3, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d017      	beq.n	800092c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 0303 	and.w	r3, r3, #3
 8000934:	2b02      	cmp	r3, #2
 8000936:	d123      	bne.n	8000980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3208      	adds	r2, #8
 8000940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	220f      	movs	r2, #15
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	08da      	lsrs	r2, r3, #3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3208      	adds	r2, #8
 800097a:	6939      	ldr	r1, [r7, #16]
 800097c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	2203      	movs	r2, #3
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0203 	and.w	r2, r3, #3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 80ac 	beq.w	8000b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b5f      	ldr	r3, [pc, #380]	; (8000b40 <HAL_GPIO_Init+0x330>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	4a5e      	ldr	r2, [pc, #376]	; (8000b40 <HAL_GPIO_Init+0x330>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6613      	str	r3, [r2, #96]	; 0x60
 80009ce:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <HAL_GPIO_Init+0x330>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009da:	4a5a      	ldr	r2, [pc, #360]	; (8000b44 <HAL_GPIO_Init+0x334>)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	089b      	lsrs	r3, r3, #2
 80009e0:	3302      	adds	r3, #2
 80009e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a04:	d025      	beq.n	8000a52 <HAL_GPIO_Init+0x242>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <HAL_GPIO_Init+0x338>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01f      	beq.n	8000a4e <HAL_GPIO_Init+0x23e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <HAL_GPIO_Init+0x33c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x23a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	; (8000b50 <HAL_GPIO_Init+0x340>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x236>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x344>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x232>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_GPIO_Init+0x348>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x22e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x34c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x22a>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x244>
 8000a52:	2300      	movs	r3, #0
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a64:	4937      	ldr	r1, [pc, #220]	; (8000b44 <HAL_GPIO_Init+0x334>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a96:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aea:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <HAL_GPIO_Init+0x350>)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f47f ae78 	bne.w	8000820 <HAL_GPIO_Init+0x10>
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	371c      	adds	r7, #28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48000c00 	.word	0x48000c00
 8000b54:	48001000 	.word	0x48001000
 8000b58:	48001400 	.word	0x48001400
 8000b5c:	48001800 	.word	0x48001800
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40007000 	.word	0x40007000

08000b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8e:	d130      	bne.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9c:	d038      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2232      	movs	r2, #50	; 0x32
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9b      	lsrs	r3, r3, #18
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc4:	e002      	b.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd8:	d102      	bne.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f2      	bne.n	8000bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bec:	d110      	bne.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e00f      	b.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	d007      	beq.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40007000 	.word	0x40007000
 8000c24:	20000000 	.word	0x20000000
 8000c28:	431bde83 	.word	0x431bde83

08000c2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e3ca      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3e:	4b97      	ldr	r3, [pc, #604]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c48:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80e4 	beq.w	8000e28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <HAL_RCC_OscConfig+0x4a>
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b0c      	cmp	r3, #12
 8000c6a:	f040 808b 	bne.w	8000d84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 8087 	bne.w	8000d84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c76:	4b89      	ldr	r3, [pc, #548]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <HAL_RCC_OscConfig+0x62>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e3a2      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a1a      	ldr	r2, [r3, #32]
 8000c92:	4b82      	ldr	r3, [pc, #520]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x7c>
 8000c9e:	4b7f      	ldr	r3, [pc, #508]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca6:	e005      	b.n	8000cb4 <HAL_RCC_OscConfig+0x88>
 8000ca8:	4b7c      	ldr	r3, [pc, #496]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d223      	bcs.n	8000d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fd1d 	bl	80016fc <RCC_SetFlashLatencyFromMSIRange>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e383      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ccc:	4b73      	ldr	r3, [pc, #460]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a72      	ldr	r2, [pc, #456]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b70      	ldr	r3, [pc, #448]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	496d      	ldr	r1, [pc, #436]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cea:	4b6c      	ldr	r3, [pc, #432]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	4968      	ldr	r1, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	604b      	str	r3, [r1, #4]
 8000cfe:	e025      	b.n	8000d4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a65      	ldr	r2, [pc, #404]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b63      	ldr	r3, [pc, #396]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4960      	ldr	r1, [pc, #384]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d1e:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	495b      	ldr	r1, [pc, #364]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fcdd 	bl	80016fc <RCC_SetFlashLatencyFromMSIRange>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e343      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d4c:	f000 fc4a 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	4950      	ldr	r1, [pc, #320]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <HAL_RCC_OscConfig+0x278>)
 8000d6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ea8 <HAL_RCC_OscConfig+0x27c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fc0b 	bl	800058c <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d052      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	e327      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d032      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d8c:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc48 	bl	800062c <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc44 	bl	800062c <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e310      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000db2:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a36      	ldr	r2, [pc, #216]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4931      	ldr	r1, [pc, #196]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	492c      	ldr	r1, [pc, #176]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
 8000df0:	e01a      	b.n	8000e28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fc15 	bl	800062c <HAL_GetTick>
 8000e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e06:	f7ff fc11 	bl	800062c <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e2dd      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f0      	bne.n	8000e06 <HAL_RCC_OscConfig+0x1da>
 8000e24:	e000      	b.n	8000e28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d074      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d005      	beq.n	8000e46 <HAL_RCC_OscConfig+0x21a>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	d10e      	bne.n	8000e5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d10b      	bne.n	8000e5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d064      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d160      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e2ba      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x24a>
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e026      	b.n	8000ec4 <HAL_RCC_OscConfig+0x298>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7e:	d115      	bne.n	8000eac <HAL_RCC_OscConfig+0x280>
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a02      	ldr	r2, [pc, #8]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e014      	b.n	8000ec4 <HAL_RCC_OscConfig+0x298>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	080028d4 	.word	0x080028d4
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	4ba0      	ldr	r3, [pc, #640]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9f      	ldr	r2, [pc, #636]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b9d      	ldr	r3, [pc, #628]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a9c      	ldr	r2, [pc, #624]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fbae 	bl	800062c <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fbaa 	bl	800062c <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	; 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e276      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee6:	4b92      	ldr	r3, [pc, #584]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x2a8>
 8000ef2:	e014      	b.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fb9a 	bl	800062c <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fb96 	bl	800062c <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e262      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f0e:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x2d0>
 8000f1a:	e000      	b.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d060      	beq.n	8000fec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x310>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d119      	bne.n	8000f6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d116      	bne.n	8000f6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_OscConfig+0x328>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e23f      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b76      	ldr	r3, [pc, #472]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	061b      	lsls	r3, r3, #24
 8000f62:	4973      	ldr	r1, [pc, #460]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f68:	e040      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d023      	beq.n	8000fba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f72:	4b6f      	ldr	r3, [pc, #444]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6e      	ldr	r2, [pc, #440]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb55 	bl	800062c <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f86:	f7ff fb51 	bl	800062c <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e21d      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f98:	4b65      	ldr	r3, [pc, #404]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	061b      	lsls	r3, r3, #24
 8000fb2:	495f      	ldr	r1, [pc, #380]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e018      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb31 	bl	800062c <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff fb2d 	bl	800062c <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e1f9      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d03c      	beq.n	8001072 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01c      	beq.n	800103a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001006:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001010:	f7ff fb0c 	bl	800062c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001018:	f7ff fb08 	bl	800062c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1d4      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800102c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0ef      	beq.n	8001018 <HAL_RCC_OscConfig+0x3ec>
 8001038:	e01b      	b.n	8001072 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001042:	f023 0301 	bic.w	r3, r3, #1
 8001046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800104a:	f7ff faef 	bl	800062c <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff faeb 	bl	800062c <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e1b7      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1ef      	bne.n	8001052 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80a6 	beq.w	80011cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10d      	bne.n	80010ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6593      	str	r3, [r2, #88]	; 0x58
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d118      	bne.n	80010ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fab2 	bl	800062c <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010cc:	f7ff faae 	bl	800062c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e17a      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_RCC_OscConfig+0x508>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_RCC_OscConfig+0x4d8>
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 80010f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001102:	e029      	b.n	8001158 <HAL_RCC_OscConfig+0x52c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d115      	bne.n	8001138 <HAL_RCC_OscConfig+0x50c>
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 800111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001122:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_RCC_OscConfig+0x504>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x52c>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	40007000 	.word	0x40007000
 8001138:	4b9c      	ldr	r3, [pc, #624]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800113e:	4a9b      	ldr	r2, [pc, #620]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001148:	4b98      	ldr	r3, [pc, #608]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800114a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800114e:	4a97      	ldr	r2, [pc, #604]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d016      	beq.n	800118e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fa64 	bl	800062c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001166:	e00a      	b.n	800117e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001168:	f7ff fa60 	bl	800062c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e12a      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800117e:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ed      	beq.n	8001168 <HAL_RCC_OscConfig+0x53c>
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118e:	f7ff fa4d 	bl	800062c <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001194:	e00a      	b.n	80011ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff fa49 	bl	800062c <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e113      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ac:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80011ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1ed      	bne.n	8001196 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ba:	7ffb      	ldrb	r3, [r7, #31]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c0:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	4a79      	ldr	r2, [pc, #484]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80011c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80fe 	beq.w	80013d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	2b02      	cmp	r3, #2
 80011dc:	f040 80d0 	bne.w	8001380 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d130      	bne.n	8001256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	3b01      	subs	r3, #1
 8001200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	429a      	cmp	r2, r3
 8001204:	d127      	bne.n	8001256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d11f      	bne.n	8001256 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001220:	2a07      	cmp	r2, #7
 8001222:	bf14      	ite	ne
 8001224:	2201      	movne	r2, #1
 8001226:	2200      	moveq	r2, #0
 8001228:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	085b      	lsrs	r3, r3, #1
 800123a:	3b01      	subs	r3, #1
 800123c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d109      	bne.n	8001256 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	085b      	lsrs	r3, r3, #1
 800124e:	3b01      	subs	r3, #1
 8001250:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d06e      	beq.n	8001334 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d069      	beq.n	8001330 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001268:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0ad      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800127e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001282:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001284:	f7ff f9d2 	bl	800062c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff f9ce 	bl	800062c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e09a      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012aa:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x784>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012ba:	3a01      	subs	r2, #1
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	4311      	orrs	r1, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012c4:	0212      	lsls	r2, r2, #8
 80012c6:	4311      	orrs	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012cc:	0852      	lsrs	r2, r2, #1
 80012ce:	3a01      	subs	r2, #1
 80012d0:	0552      	lsls	r2, r2, #21
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012d8:	0852      	lsrs	r2, r2, #1
 80012da:	3a01      	subs	r2, #1
 80012dc:	0652      	lsls	r2, r2, #25
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012e4:	0912      	lsrs	r2, r2, #4
 80012e6:	0452      	lsls	r2, r2, #17
 80012e8:	430a      	orrs	r2, r1
 80012ea:	4930      	ldr	r1, [pc, #192]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001308:	f7ff f990 	bl	800062c <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff f98c 	bl	800062c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e058      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800132e:	e050      	b.n	80013d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e04f      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d148      	bne.n	80013d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001356:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001358:	f7ff f968 	bl	800062c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff f964 	bl	800062c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e030      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x734>
 800137e:	e028      	b.n	80013d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d023      	beq.n	80013ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_RCC_OscConfig+0x780>)
 800138c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff f94b 	bl	800062c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001398:	e00c      	b.n	80013b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff f947 	bl	800062c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d905      	bls.n	80013b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e013      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_RCC_OscConfig+0x7b0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ec      	bne.n	800139a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_OscConfig+0x7b0>)
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	4905      	ldr	r1, [pc, #20]	; (80013dc <HAL_RCC_OscConfig+0x7b0>)
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_OscConfig+0x7b4>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
 80013cc:	e001      	b.n	80013d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	feeefffc 	.word	0xfeeefffc

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0e7      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d910      	bls.n	8001428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	4970      	ldr	r1, [pc, #448]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d001      	beq.n	8001428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0cf      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d010      	beq.n	8001456 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001440:	429a      	cmp	r2, r3
 8001442:	d908      	bls.n	8001456 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4960      	ldr	r1, [pc, #384]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d04c      	beq.n	80014fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d121      	bne.n	80014ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0a6      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e09a      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e08e      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014aa:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e086      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f023 0203 	bic.w	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4943      	ldr	r1, [pc, #268]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014cc:	f7ff f8ae 	bl	800062c <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff f8aa 	bl	800062c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e06e      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d010      	beq.n	800152a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001514:	429a      	cmp	r2, r3
 8001516:	d208      	bcs.n	800152a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	492b      	ldr	r1, [pc, #172]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d210      	bcs.n	800155a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 0207 	bic.w	r2, r3, #7
 8001540:	4923      	ldr	r1, [pc, #140]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_RCC_ClockConfig+0x1ec>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d001      	beq.n	800155a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e036      	b.n	80015c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	4918      	ldr	r1, [pc, #96]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4910      	ldr	r1, [pc, #64]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	4313      	orrs	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001598:	f000 f824 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	490b      	ldr	r1, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1f4>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1f8>)
 80015b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1fc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffe5 	bl	800058c <HAL_InitTick>
 80015c2:	4603      	mov	r3, r0
 80015c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80015c6:	7afb      	ldrb	r3, [r7, #11]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40022000 	.word	0x40022000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	080028d4 	.word	0x080028d4
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x34>
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d121      	bne.n	8001656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d11e      	bne.n	8001656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d107      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e005      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001640:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001654:	e00a      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b04      	cmp	r3, #4
 800165a:	d102      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	e004      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d101      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800166a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d134      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0xa6>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d003      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0xac>
 8001688:	e005      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800168c:	617b      	str	r3, [r7, #20]
      break;
 800168e:	e005      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001692:	617b      	str	r3, [r7, #20]
      break;
 8001694:	e002      	b.n	800169c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	617b      	str	r3, [r7, #20]
      break;
 800169a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	3301      	adds	r3, #1
 80016a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	fb03 f202 	mul.w	r2, r3, r2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_RCC_GetSysClockFreq+0x108>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	0e5b      	lsrs	r3, r3, #25
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	3301      	adds	r3, #1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016dc:	69bb      	ldr	r3, [r7, #24]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	080028e4 	.word	0x080028e4
 80016f4:	00f42400 	.word	0x00f42400
 80016f8:	007a1200 	.word	0x007a1200

080016fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001708:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001714:	f7ff fa26 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 8001718:	6178      	str	r0, [r7, #20]
 800171a:	e014      	b.n	8001746 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001734:	f7ff fa16 	bl	8000b64 <HAL_PWREx_GetVoltageRange>
 8001738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d10b      	bne.n	8001766 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b80      	cmp	r3, #128	; 0x80
 8001752:	d919      	bls.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2ba0      	cmp	r3, #160	; 0xa0
 8001758:	d902      	bls.n	8001760 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	e013      	b.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	e010      	b.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b80      	cmp	r3, #128	; 0x80
 800176a:	d902      	bls.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800176c:	2303      	movs	r3, #3
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e00a      	b.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b80      	cmp	r3, #128	; 0x80
 8001776:	d102      	bne.n	800177e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	e004      	b.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b70      	cmp	r3, #112	; 0x70
 8001782:	d101      	bne.n	8001788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001784:	2301      	movs	r3, #1
 8001786:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0207 	bic.w	r2, r3, #7
 8001790:	4909      	ldr	r1, [pc, #36]	; (80017b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e049      	b.n	8001862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fe02 	bl	80003ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 fb7a 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e049      	b.n	8001910 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d106      	bne.n	8001896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f841 	bl	8001918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f000 fb23 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_TIM_PWM_Start+0x24>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e03c      	b.n	80019ca <HAL_TIM_PWM_Start+0x9e>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d109      	bne.n	800196a <HAL_TIM_PWM_Start+0x3e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	e02f      	b.n	80019ca <HAL_TIM_PWM_Start+0x9e>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d109      	bne.n	8001984 <HAL_TIM_PWM_Start+0x58>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e022      	b.n	80019ca <HAL_TIM_PWM_Start+0x9e>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d109      	bne.n	800199e <HAL_TIM_PWM_Start+0x72>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e015      	b.n	80019ca <HAL_TIM_PWM_Start+0x9e>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d109      	bne.n	80019b8 <HAL_TIM_PWM_Start+0x8c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	e008      	b.n	80019ca <HAL_TIM_PWM_Start+0x9e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e09c      	b.n	8001b0c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d104      	bne.n	80019e2 <HAL_TIM_PWM_Start+0xb6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019e0:	e023      	b.n	8001a2a <HAL_TIM_PWM_Start+0xfe>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d104      	bne.n	80019f2 <HAL_TIM_PWM_Start+0xc6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f0:	e01b      	b.n	8001a2a <HAL_TIM_PWM_Start+0xfe>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d104      	bne.n	8001a02 <HAL_TIM_PWM_Start+0xd6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a00:	e013      	b.n	8001a2a <HAL_TIM_PWM_Start+0xfe>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d104      	bne.n	8001a12 <HAL_TIM_PWM_Start+0xe6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a10:	e00b      	b.n	8001a2a <HAL_TIM_PWM_Start+0xfe>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d104      	bne.n	8001a22 <HAL_TIM_PWM_Start+0xf6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a20:	e003      	b.n	8001a2a <HAL_TIM_PWM_Start+0xfe>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fe68 	bl	8002708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <HAL_TIM_PWM_Start+0x1e8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x13e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a34      	ldr	r2, [pc, #208]	; (8001b18 <HAL_TIM_PWM_Start+0x1ec>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00e      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x13e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <HAL_TIM_PWM_Start+0x1f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d009      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x13e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_TIM_PWM_Start+0x1f4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d004      	beq.n	8001a6a <HAL_TIM_PWM_Start+0x13e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <HAL_TIM_PWM_Start+0x1f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_PWM_Start+0x142>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_TIM_PWM_Start+0x144>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a22      	ldr	r2, [pc, #136]	; (8001b14 <HAL_TIM_PWM_Start+0x1e8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01d      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a96:	d018      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_TIM_PWM_Start+0x1fc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_TIM_PWM_Start+0x200>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00e      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_TIM_PWM_Start+0x204>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_TIM_PWM_Start+0x1ec>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_TIM_PWM_Start+0x19e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_TIM_PWM_Start+0x1f0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d115      	bne.n	8001af6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_TIM_PWM_Start+0x208>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d015      	beq.n	8001b08 <HAL_TIM_PWM_Start+0x1dc>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d011      	beq.n	8001b08 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af4:	e008      	b.n	8001b08 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e000      	b.n	8001b0a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40012c00 	.word	0x40012c00
 8001b18:	40013400 	.word	0x40013400
 8001b1c:	40014000 	.word	0x40014000
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40014800 	.word	0x40014800
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40000800 	.word	0x40000800
 8001b30:	40000c00 	.word	0x40000c00
 8001b34:	00010007 	.word	0x00010007

08001b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0ff      	b.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b14      	cmp	r3, #20
 8001b62:	f200 80f0 	bhi.w	8001d46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001bc1 	.word	0x08001bc1
 8001b70:	08001d47 	.word	0x08001d47
 8001b74:	08001d47 	.word	0x08001d47
 8001b78:	08001d47 	.word	0x08001d47
 8001b7c:	08001c01 	.word	0x08001c01
 8001b80:	08001d47 	.word	0x08001d47
 8001b84:	08001d47 	.word	0x08001d47
 8001b88:	08001d47 	.word	0x08001d47
 8001b8c:	08001c43 	.word	0x08001c43
 8001b90:	08001d47 	.word	0x08001d47
 8001b94:	08001d47 	.word	0x08001d47
 8001b98:	08001d47 	.word	0x08001d47
 8001b9c:	08001c83 	.word	0x08001c83
 8001ba0:	08001d47 	.word	0x08001d47
 8001ba4:	08001d47 	.word	0x08001d47
 8001ba8:	08001d47 	.word	0x08001d47
 8001bac:	08001cc5 	.word	0x08001cc5
 8001bb0:	08001d47 	.word	0x08001d47
 8001bb4:	08001d47 	.word	0x08001d47
 8001bb8:	08001d47 	.word	0x08001d47
 8001bbc:	08001d05 	.word	0x08001d05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa2e 	bl	8002028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0204 	bic.w	r2, r2, #4
 8001bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	619a      	str	r2, [r3, #24]
      break;
 8001bfe:	e0a5      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fa9e 	bl	8002148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6999      	ldr	r1, [r3, #24]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	021a      	lsls	r2, r3, #8
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	619a      	str	r2, [r3, #24]
      break;
 8001c40:	e084      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fb07 	bl	800225c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0208 	orr.w	r2, r2, #8
 8001c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69d9      	ldr	r1, [r3, #28]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	61da      	str	r2, [r3, #28]
      break;
 8001c80:	e064      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fb6f 	bl	800236c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69d9      	ldr	r1, [r3, #28]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61da      	str	r2, [r3, #28]
      break;
 8001cc2:	e043      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fbb8 	bl	8002440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d02:	e023      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fbfc 	bl	8002508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d44:	e002      	b.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
      break;
 8001d4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop

08001d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e0b6      	b.n	8001eea <HAL_TIM_ConfigClockSource+0x18a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db8:	d03e      	beq.n	8001e38 <HAL_TIM_ConfigClockSource+0xd8>
 8001dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dbe:	f200 8087 	bhi.w	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	f000 8086 	beq.w	8001ed6 <HAL_TIM_ConfigClockSource+0x176>
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	d87f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001dd0:	2b70      	cmp	r3, #112	; 0x70
 8001dd2:	d01a      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0xaa>
 8001dd4:	2b70      	cmp	r3, #112	; 0x70
 8001dd6:	d87b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001dd8:	2b60      	cmp	r3, #96	; 0x60
 8001dda:	d050      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x11e>
 8001ddc:	2b60      	cmp	r3, #96	; 0x60
 8001dde:	d877      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001de0:	2b50      	cmp	r3, #80	; 0x50
 8001de2:	d03c      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0xfe>
 8001de4:	2b50      	cmp	r3, #80	; 0x50
 8001de6:	d873      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d058      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x13e>
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d86f      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d064      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15e>
 8001df4:	2b30      	cmp	r3, #48	; 0x30
 8001df6:	d86b      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d060      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15e>
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d867      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d05c      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15e>
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d05a      	beq.n	8001ebe <HAL_TIM_ConfigClockSource+0x15e>
 8001e08:	e062      	b.n	8001ed0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e1a:	f000 fc55 	bl	80026c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	609a      	str	r2, [r3, #8]
      break;
 8001e36:	e04f      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e48:	f000 fc3e 	bl	80026c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5a:	609a      	str	r2, [r3, #8]
      break;
 8001e5c:	e03c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 fbb2 	bl	80025d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2150      	movs	r1, #80	; 0x50
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fc0b 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e02c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 fbd1 	bl	8002632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2160      	movs	r1, #96	; 0x60
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fbfb 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e01c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f000 fb92 	bl	80025d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fbeb 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8001ebc:	e00c      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f000 fbe2 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8001ece:	e003      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a40      	ldr	r2, [pc, #256]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01f      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d01b      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <TIM_Base_SetConfig+0x118>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d017      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <TIM_Base_SetConfig+0x11c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <TIM_Base_SetConfig+0x120>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00f      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00b      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <TIM_Base_SetConfig+0x128>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d003      	beq.n	8001f8e <TIM_Base_SetConfig+0x9a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0x130>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d108      	bne.n	8001fa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <TIM_Base_SetConfig+0x114>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <TIM_Base_SetConfig+0x124>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <TIM_Base_SetConfig+0x128>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <TIM_Base_SetConfig+0x12c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <TIM_Base_SetConfig+0x130>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40013400 	.word	0x40013400
 800201c:	40014000 	.word	0x40014000
 8002020:	40014400 	.word	0x40014400
 8002024:	40014800 	.word	0x40014800

08002028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 0201 	bic.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f023 0302 	bic.w	r3, r3, #2
 8002074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <TIM_OC1_SetConfig+0x10c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00f      	beq.n	80020a8 <TIM_OC1_SetConfig+0x80>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <TIM_OC1_SetConfig+0x110>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00b      	beq.n	80020a8 <TIM_OC1_SetConfig+0x80>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a2a      	ldr	r2, [pc, #168]	; (800213c <TIM_OC1_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <TIM_OC1_SetConfig+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a29      	ldr	r2, [pc, #164]	; (8002140 <TIM_OC1_SetConfig+0x118>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d003      	beq.n	80020a8 <TIM_OC1_SetConfig+0x80>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a28      	ldr	r2, [pc, #160]	; (8002144 <TIM_OC1_SetConfig+0x11c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10c      	bne.n	80020c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0308 	bic.w	r3, r3, #8
 80020ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <TIM_OC1_SetConfig+0x10c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00f      	beq.n	80020ea <TIM_OC1_SetConfig+0xc2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <TIM_OC1_SetConfig+0x110>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00b      	beq.n	80020ea <TIM_OC1_SetConfig+0xc2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a19      	ldr	r2, [pc, #100]	; (800213c <TIM_OC1_SetConfig+0x114>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <TIM_OC1_SetConfig+0xc2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <TIM_OC1_SetConfig+0x118>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <TIM_OC1_SetConfig+0xc2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <TIM_OC1_SetConfig+0x11c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d111      	bne.n	800210e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40013400 	.word	0x40013400
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800

08002148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f023 0210 	bic.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0320 	bic.w	r3, r3, #32
 8002196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a28      	ldr	r2, [pc, #160]	; (8002248 <TIM_OC2_SetConfig+0x100>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_OC2_SetConfig+0x6c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a27      	ldr	r2, [pc, #156]	; (800224c <TIM_OC2_SetConfig+0x104>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d10d      	bne.n	80021d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <TIM_OC2_SetConfig+0x100>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00f      	beq.n	80021f8 <TIM_OC2_SetConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <TIM_OC2_SetConfig+0x104>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_OC2_SetConfig+0xb0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <TIM_OC2_SetConfig+0x108>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_OC2_SetConfig+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <TIM_OC2_SetConfig+0x10c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_OC2_SetConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a19      	ldr	r2, [pc, #100]	; (8002258 <TIM_OC2_SetConfig+0x110>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d113      	bne.n	8002220 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	621a      	str	r2, [r3, #32]
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40013400 	.word	0x40013400
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800

0800225c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a27      	ldr	r2, [pc, #156]	; (8002358 <TIM_OC3_SetConfig+0xfc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_OC3_SetConfig+0x6a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <TIM_OC3_SetConfig+0x100>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10d      	bne.n	80022e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <TIM_OC3_SetConfig+0xfc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00f      	beq.n	800230a <TIM_OC3_SetConfig+0xae>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <TIM_OC3_SetConfig+0x100>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_OC3_SetConfig+0xae>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <TIM_OC3_SetConfig+0x104>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <TIM_OC3_SetConfig+0xae>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <TIM_OC3_SetConfig+0x108>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_OC3_SetConfig+0xae>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <TIM_OC3_SetConfig+0x10c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d113      	bne.n	8002332 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	621a      	str	r2, [r3, #32]
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40013400 	.word	0x40013400
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800

0800236c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	031b      	lsls	r3, r3, #12
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <TIM_OC4_SetConfig+0xc0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00f      	beq.n	80023f0 <TIM_OC4_SetConfig+0x84>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <TIM_OC4_SetConfig+0xc4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <TIM_OC4_SetConfig+0x84>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <TIM_OC4_SetConfig+0xc8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <TIM_OC4_SetConfig+0x84>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <TIM_OC4_SetConfig+0xcc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_OC4_SetConfig+0x84>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <TIM_OC4_SetConfig+0xd0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d109      	bne.n	8002404 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40013400 	.word	0x40013400
 8002434:	40014000 	.word	0x40014000
 8002438:	40014400 	.word	0x40014400
 800243c:	40014800 	.word	0x40014800

08002440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <TIM_OC5_SetConfig+0xb4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00f      	beq.n	80024ba <TIM_OC5_SetConfig+0x7a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <TIM_OC5_SetConfig+0xb8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <TIM_OC5_SetConfig+0x7a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <TIM_OC5_SetConfig+0xbc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <TIM_OC5_SetConfig+0x7a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <TIM_OC5_SetConfig+0xc0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_OC5_SetConfig+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a13      	ldr	r2, [pc, #76]	; (8002504 <TIM_OC5_SetConfig+0xc4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d109      	bne.n	80024ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40013400 	.word	0x40013400
 80024fc:	40014000 	.word	0x40014000
 8002500:	40014400 	.word	0x40014400
 8002504:	40014800 	.word	0x40014800

08002508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800254e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <TIM_OC6_SetConfig+0xb8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00f      	beq.n	8002584 <TIM_OC6_SetConfig+0x7c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <TIM_OC6_SetConfig+0xbc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00b      	beq.n	8002584 <TIM_OC6_SetConfig+0x7c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <TIM_OC6_SetConfig+0xc0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <TIM_OC6_SetConfig+0x7c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a15      	ldr	r2, [pc, #84]	; (80025cc <TIM_OC6_SetConfig+0xc4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_OC6_SetConfig+0x7c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <TIM_OC6_SetConfig+0xc8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d109      	bne.n	8002598 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	621a      	str	r2, [r3, #32]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40013400 	.word	0x40013400
 80025c8:	40014000 	.word	0x40014000
 80025cc:	40014400 	.word	0x40014400
 80025d0:	40014800 	.word	0x40014800

080025d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f023 0201 	bic.w	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f023 030a 	bic.w	r3, r3, #10
 8002610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	621a      	str	r2, [r3, #32]
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002632:	b480      	push	{r7}
 8002634:	b087      	sub	sp, #28
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f023 0210 	bic.w	r2, r3, #16
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800265c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800266e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	621a      	str	r2, [r3, #32]
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f043 0307 	orr.w	r3, r3, #7
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002768:	2302      	movs	r3, #2
 800276a:	e068      	b.n	800283e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80027a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01d      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d018      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10c      	bne.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40013400 	.word	0x40013400
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800
 800285c:	40000c00 	.word	0x40000c00
 8002860:	40014000 	.word	0x40014000

08002864 <memset>:
 8002864:	4402      	add	r2, r0
 8002866:	4603      	mov	r3, r0
 8002868:	4293      	cmp	r3, r2
 800286a:	d100      	bne.n	800286e <memset+0xa>
 800286c:	4770      	bx	lr
 800286e:	f803 1b01 	strb.w	r1, [r3], #1
 8002872:	e7f9      	b.n	8002868 <memset+0x4>

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4d0d      	ldr	r5, [pc, #52]	; (80028ac <__libc_init_array+0x38>)
 8002878:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287a:	1b64      	subs	r4, r4, r5
 800287c:	10a4      	asrs	r4, r4, #2
 800287e:	2600      	movs	r6, #0
 8002880:	42a6      	cmp	r6, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	4d0b      	ldr	r5, [pc, #44]	; (80028b4 <__libc_init_array+0x40>)
 8002886:	4c0c      	ldr	r4, [pc, #48]	; (80028b8 <__libc_init_array+0x44>)
 8002888:	f000 f818 	bl	80028bc <_init>
 800288c:	1b64      	subs	r4, r4, r5
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	2600      	movs	r6, #0
 8002892:	42a6      	cmp	r6, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	f855 3b04 	ldr.w	r3, [r5], #4
 800289c:	4798      	blx	r3
 800289e:	3601      	adds	r6, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a6:	4798      	blx	r3
 80028a8:	3601      	adds	r6, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	08002914 	.word	0x08002914
 80028b0:	08002914 	.word	0x08002914
 80028b4:	08002914 	.word	0x08002914
 80028b8:	08002918 	.word	0x08002918

080028bc <_init>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr

080028c8 <_fini>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	bf00      	nop
 80028cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ce:	bc08      	pop	{r3}
 80028d0:	469e      	mov	lr, r3
 80028d2:	4770      	bx	lr
