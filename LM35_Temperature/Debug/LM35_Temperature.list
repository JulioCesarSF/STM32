
LM35_Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08008258  08008258  00018258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008634  08008634  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800863c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001d4  08008810  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08008810  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea83  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc8  00000000  00000000  0002ecca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00030c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a33  00000000  00000000  000319e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002844b  00000000  00000000  00032413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2a1  00000000  00000000  0005a85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc67b  00000000  00000000  00069aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048e8  00000000  00000000  0016617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0016aa64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008240 	.word	0x08008240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008240 	.word	0x08008240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 fb97 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f832 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f92c 	bl	800110c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000eb4:	f000 f882 	bl	8000fbc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000eb8:	f000 f8f8 	bl	80010ac <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_ADC_Start(&hadc1) != HAL_OK) Error_Handler();
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <main+0x68>)
 8000ebe:	f000 ffa7 	bl	8001e10 <HAL_ADC_Start>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <main+0x28>
 8000ec8:	f000 f96e 	bl	80011a8 <Error_Handler>
	if(HAL_ADC_PollForConversion(&hadc1, 20) != HAL_OK) Error_Handler();
 8000ecc:	2114      	movs	r1, #20
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <main+0x68>)
 8000ed0:	f001 f88c 	bl	8001fec <HAL_ADC_PollForConversion>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <main+0x3a>
 8000eda:	f000 f965 	bl	80011a8 <Error_Handler>
	value_from_sensor = HAL_ADC_GetValue(&hadc1);
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <main+0x68>)
 8000ee0:	f001 f95c 	bl	800219c <HAL_ADC_GetValue>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <main+0x6c>)
 8000ee8:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <main+0x68>)
 8000eec:	f001 f84a 	bl	8001f84 <HAL_ADC_Stop>
	if(value_from_sensor > 0)
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <main+0x6c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <main+0x5e>
	{
		convert_temperature_and_print(value_from_sensor);
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <main+0x6c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f91d 	bl	800113c <convert_temperature_and_print>
	}
	HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f06:	f000 fbdd 	bl	80016c4 <HAL_Delay>
	if(HAL_ADC_Start(&hadc1) != HAL_OK) Error_Handler();
 8000f0a:	e7d7      	b.n	8000ebc <main+0x18>
 8000f0c:	200001f0 	.word	0x200001f0
 8000f10:	200002dc 	.word	0x200002dc

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 f893 	bl	800604e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3a:	f002 fa45 	bl	80033c8 <HAL_PWREx_ControlVoltageScaling>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f44:	f000 f930 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000f64:	2309      	movs	r3, #9
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fa7b 	bl	8003474 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f84:	f000 f910 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fe42 	bl	8003c2c <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fae:	f000 f8fb 	bl	80011a8 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3758      	adds	r7, #88	; 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8000fe0:	4a30      	ldr	r2, [pc, #192]	; (80010a4 <MX_ADC1_Init+0xe8>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8000fe6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001000:	2204      	movs	r2, #4
 8001002:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001006:	2200      	movs	r2, #0
 8001008:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <MX_ADC1_Init+0xe4>)
 800100c:	2200      	movs	r2, #0
 800100e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001012:	2201      	movs	r2, #1
 8001014:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC1_Init+0xe4>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001042:	f000 fd95 	bl	8001b70 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800104c:	f000 f8ac 	bl	80011a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC1_Init+0xe4>)
 800105c:	f001 fe66 	bl	8002d2c <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001066:	f000 f89f 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_ADC1_Init+0xec>)
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0xe4>)
 8001088:	f001 f896 	bl	80021b8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001092:	f000 f889 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001f0 	.word	0x200001f0
 80010a4:	50040000 	.word	0x50040000
 80010a8:	14f00020 	.word	0x14f00020

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010b2:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_USART2_UART_Init+0x5c>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USART2_UART_Init+0x58>)
 80010f0:	f003 fc7c 	bl	80049ec <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 f855 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000254 	.word	0x20000254
 8001108:	40004400 	.word	0x40004400

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_GPIO_Init+0x2c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <MX_GPIO_Init+0x2c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_GPIO_Init+0x2c>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000

0800113c <convert_temperature_and_print>:

/* USER CODE BEGIN 4 */
void convert_temperature_and_print(uint32_t value_to_convert)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	float temperature = (value_to_convert * 330.0f) / 1023.0f;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001194 <convert_temperature_and_print+0x58>
 8001152:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001156:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001198 <convert_temperature_and_print+0x5c>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	edc7 7a03 	vstr	s15, [r7, #12]
	//uint32_t new_value = value_to_convert * 8.05;
	sprintf(log_message, "Temperature: %f C \r\n", temperature);
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff f9f0 	bl	8000548 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	490b      	ldr	r1, [pc, #44]	; (800119c <convert_temperature_and_print+0x60>)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <convert_temperature_and_print+0x64>)
 8001170:	f004 ff0a 	bl	8005f88 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)log_message, strlen(log_message), HAL_MAX_DELAY);
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <convert_temperature_and_print+0x64>)
 8001176:	f7ff f87b 	bl	8000270 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	4907      	ldr	r1, [pc, #28]	; (80011a0 <convert_temperature_and_print+0x64>)
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <convert_temperature_and_print+0x68>)
 8001186:	f003 fc7f 	bl	8004a88 <HAL_UART_Transmit>
	return;
 800118a:	bf00      	nop
}
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	43a50000 	.word	0x43a50000
 8001198:	447fc000 	.word	0x447fc000
 800119c:	08008258 	.word	0x08008258
 80011a0:	200002e0 	.word	0x200002e0
 80011a4:	20000254 	.word	0x20000254

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6613      	str	r3, [r2, #96]	; 0x60
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ac      	sub	sp, #176	; 0xb0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2288      	movs	r2, #136	; 0x88
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 ff16 	bl	800604e <memset>
  if(hadc->Instance==ADC1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_ADC_MspInit+0xc8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d147      	bne.n	80012bc <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001230:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001242:	2308      	movs	r3, #8
 8001244:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f002 ff09 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001268:	f7ff ff9e 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a2:	230b      	movs	r3, #11
 80012a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f001 fece 	bl	8003058 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	37b0      	adds	r7, #176	; 0xb0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	50040000 	.word	0x50040000
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ac      	sub	sp, #176	; 0xb0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2288      	movs	r2, #136	; 0x88
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 feae 	bl	800604e <memset>
  if(huart->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_UART_MspInit+0xb0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13b      	bne.n	8001374 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f002 feb3 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff ff48 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_MspInit+0xb4>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a18      	ldr	r2, [pc, #96]	; (8001380 <HAL_UART_MspInit+0xb4>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_UART_MspInit+0xb4>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_UART_MspInit+0xb4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_UART_MspInit+0xb4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_MspInit+0xb4>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001348:	230c      	movs	r3, #12
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001360:	2307      	movs	r3, #7
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001370:	f001 fe72 	bl	8003058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	37b0      	adds	r7, #176	; 0xb0
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40004400 	.word	0x40004400
 8001380:	40021000 	.word	0x40021000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d0:	f000 f958 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_kill>:

int _kill(int pid, int sig)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013f2:	f004 fe7f 	bl	80060f4 <__errno>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2216      	movs	r2, #22
 80013fa:	601a      	str	r2, [r3, #0]
  return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_exit>:

void _exit (int status)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffe7 	bl	80013e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800141a:	e7fe      	b.n	800141a <_exit+0x12>

0800141c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e00a      	b.n	8001444 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142e:	f3af 8000 	nop.w
 8001432:	4601      	mov	r1, r0
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	b2ca      	uxtb	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf0      	blt.n	800142e <_read+0x12>
  }

  return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e009      	b.n	800147c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbf1      	blt.n	8001468 <_write+0x12>
  }
  return len;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_close>:

int _close(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	605a      	str	r2, [r3, #4]
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_isatty>:

int _isatty(int file)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ce:	2301      	movs	r3, #1
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	; (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f004 fde4 	bl	80060f4 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20018000 	.word	0x20018000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000358 	.word	0x20000358
 8001560:	200004b0 	.word	0x200004b0

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f004 fda3 	bl	8006100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff fc73 	bl	8000ea4 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015cc:	0800863c 	.word	0x0800863c
  ldr r2, =_sbss
 80015d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80015d4:	200004ac 	.word	0x200004ac

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>

080015da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f001 fd03 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f80e 	bl	800160c <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fc:	f7ff fdda 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	79fb      	ldrb	r3, [r7, #7]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_InitTick+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_InitTick+0x70>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_InitTick+0x6c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fd01 	bl	800303e <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d809      	bhi.n	800165c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f001 fcd9 	bl	8003006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_InitTick+0x74>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e007      	b.n	800166c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e004      	b.n	800166c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	e001      	b.n	800166c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	2000035c 	.word	0x2000035c

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2000035c 	.word	0x2000035c

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	609a      	str	r2, [r3, #8]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3360      	adds	r3, #96	; 0x60
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <LL_ADC_SetOffset+0x44>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	03fff000 	.word	0x03fff000

080017bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3360      	adds	r3, #96	; 0x60
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3330      	adds	r3, #48	; 0x30
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	211f      	movs	r1, #31
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	f003 011f 	and.w	r1, r3, #31
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3314      	adds	r3, #20
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0e5b      	lsrs	r3, r3, #25
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0d1b      	lsrs	r3, r3, #20
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2107      	movs	r1, #7
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0318 	and.w	r3, r3, #24
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001918:	40d9      	lsrs	r1, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	400b      	ands	r3, r1
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	431a      	orrs	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800192a:	bf00      	nop
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	0007ffff 	.word	0x0007ffff

0800193c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 031f 	and.w	r3, r3, #31
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6093      	str	r3, [r2, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019fc:	d101      	bne.n	8001a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	f043 0202 	orr.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_IsEnabled+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_IsEnabled+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_IsDisableOngoing+0x18>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_IsDisableOngoing+0x1a>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac0:	f043 0204 	orr.w	r2, r3, #4
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	f043 0210 	orr.w	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d101      	bne.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e130      	b.n	8001dec <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fb2f 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fef1 	bl	8001998 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fed7 	bl	8001974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff0c 	bl	80019e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fef0 	bl	80019c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <HAL_ADC_Init+0x284>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	4a84      	ldr	r2, [pc, #528]	; (8001df8 <HAL_ADC_Init+0x288>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff feee 	bl	80019e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10d      	bne.n	8001c2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	f043 0210 	orr.w	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff62 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 8001c38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 80c9 	bne.w	8001dda <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80c5 	bne.w	8001dda <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c58:	f043 0202 	orr.w	r2, r3, #2
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fefb 	bl	8001a60 <LL_ADC_IsEnabled>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d115      	bne.n	8001c9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c70:	4862      	ldr	r0, [pc, #392]	; (8001dfc <HAL_ADC_Init+0x28c>)
 8001c72:	f7ff fef5 	bl	8001a60 <LL_ADC_IsEnabled>
 8001c76:	4604      	mov	r4, r0
 8001c78:	4861      	ldr	r0, [pc, #388]	; (8001e00 <HAL_ADC_Init+0x290>)
 8001c7a:	f7ff fef1 	bl	8001a60 <LL_ADC_IsEnabled>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	431c      	orrs	r4, r3
 8001c82:	4860      	ldr	r0, [pc, #384]	; (8001e04 <HAL_ADC_Init+0x294>)
 8001c84:	f7ff feec 	bl	8001a60 <LL_ADC_IsEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4619      	mov	r1, r3
 8001c96:	485c      	ldr	r0, [pc, #368]	; (8001e08 <HAL_ADC_Init+0x298>)
 8001c98:	f7ff fd38 	bl	800170c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e5b      	ldrb	r3, [r3, #25]
 8001ca0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	045b      	lsls	r3, r3, #17
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_ADC_Init+0x29c>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff1c 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 8001d12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d13d      	bne.n	8001d96 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d13a      	bne.n	8001d96 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d3c:	f023 0302 	bic.w	r3, r3, #2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	69b9      	ldr	r1, [r7, #24]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d118      	bne.n	8001d86 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d5e:	f023 0304 	bic.w	r3, r3, #4
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d76:	430a      	orrs	r2, r1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10c      	bne.n	8001db8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f023 010f 	bic.w	r1, r3, #15
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
 8001db6:	e007      	b.n	8001dc8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 020f 	bic.w	r2, r2, #15
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f023 0303 	bic.w	r3, r3, #3
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
 8001dd8:	e007      	b.n	8001dea <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3724      	adds	r7, #36	; 0x24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	20000000 	.word	0x20000000
 8001df8:	053e2d63 	.word	0x053e2d63
 8001dfc:	50040000 	.word	0x50040000
 8001e00:	50040100 	.word	0x50040100
 8001e04:	50040200 	.word	0x50040200
 8001e08:	50040300 	.word	0x50040300
 8001e0c:	fff0c007 	.word	0xfff0c007

08001e10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e18:	4857      	ldr	r0, [pc, #348]	; (8001f78 <HAL_ADC_Start+0x168>)
 8001e1a:	f7ff fd8f 	bl	800193c <LL_ADC_GetMultimode>
 8001e1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe69 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 809c 	bne.w	8001f6a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_Start+0x30>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e097      	b.n	8001f70 <HAL_ADC_Start+0x160>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fe63 	bl	8002b14 <ADC_Enable>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 8083 	bne.w	8001f60 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <HAL_ADC_Start+0x16c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d002      	beq.n	8001e7e <HAL_ADC_Start+0x6e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_Start+0x70>
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_ADC_Start+0x170>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	f023 0206 	bic.w	r2, r3, #6
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	221c      	movs	r2, #28
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	; (8001f7c <HAL_ADC_Start+0x16c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d002      	beq.n	8001edc <HAL_ADC_Start+0xcc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e000      	b.n	8001ede <HAL_ADC_Start+0xce>
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_ADC_Start+0x170>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d008      	beq.n	8001ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d002      	beq.n	8001ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d114      	bne.n	8001f22 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fdc6 	bl	8001aac <LL_ADC_REG_StartConversion>
 8001f20:	e025      	b.n	8001f6e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_ADC_Start+0x16c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d002      	beq.n	8001f3e <HAL_ADC_Start+0x12e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	e000      	b.n	8001f40 <HAL_ADC_Start+0x130>
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_ADC_Start+0x170>)
 8001f40:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00f      	beq.n	8001f6e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f5e:	e006      	b.n	8001f6e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f68:	e001      	b.n	8001f6e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	50040100 	.word	0x50040100
 8001f80:	50040000 	.word	0x50040000

08001f84 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Stop+0x16>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e023      	b.n	8001fe2 <HAL_ADC_Stop+0x5e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001fa2:	2103      	movs	r1, #3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fcf9 	bl	800299c <ADC_ConversionStop>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fe33 	bl	8002c20 <ADC_Disable>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff6:	4866      	ldr	r0, [pc, #408]	; (8002190 <HAL_ADC_PollForConversion+0x1a4>)
 8001ff8:	f7ff fca0 	bl	800193c <LL_ADC_GetMultimode>
 8001ffc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b08      	cmp	r3, #8
 8002004:	d102      	bne.n	800200c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002006:	2308      	movs	r3, #8
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e02a      	b.n	8002062 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d002      	beq.n	800201e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d111      	bne.n	8002042 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0a4      	b.n	8002186 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800203c:	2304      	movs	r3, #4
 800203e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002040:	e00f      	b.n	8002062 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002042:	4853      	ldr	r0, [pc, #332]	; (8002190 <HAL_ADC_PollForConversion+0x1a4>)
 8002044:	f7ff fc88 	bl	8001958 <LL_ADC_GetMultiDMATransfer>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e093      	b.n	8002186 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800205e:	2304      	movs	r3, #4
 8002060:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002062:	f7ff fb23 	bl	80016ac <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002068:	e021      	b.n	80020ae <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d01d      	beq.n	80020ae <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002072:	f7ff fb1b 	bl	80016ac <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <HAL_ADC_PollForConversion+0x9c>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d112      	bne.n	80020ae <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0204 	orr.w	r2, r3, #4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e06b      	b.n	8002186 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0d6      	beq.n	800206a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fba6 	bl	800181e <LL_ADC_REG_IsTriggerSourceSWStart>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e5b      	ldrb	r3, [r3, #25]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d118      	bne.n	8002112 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d111      	bne.n	8002112 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_ADC_PollForConversion+0x1a8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d002      	beq.n	8002122 <HAL_ADC_PollForConversion+0x136>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e000      	b.n	8002124 <HAL_ADC_PollForConversion+0x138>
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_ADC_PollForConversion+0x1ac>)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4293      	cmp	r3, r2
 800212a:	d008      	beq.n	800213e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d002      	beq.n	800213e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b09      	cmp	r3, #9
 800213c:	d104      	bne.n	8002148 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e00c      	b.n	8002162 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_ADC_PollForConversion+0x1a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d002      	beq.n	8002158 <HAL_ADC_PollForConversion+0x16c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e000      	b.n	800215a <HAL_ADC_PollForConversion+0x16e>
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_ADC_PollForConversion+0x1ac>)
 800215a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d104      	bne.n	8002172 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2208      	movs	r2, #8
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e008      	b.n	8002184 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	220c      	movs	r2, #12
 8002182:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	50040300 	.word	0x50040300
 8002194:	50040100 	.word	0x50040100
 8002198:	50040000 	.word	0x50040000

0800219c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0b6      	sub	sp, #216	; 0xd8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x22>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e3c9      	b.n	800296e <HAL_ADC_ConfigChannel+0x7b6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fc88 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 83aa 	bne.w	8002948 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d824      	bhi.n	800224e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	3b02      	subs	r3, #2
 800220a:	2b03      	cmp	r3, #3
 800220c:	d81b      	bhi.n	8002246 <HAL_ADC_ConfigChannel+0x8e>
 800220e:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <HAL_ADC_ConfigChannel+0x5c>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222d 	.word	0x0800222d
 800221c:	08002235 	.word	0x08002235
 8002220:	0800223d 	.word	0x0800223d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002224:	230c      	movs	r3, #12
 8002226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800222a:	e010      	b.n	800224e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800222c:	2312      	movs	r3, #18
 800222e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002232:	e00c      	b.n	800224e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002234:	2318      	movs	r3, #24
 8002236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800223a:	e008      	b.n	800224e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800223c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002246:	2306      	movs	r3, #6
 8002248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800224c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800225c:	f7ff faf2 	bl	8001844 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fc49 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 800226a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc69 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 8002278:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 81a4 	bne.w	80025ce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 819f 	bne.w	80025ce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	461a      	mov	r2, r3
 800229e:	f7ff fafd 	bl	800189c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d00a      	beq.n	80022da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6919      	ldr	r1, [r3, #16]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d4:	f7ff fa4e 	bl	8001774 <LL_ADC_SetOffset>
 80022d8:	e179      	b.n	80025ce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa6b 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x14e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa60 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	e01e      	b.n	8002344 <HAL_ADC_ConfigChannel+0x18c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fa55 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800232c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e004      	b.n	8002342 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002338:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1a4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	e018      	b.n	800238e <HAL_ADC_ConfigChannel+0x1d6>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e004      	b.n	800238e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800238e:	429a      	cmp	r2, r3
 8002390:	d106      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fa24 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fa08 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x214>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f9fd 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 021f 	and.w	r2, r3, #31
 80023ca:	e01e      	b.n	800240a <HAL_ADC_ConfigChannel+0x252>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f9f2 	bl	80017bc <LL_ADC_GetOffsetChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80023ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80023f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e004      	b.n	8002408 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80023fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x26a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	e018      	b.n	8002454 <HAL_ADC_ConfigChannel+0x29c>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800243a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800243e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e004      	b.n	8002454 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800244a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f9c1 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff f9a5 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002472:	4603      	mov	r3, r0
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x2da>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f99a 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	e01e      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x318>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f98f 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80024b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80024b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e004      	b.n	80024ce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80024c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x330>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	e014      	b.n	8002512 <HAL_ADC_ConfigChannel+0x35a>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80024f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80024fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	2102      	movs	r1, #2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f962 	bl	80017e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2103      	movs	r1, #3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f946 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x398>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2103      	movs	r1, #3
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff f93b 	bl	80017bc <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	e017      	b.n	8002580 <HAL_ADC_ConfigChannel+0x3c8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2103      	movs	r1, #3
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f930 	bl	80017bc <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e003      	b.n	800257e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x3e0>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	e011      	b.n	80025bc <HAL_ADC_ConfigChannel+0x404>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80025a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80025aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2103      	movs	r1, #3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f90d 	bl	80017e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa44 	bl	8001a60 <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8140 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f7ff f981 	bl	80018f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a8f      	ldr	r2, [pc, #572]	; (8002834 <HAL_ADC_ConfigChannel+0x67c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	f040 8131 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x46e>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	3301      	adds	r3, #1
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2b09      	cmp	r3, #9
 800261c:	bf94      	ite	ls
 800261e:	2301      	movls	r3, #1
 8002620:	2300      	movhi	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e019      	b.n	800265a <HAL_ADC_ConfigChannel+0x4a2>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2b09      	cmp	r3, #9
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265a:	2b00      	cmp	r3, #0
 800265c:	d079      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_ADC_ConfigChannel+0x4c2>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002678:	e015      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x4ee>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800268c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	069b      	lsls	r3, r3, #26
 80026a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x50e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0e9b      	lsrs	r3, r3, #26
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	e017      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x53e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80026d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80026e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x564>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	e018      	b.n	800274e <HAL_ADC_ConfigChannel+0x596>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f003 021f 	and.w	r2, r3, #31
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274e:	430b      	orrs	r3, r1
 8002750:	e081      	b.n	8002856 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_ADC_ConfigChannel+0x5b6>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276c:	e015      	b.n	800279a <HAL_ADC_ConfigChannel+0x5e2>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002786:	2320      	movs	r3, #32
 8002788:	e003      	b.n	8002792 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	069b      	lsls	r3, r3, #26
 8002796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x602>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	e017      	b.n	80027ea <HAL_ADC_ConfigChannel+0x632>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	61bb      	str	r3, [r7, #24]
  return result;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80027d2:	2320      	movs	r3, #32
 80027d4:	e003      	b.n	80027de <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	ea42 0103 	orr.w	r1, r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x65e>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e9b      	lsrs	r3, r3, #26
 8002800:	3301      	adds	r3, #1
 8002802:	f003 021f 	and.w	r2, r3, #31
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	3b1e      	subs	r3, #30
 800280e:	051b      	lsls	r3, r3, #20
 8002810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002814:	e01e      	b.n	8002854 <HAL_ADC_ConfigChannel+0x69c>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	60fb      	str	r3, [r7, #12]
  return result;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e006      	b.n	8002840 <HAL_ADC_ConfigChannel+0x688>
 8002832:	bf00      	nop
 8002834:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	051b      	lsls	r3, r3, #20
 8002850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002854:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285a:	4619      	mov	r1, r3
 800285c:	f7ff f81e 	bl	800189c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b44      	ldr	r3, [pc, #272]	; (8002978 <HAL_ADC_ConfigChannel+0x7c0>)
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d07a      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800286c:	4843      	ldr	r0, [pc, #268]	; (800297c <HAL_ADC_ConfigChannel+0x7c4>)
 800286e:	f7fe ff73 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002872:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a41      	ldr	r2, [pc, #260]	; (8002980 <HAL_ADC_ConfigChannel+0x7c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d12c      	bne.n	80028da <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d126      	bne.n	80028da <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3c      	ldr	r2, [pc, #240]	; (8002984 <HAL_ADC_ConfigChannel+0x7cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x6e8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <HAL_ADC_ConfigChannel+0x7d0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d15d      	bne.n	800295c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a8:	4619      	mov	r1, r3
 80028aa:	4834      	ldr	r0, [pc, #208]	; (800297c <HAL_ADC_ConfigChannel+0x7c4>)
 80028ac:	f7fe ff41 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_ADC_ConfigChannel+0x7d4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	4a36      	ldr	r2, [pc, #216]	; (8002990 <HAL_ADC_ConfigChannel+0x7d8>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028ca:	e002      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d8:	e040      	b.n	800295c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_ADC_ConfigChannel+0x7dc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d118      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d112      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_ADC_ConfigChannel+0x7cc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_ADC_ConfigChannel+0x74c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <HAL_ADC_ConfigChannel+0x7d0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d12d      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290c:	4619      	mov	r1, r3
 800290e:	481b      	ldr	r0, [pc, #108]	; (800297c <HAL_ADC_ConfigChannel+0x7c4>)
 8002910:	f7fe ff0f 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002914:	e024      	b.n	8002960 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_ADC_ConfigChannel+0x7e0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d120      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d11a      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_ADC_ConfigChannel+0x7cc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d115      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800293a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293e:	4619      	mov	r1, r3
 8002940:	480e      	ldr	r0, [pc, #56]	; (800297c <HAL_ADC_ConfigChannel+0x7c4>)
 8002942:	f7fe fef6 	bl	8001732 <LL_ADC_SetCommonPathInternalCh>
 8002946:	e00c      	b.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800295a:	e002      	b.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002960:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800296a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800296e:	4618      	mov	r0, r3
 8002970:	37d8      	adds	r7, #216	; 0xd8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	80080000 	.word	0x80080000
 800297c:	50040300 	.word	0x50040300
 8002980:	c7520000 	.word	0xc7520000
 8002984:	50040000 	.word	0x50040000
 8002988:	50040200 	.word	0x50040200
 800298c:	20000000 	.word	0x20000000
 8002990:	053e2d63 	.word	0x053e2d63
 8002994:	cb840000 	.word	0xcb840000
 8002998:	80000001 	.word	0x80000001

0800299c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f8a2 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 80029b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f8c3 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 80029c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d103      	bne.n	80029d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8098 	beq.w	8002b04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02a      	beq.n	8002a38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7e5b      	ldrb	r3, [r3, #25]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d126      	bne.n	8002a38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7e1b      	ldrb	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d122      	bne.n	8002a38 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029f6:	e014      	b.n	8002a22 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <ADC_ConversionStop+0x174>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d90d      	bls.n	8002a1c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e074      	b.n	8002b06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d1e3      	bne.n	80029f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2240      	movs	r2, #64	; 0x40
 8002a36:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d014      	beq.n	8002a68 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f85a 	bl	8001afc <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f817 	bl	8001a86 <LL_ADC_IsDisableOngoing>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff f836 	bl	8001ad4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d014      	beq.n	8002a98 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f869 	bl	8001b4a <LL_ADC_INJ_IsConversionOngoing>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe ffff 	bl	8001a86 <LL_ADC_IsDisableOngoing>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f845 	bl	8001b22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d005      	beq.n	8002aaa <ADC_ConversionStop+0x10e>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d105      	bne.n	8002ab0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	617b      	str	r3, [r7, #20]
        break;
 8002aa8:	e005      	b.n	8002ab6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	617b      	str	r3, [r7, #20]
        break;
 8002aae:	e002      	b.n	8002ab6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]
        break;
 8002ab4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fdf9 	bl	80016ac <HAL_GetTick>
 8002aba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002abc:	e01b      	b.n	8002af6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002abe:	f7fe fdf5 	bl	80016ac <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d914      	bls.n	8002af6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1dc      	bne.n	8002abe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	a33fffff 	.word	0xa33fffff

08002b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ff9b 	bl	8001a60 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d169      	bne.n	8002c04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <ADC_Enable+0xfc>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e055      	b.n	8002c06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff56 	bl	8001a10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b64:	482b      	ldr	r0, [pc, #172]	; (8002c14 <ADC_Enable+0x100>)
 8002b66:	f7fe fdf7 	bl	8001758 <LL_ADC_GetCommonPathInternalCh>
 8002b6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <ADC_Enable+0x104>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <ADC_Enable+0x108>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b8e:	e002      	b.n	8002b96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fd86 	bl	80016ac <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba2:	e028      	b.n	8002bf6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe ff59 	bl	8001a60 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ff29 	bl	8001a10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bbe:	f7fe fd75 	bl	80016ac <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d914      	bls.n	8002bf6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d00d      	beq.n	8002bf6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0210 	orr.w	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e007      	b.n	8002c06 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d1cf      	bne.n	8002ba4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	8000003f 	.word	0x8000003f
 8002c14:	50040300 	.word	0x50040300
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	053e2d63 	.word	0x053e2d63

08002c20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff2a 	bl	8001a86 <LL_ADC_IsDisableOngoing>
 8002c32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ff11 	bl	8001a60 <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d047      	beq.n	8002cd4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d144      	bne.n	8002cd4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030d 	and.w	r3, r3, #13
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10c      	bne.n	8002c72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe feeb 	bl	8001a38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2203      	movs	r2, #3
 8002c68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c6a:	f7fe fd1f 	bl	80016ac <HAL_GetTick>
 8002c6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c70:	e029      	b.n	8002cc6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e023      	b.n	8002cd6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c8e:	f7fe fd0d 	bl	80016ac <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d914      	bls.n	8002cc6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e007      	b.n	8002cd6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1dc      	bne.n	8002c8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <LL_ADC_IsEnabled>:
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsEnabled+0x18>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsEnabled+0x1a>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d101      	bne.n	8002d1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b09f      	sub	sp, #124	; 0x7c
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e093      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d52:	2300      	movs	r3, #0
 8002d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d56:	2300      	movs	r3, #0
 8002d58:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a47      	ldr	r2, [pc, #284]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	e001      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e072      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ffb8 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffb2 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d154      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d151      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002dae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02c      	beq.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dca:	035b      	lsls	r3, r3, #13
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd4:	4829      	ldr	r0, [pc, #164]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dd6:	f7ff ff82 	bl	8002cde <LL_ADC_IsEnabled>
 8002dda:	4604      	mov	r4, r0
 8002ddc:	4828      	ldr	r0, [pc, #160]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dde:	f7ff ff7e 	bl	8002cde <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	431c      	orrs	r4, r3
 8002de6:	4828      	ldr	r0, [pc, #160]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002de8:	f7ff ff79 	bl	8002cde <LL_ADC_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4323      	orrs	r3, r4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d137      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dfc:	f023 030f 	bic.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6811      	ldr	r1, [r2, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e10:	e028      	b.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e20:	f7ff ff5d 	bl	8002cde <LL_ADC_IsEnabled>
 8002e24:	4604      	mov	r4, r0
 8002e26:	4816      	ldr	r0, [pc, #88]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e28:	f7ff ff59 	bl	8002cde <LL_ADC_IsEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	431c      	orrs	r4, r3
 8002e30:	4815      	ldr	r0, [pc, #84]	; (8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e32:	f7ff ff54 	bl	8002cde <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4323      	orrs	r3, r4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d112      	bne.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e46:	f023 030f 	bic.w	r3, r3, #15
 8002e4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4e:	e009      	b.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e62:	e000      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	377c      	adds	r7, #124	; 0x7c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	50040000 	.word	0x50040000
 8002e80:	50040100 	.word	0x50040100
 8002e84:	50040300 	.word	0x50040300
 8002e88:	50040200 	.word	0x50040200

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff47 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff5c 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffb0 	bl	8002fac <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003066:	e17f      	b.n	8003368 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8171 	beq.w	8003362 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d005      	beq.n	8003098 <HAL_GPIO_Init+0x40>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d130      	bne.n	80030fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ce:	2201      	movs	r2, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 0201 	and.w	r2, r3, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b03      	cmp	r3, #3
 8003104:	d118      	bne.n	8003138 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800310c:	2201      	movs	r2, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	08db      	lsrs	r3, r3, #3
 8003122:	f003 0201 	and.w	r2, r3, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b03      	cmp	r3, #3
 8003142:	d017      	beq.n	8003174 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d123      	bne.n	80031c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	08da      	lsrs	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3208      	adds	r2, #8
 8003188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	08da      	lsrs	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3208      	adds	r2, #8
 80031c2:	6939      	ldr	r1, [r7, #16]
 80031c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80ac 	beq.w	8003362 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <HAL_GPIO_Init+0x330>)
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	4a5e      	ldr	r2, [pc, #376]	; (8003388 <HAL_GPIO_Init+0x330>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6613      	str	r3, [r2, #96]	; 0x60
 8003216:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <HAL_GPIO_Init+0x330>)
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003222:	4a5a      	ldr	r2, [pc, #360]	; (800338c <HAL_GPIO_Init+0x334>)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3302      	adds	r3, #2
 800322a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800324c:	d025      	beq.n	800329a <HAL_GPIO_Init+0x242>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4f      	ldr	r2, [pc, #316]	; (8003390 <HAL_GPIO_Init+0x338>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01f      	beq.n	8003296 <HAL_GPIO_Init+0x23e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4e      	ldr	r2, [pc, #312]	; (8003394 <HAL_GPIO_Init+0x33c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d019      	beq.n	8003292 <HAL_GPIO_Init+0x23a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <HAL_GPIO_Init+0x340>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0x236>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4c      	ldr	r2, [pc, #304]	; (800339c <HAL_GPIO_Init+0x344>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00d      	beq.n	800328a <HAL_GPIO_Init+0x232>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4b      	ldr	r2, [pc, #300]	; (80033a0 <HAL_GPIO_Init+0x348>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_GPIO_Init+0x22e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4a      	ldr	r2, [pc, #296]	; (80033a4 <HAL_GPIO_Init+0x34c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_GPIO_Init+0x22a>
 800327e:	2306      	movs	r3, #6
 8003280:	e00c      	b.n	800329c <HAL_GPIO_Init+0x244>
 8003282:	2307      	movs	r3, #7
 8003284:	e00a      	b.n	800329c <HAL_GPIO_Init+0x244>
 8003286:	2305      	movs	r3, #5
 8003288:	e008      	b.n	800329c <HAL_GPIO_Init+0x244>
 800328a:	2304      	movs	r3, #4
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x244>
 800328e:	2303      	movs	r3, #3
 8003290:	e004      	b.n	800329c <HAL_GPIO_Init+0x244>
 8003292:	2302      	movs	r3, #2
 8003294:	e002      	b.n	800329c <HAL_GPIO_Init+0x244>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_GPIO_Init+0x244>
 800329a:	2300      	movs	r3, #0
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	f002 0203 	and.w	r2, r2, #3
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	4093      	lsls	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ac:	4937      	ldr	r1, [pc, #220]	; (800338c <HAL_GPIO_Init+0x334>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_GPIO_Init+0x350>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032de:	4a32      	ldr	r2, [pc, #200]	; (80033a8 <HAL_GPIO_Init+0x350>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_GPIO_Init+0x350>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_GPIO_Init+0x350>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800330e:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <HAL_GPIO_Init+0x350>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_GPIO_Init+0x350>)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_GPIO_Init+0x350>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335c:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <HAL_GPIO_Init+0x350>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f ae78 	bne.w	8003068 <HAL_GPIO_Init+0x10>
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	48000400 	.word	0x48000400
 8003394:	48000800 	.word	0x48000800
 8003398:	48000c00 	.word	0x48000c00
 800339c:	48001000 	.word	0x48001000
 80033a0:	48001400 	.word	0x48001400
 80033a4:	48001800 	.word	0x48001800
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000

080033c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d6:	d130      	bne.n	800343a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e4:	d038      	beq.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2232      	movs	r2, #50	; 0x32
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800340c:	e002      	b.n	8003414 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b01      	subs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d102      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f2      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d110      	bne.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00f      	b.n	800345a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d007      	beq.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003450:	4a05      	ldr	r2, [pc, #20]	; (8003468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003456:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40007000 	.word	0x40007000
 800346c:	20000000 	.word	0x20000000
 8003470:	431bde83 	.word	0x431bde83

08003474 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e3ca      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b97      	ldr	r3, [pc, #604]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b94      	ldr	r3, [pc, #592]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80e4 	beq.w	8003670 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_RCC_OscConfig+0x4a>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b0c      	cmp	r3, #12
 80034b2:	f040 808b 	bne.w	80035cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 8087 	bne.w	80035cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e3a2      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <HAL_RCC_OscConfig+0x7c>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ee:	e005      	b.n	80034fc <HAL_RCC_OscConfig+0x88>
 80034f0:	4b7c      	ldr	r3, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d223      	bcs.n	8003548 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fd55 	bl	8003fb4 <RCC_SetFlashLatencyFromMSIRange>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e383      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800351a:	f043 0308 	orr.w	r3, r3, #8
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	496d      	ldr	r1, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003532:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	4968      	ldr	r1, [pc, #416]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e025      	b.n	8003594 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a65      	ldr	r2, [pc, #404]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800354e:	f043 0308 	orr.w	r3, r3, #8
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4960      	ldr	r1, [pc, #384]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	495b      	ldr	r1, [pc, #364]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fd15 	bl	8003fb4 <RCC_SetFlashLatencyFromMSIRange>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e343      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003594:	f000 fc4a 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b52      	ldr	r3, [pc, #328]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	4950      	ldr	r1, [pc, #320]	; (80036e8 <HAL_RCC_OscConfig+0x274>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	4a4e      	ldr	r2, [pc, #312]	; (80036ec <HAL_RCC_OscConfig+0x278>)
 80035b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035b4:	4b4e      	ldr	r3, [pc, #312]	; (80036f0 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe f827 	bl	800160c <HAL_InitTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d052      	beq.n	800366e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	e327      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d032      	beq.n	800363a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e0:	f7fe f864 	bl	80016ac <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e8:	f7fe f860 	bl	80016ac <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e310      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4931      	ldr	r1, [pc, #196]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003624:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	492c      	ldr	r1, [pc, #176]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	e01a      	b.n	8003670 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003646:	f7fe f831 	bl	80016ac <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364e:	f7fe f82d 	bl	80016ac <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e2dd      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x1da>
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d074      	beq.n	8003766 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x21a>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d10e      	bne.n	80036a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d064      	beq.n	8003764 <HAL_RCC_OscConfig+0x2f0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d160      	bne.n	8003764 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e2ba      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x24a>
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e026      	b.n	800370c <HAL_RCC_OscConfig+0x298>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c6:	d115      	bne.n	80036f4 <HAL_RCC_OscConfig+0x280>
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x298>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08008270 	.word	0x08008270
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000004 	.word	0x20000004
 80036f4:	4ba0      	ldr	r3, [pc, #640]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a9f      	ldr	r2, [pc, #636]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b9d      	ldr	r3, [pc, #628]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a9c      	ldr	r2, [pc, #624]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd ffca 	bl	80016ac <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd ffc6 	bl	80016ac <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e276      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372e:	4b92      	ldr	r3, [pc, #584]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x2a8>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd ffb6 	bl	80016ac <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fd ffb2 	bl	80016ac <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e262      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x2d0>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d060      	beq.n	8003834 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x310>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d119      	bne.n	80037b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d116      	bne.n	80037b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003784:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_OscConfig+0x328>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e23f      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	4973      	ldr	r1, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	e040      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d023      	beq.n	8003802 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ba:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fd ff71 	bl	80016ac <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fd ff6d 	bl	80016ac <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e21d      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	061b      	lsls	r3, r3, #24
 80037fa:	495f      	ldr	r1, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
 8003800:	e018      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fd ff4d 	bl	80016ac <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003816:	f7fd ff49 	bl	80016ac <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1f9      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03c      	beq.n	80038ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01c      	beq.n	8003882 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800384a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fd ff28 	bl	80016ac <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003860:	f7fd ff24 	bl	80016ac <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1d4      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ef      	beq.n	8003860 <HAL_RCC_OscConfig+0x3ec>
 8003880:	e01b      	b.n	80038ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003888:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fd ff0b 	bl	80016ac <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389a:	f7fd ff07 	bl	80016ac <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1b7      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ef      	bne.n	800389a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80a6 	beq.w	8003a14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038cc:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	4a26      	ldr	r2, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	; 0x58
 80038e4:	4b24      	ldr	r3, [pc, #144]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f0:	2301      	movs	r3, #1
 80038f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_OscConfig+0x508>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d118      	bne.n	8003932 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_OscConfig+0x508>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x508>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390c:	f7fd fece 	bl	80016ac <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fd feca 	bl	80016ac <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e17a      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCC_OscConfig+0x508>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d108      	bne.n	800394c <HAL_RCC_OscConfig+0x4d8>
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394a:	e029      	b.n	80039a0 <HAL_RCC_OscConfig+0x52c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d115      	bne.n	8003980 <HAL_RCC_OscConfig+0x50c>
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	4a07      	ldr	r2, [pc, #28]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a03      	ldr	r2, [pc, #12]	; (8003978 <HAL_RCC_OscConfig+0x504>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x52c>
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
 8003980:	4b9c      	ldr	r3, [pc, #624]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	4a9b      	ldr	r2, [pc, #620]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003990:	4b98      	ldr	r3, [pc, #608]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	4a97      	ldr	r2, [pc, #604]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d016      	beq.n	80039d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fe80 	bl	80016ac <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fe7c 	bl	80016ac <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e12a      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c6:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ed      	beq.n	80039b0 <HAL_RCC_OscConfig+0x53c>
 80039d4:	e015      	b.n	8003a02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd fe69 	bl	80016ac <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd fe65 	bl	80016ac <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e113      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f4:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1ed      	bne.n	80039de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a02:	7ffb      	ldrb	r3, [r7, #31]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a08:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	4a79      	ldr	r2, [pc, #484]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80fe 	beq.w	8003c1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	f040 80d0 	bne.w	8003bc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a28:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0203 	and.w	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d130      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	3b01      	subs	r3, #1
 8003a48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d127      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a68:	2a07      	cmp	r2, #7
 8003a6a:	bf14      	ite	ne
 8003a6c:	2201      	movne	r2, #1
 8003a6e:	2200      	moveq	r2, #0
 8003a70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d113      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d06e      	beq.n	8003b7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d069      	beq.n	8003b78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0ad      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4b      	ldr	r2, [pc, #300]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003acc:	f7fd fdee 	bl	80016ac <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fdea 	bl	80016ac <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e09a      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <HAL_RCC_OscConfig+0x784>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0112      	lsls	r2, r2, #4
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b0c:	0212      	lsls	r2, r2, #8
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b14:	0852      	lsrs	r2, r2, #1
 8003b16:	3a01      	subs	r2, #1
 8003b18:	0552      	lsls	r2, r2, #21
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b20:	0852      	lsrs	r2, r2, #1
 8003b22:	3a01      	subs	r2, #1
 8003b24:	0652      	lsls	r2, r2, #25
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b2c:	0912      	lsrs	r2, r2, #4
 8003b2e:	0452      	lsls	r2, r2, #17
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4930      	ldr	r1, [pc, #192]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b38:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a2d      	ldr	r2, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b50:	f7fd fdac 	bl	80016ac <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fd fda8 	bl	80016ac <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e058      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b76:	e050      	b.n	8003c1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e04f      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d148      	bne.n	8003c1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b94:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ba0:	f7fd fd84 	bl	80016ac <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fd fd80 	bl	80016ac <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e030      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x734>
 8003bc6:	e028      	b.n	8003c1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b0c      	cmp	r3, #12
 8003bcc:	d023      	beq.n	8003c16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <HAL_RCC_OscConfig+0x780>)
 8003bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fd fd67 	bl	80016ac <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be0:	e00c      	b.n	8003bfc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fd fd63 	bl	80016ac <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d905      	bls.n	8003bfc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e013      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_OscConfig+0x7b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ec      	bne.n	8003be2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x7b0>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4905      	ldr	r1, [pc, #20]	; (8003c24 <HAL_RCC_OscConfig+0x7b0>)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_OscConfig+0x7b4>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	60cb      	str	r3, [r1, #12]
 8003c14:	e001      	b.n	8003c1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	feeefffc 	.word	0xfeeefffc

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0e7      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d910      	bls.n	8003c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 0207 	bic.w	r2, r3, #7
 8003c56:	4970      	ldr	r1, [pc, #448]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b6e      	ldr	r3, [pc, #440]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0cf      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d010      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d908      	bls.n	8003c9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4960      	ldr	r1, [pc, #384]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04c      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb2:	4b5a      	ldr	r3, [pc, #360]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d121      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0a6      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d115      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e09a      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce2:	4b4e      	ldr	r3, [pc, #312]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e08e      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e086      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4943      	ldr	r1, [pc, #268]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fd fcca 	bl	80016ac <HAL_GetTick>
 8003d18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1c:	f7fd fcc6 	bl	80016ac <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e06e      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	4b3a      	ldr	r3, [pc, #232]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 020c 	and.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1eb      	bne.n	8003d1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d208      	bcs.n	8003d72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d60:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	492b      	ldr	r1, [pc, #172]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d210      	bcs.n	8003da2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 0207 	bic.w	r2, r3, #7
 8003d88:	4923      	ldr	r1, [pc, #140]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_RCC_ClockConfig+0x1ec>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e036      	b.n	8003e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4918      	ldr	r1, [pc, #96]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4910      	ldr	r1, [pc, #64]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de0:	f000 f824 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	490b      	ldr	r1, [pc, #44]	; (8003e20 <HAL_RCC_ClockConfig+0x1f4>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1fc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fc01 	bl	800160c <HAL_InitTick>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08008270 	.word	0x08008270
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000004 	.word	0x20000004

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x34>
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d121      	bne.n	8003e9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d11e      	bne.n	8003e9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e60:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e005      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e7c:	4b2d      	ldr	r3, [pc, #180]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e88:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10d      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d102      	bne.n	8003eaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	e004      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d134      	bne.n	8003f24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ed0:	e005      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ed4:	617b      	str	r3, [r7, #20]
      break;
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eda:	617b      	str	r3, [r7, #20]
      break;
 8003edc:	e002      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	617b      	str	r3, [r7, #20]
      break;
 8003ee2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	3301      	adds	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	0e5b      	lsrs	r3, r3, #25
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	3301      	adds	r3, #1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f24:	69bb      	ldr	r3, [r7, #24]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3724      	adds	r7, #36	; 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08008288 	.word	0x08008288
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	08008280 	.word	0x08008280

08003f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f8c:	f7ff ffda 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0adb      	lsrs	r3, r3, #11
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4904      	ldr	r1, [pc, #16]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	08008280 	.word	0x08008280

08003fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fcc:	f7ff f9ee 	bl	80033ac <HAL_PWREx_GetVoltageRange>
 8003fd0:	6178      	str	r0, [r7, #20]
 8003fd2:	e014      	b.n	8003ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	4a24      	ldr	r2, [pc, #144]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fde:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fec:	f7ff f9de 	bl	80033ac <HAL_PWREx_GetVoltageRange>
 8003ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	; (800406c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d10b      	bne.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d919      	bls.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2ba0      	cmp	r3, #160	; 0xa0
 8004010:	d902      	bls.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004012:	2302      	movs	r3, #2
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e013      	b.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004018:	2301      	movs	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e010      	b.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d902      	bls.n	800402a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004024:	2303      	movs	r3, #3
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e00a      	b.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b80      	cmp	r3, #128	; 0x80
 800402e:	d102      	bne.n	8004036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004030:	2302      	movs	r3, #2
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	e004      	b.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b70      	cmp	r3, #112	; 0x70
 800403a:	d101      	bne.n	8004040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800403c:	2301      	movs	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 0207 	bic.w	r2, r3, #7
 8004048:	4909      	ldr	r1, [pc, #36]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	40022000 	.word	0x40022000

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800407c:	2300      	movs	r3, #0
 800407e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004080:	2300      	movs	r3, #0
 8004082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408c:	2b00      	cmp	r3, #0
 800408e:	d041      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004098:	d02a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800409a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800409e:	d824      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040a4:	d008      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040aa:	d81e      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b4:	d010      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040b6:	e018      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b8:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a85      	ldr	r2, [pc, #532]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c4:	e015      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fabb 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3320      	adds	r3, #32
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fba6 	bl	8004830 <RCCEx_PLLSAI2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	74fb      	strb	r3, [r7, #19]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f8:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	4973      	ldr	r1, [pc, #460]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d041      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004128:	d02a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800412a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800412e:	d824      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004134:	d008      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413a:	d81e      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004144:	d010      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004146:	e018      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004154:	e015      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa73 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3320      	adds	r3, #32
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fb5e 	bl	8004830 <RCCEx_PLLSAI2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	74fb      	strb	r3, [r7, #19]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004188:	4b52      	ldr	r3, [pc, #328]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004196:	494f      	ldr	r1, [pc, #316]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800419e:	e001      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a0 	beq.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f4:	f7fd fa5a 	bl	80016ac <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fd fa56 	bl	80016ac <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	74fb      	strb	r3, [r7, #19]
        break;
 800420e:	e005      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d15c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004222:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d019      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fa15 	bl	80016ac <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	e00b      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fa11 	bl	80016ac <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	74fb      	strb	r3, [r7, #19]
            break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ec      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ca:	e009      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e0:	7c7b      	ldrb	r3, [r7, #17]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b9e      	ldr	r3, [pc, #632]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a9d      	ldr	r2, [pc, #628]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fe:	4b98      	ldr	r3, [pc, #608]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4994      	ldr	r1, [pc, #592]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004320:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 020c 	bic.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	498c      	ldr	r1, [pc, #560]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004342:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	4983      	ldr	r1, [pc, #524]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004364:	4b7e      	ldr	r3, [pc, #504]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	497b      	ldr	r1, [pc, #492]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	4972      	ldr	r1, [pc, #456]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a8:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	496a      	ldr	r1, [pc, #424]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	4961      	ldr	r1, [pc, #388]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ec:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440e:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	4950      	ldr	r1, [pc, #320]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	4948      	ldr	r1, [pc, #288]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004452:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	493f      	ldr	r1, [pc, #252]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d028      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
 80044a0:	e011      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044aa:	d10c      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8c8 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	491f      	ldr	r1, [pc, #124]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f0:	d106      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fc:	60d3      	str	r3, [r2, #12]
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f899 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e014      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800456c:	d10c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f867 	bl	8004648 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02f      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a2:	4928      	ldr	r1, [pc, #160]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f844 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	74bb      	strb	r3, [r7, #18]
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3320      	adds	r3, #32
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f925 	bl	8004830 <RCCEx_PLLSAI2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800463a:	7cbb      	ldrb	r3, [r7, #18]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000

08004648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004656:	4b75      	ldr	r3, [pc, #468]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004662:	4b72      	ldr	r3, [pc, #456]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d10d      	bne.n	800468e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
       ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800467a:	4b6c      	ldr	r3, [pc, #432]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
       ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d047      	beq.n	800471e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e044      	b.n	800471e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d018      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0x86>
 800469c:	2b03      	cmp	r3, #3
 800469e:	d825      	bhi.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d002      	beq.n	80046aa <RCCEx_PLLSAI1_Config+0x62>
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d009      	beq.n	80046bc <RCCEx_PLLSAI1_Config+0x74>
 80046a8:	e020      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046aa:	4b60      	ldr	r3, [pc, #384]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11d      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ba:	e01a      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046bc:	4b5b      	ldr	r3, [pc, #364]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d116      	bne.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046cc:	e013      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ce:	4b57      	ldr	r3, [pc, #348]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ea:	e006      	b.n	80046fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      break;
 80046f0:	e004      	b.n	80046fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f2:	bf00      	nop
 80046f4:	e002      	b.n	80046fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004702:	4b4a      	ldr	r3, [pc, #296]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	430b      	orrs	r3, r1
 8004718:	4944      	ldr	r1, [pc, #272]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d17d      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800472e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004730:	f7fc ffbc 	bl	80016ac <HAL_GetTick>
 8004734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004736:	e009      	b.n	800474c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004738:	f7fc ffb8 	bl	80016ac <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d902      	bls.n	800474c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	73fb      	strb	r3, [r7, #15]
        break;
 800474a:	e005      	b.n	8004758 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800474c:	4b37      	ldr	r3, [pc, #220]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ef      	bne.n	8004738 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d160      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d111      	bne.n	8004788 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004764:	4b31      	ldr	r3, [pc, #196]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6892      	ldr	r2, [r2, #8]
 8004774:	0211      	lsls	r1, r2, #8
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68d2      	ldr	r2, [r2, #12]
 800477a:	0912      	lsrs	r2, r2, #4
 800477c:	0452      	lsls	r2, r2, #17
 800477e:	430a      	orrs	r2, r1
 8004780:	492a      	ldr	r1, [pc, #168]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004782:	4313      	orrs	r3, r2
 8004784:	610b      	str	r3, [r1, #16]
 8004786:	e027      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d112      	bne.n	80047b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800478e:	4b27      	ldr	r3, [pc, #156]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004796:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6892      	ldr	r2, [r2, #8]
 800479e:	0211      	lsls	r1, r2, #8
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6912      	ldr	r2, [r2, #16]
 80047a4:	0852      	lsrs	r2, r2, #1
 80047a6:	3a01      	subs	r2, #1
 80047a8:	0552      	lsls	r2, r2, #21
 80047aa:	430a      	orrs	r2, r1
 80047ac:	491f      	ldr	r1, [pc, #124]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	610b      	str	r3, [r1, #16]
 80047b2:	e011      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	0211      	lsls	r1, r2, #8
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6952      	ldr	r2, [r2, #20]
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0652      	lsls	r2, r2, #25
 80047d0:	430a      	orrs	r2, r1
 80047d2:	4916      	ldr	r1, [pc, #88]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e4:	f7fc ff62 	bl	80016ac <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ea:	e009      	b.n	8004800 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ec:	f7fc ff5e 	bl	80016ac <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	73fb      	strb	r3, [r7, #15]
          break;
 80047fe:	e005      	b.n	800480c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004800:	4b0a      	ldr	r3, [pc, #40]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ef      	beq.n	80047ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4904      	ldr	r1, [pc, #16]	; (800482c <RCCEx_PLLSAI1_Config+0x1e4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000

08004830 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800483e:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800484a:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d10d      	bne.n	8004876 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
       ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004862:	4b61      	ldr	r3, [pc, #388]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	091b      	lsrs	r3, r3, #4
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
       ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d047      	beq.n	8004906 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e044      	b.n	8004906 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d018      	beq.n	80048b6 <RCCEx_PLLSAI2_Config+0x86>
 8004884:	2b03      	cmp	r3, #3
 8004886:	d825      	bhi.n	80048d4 <RCCEx_PLLSAI2_Config+0xa4>
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <RCCEx_PLLSAI2_Config+0x62>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d009      	beq.n	80048a4 <RCCEx_PLLSAI2_Config+0x74>
 8004890:	e020      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004892:	4b55      	ldr	r3, [pc, #340]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d11d      	bne.n	80048da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e01a      	b.n	80048da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d116      	bne.n	80048de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e013      	b.n	80048de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b6:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c2:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d2:	e006      	b.n	80048e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e004      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048da:	bf00      	nop
 80048dc:	e002      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80048e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6819      	ldr	r1, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	430b      	orrs	r3, r1
 8004900:	4939      	ldr	r1, [pc, #228]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d167      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800490c:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fc fec8 	bl	80016ac <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800491e:	e009      	b.n	8004934 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004920:	f7fc fec4 	bl	80016ac <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d902      	bls.n	8004934 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	73fb      	strb	r3, [r7, #15]
        break;
 8004932:	e005      	b.n	8004940 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ef      	bne.n	8004920 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d14a      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d111      	bne.n	8004970 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800494c:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	0211      	lsls	r1, r2, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	0912      	lsrs	r2, r2, #4
 8004964:	0452      	lsls	r2, r2, #17
 8004966:	430a      	orrs	r2, r1
 8004968:	491f      	ldr	r1, [pc, #124]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496a:	4313      	orrs	r3, r2
 800496c:	614b      	str	r3, [r1, #20]
 800496e:	e011      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	0211      	lsls	r1, r2, #8
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6912      	ldr	r2, [r2, #16]
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	3a01      	subs	r2, #1
 800498a:	0652      	lsls	r2, r2, #25
 800498c:	430a      	orrs	r2, r1
 800498e:	4916      	ldr	r1, [pc, #88]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fc fe84 	bl	80016ac <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a8:	f7fc fe80 	bl	80016ac <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	4904      	ldr	r1, [pc, #16]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000

080049ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e040      	b.n	8004a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fc5c 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb6a 	bl	800510c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f8af 	bl	8004b9c <UART_SetConfig>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e01b      	b.n	8004a80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fbe9 	bl	8005250 <UART_CheckIdleState>
 8004a7e:	4603      	mov	r3, r0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d178      	bne.n	8004b92 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Transmit+0x24>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e071      	b.n	8004b94 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2221      	movs	r2, #33	; 0x21
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004abe:	f7fc fdf5 	bl	80016ac <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88fa      	ldrh	r2, [r7, #6]
 8004ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d108      	bne.n	8004af0 <HAL_UART_Transmit+0x68>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e003      	b.n	8004af8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004af8:	e030      	b.n	8004b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2180      	movs	r1, #128	; 0x80
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fc4b 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e03c      	b.n	8004b94 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	3302      	adds	r3, #2
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e008      	b.n	8004b4a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	b292      	uxth	r2, r2
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1c8      	bne.n	8004afa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fc14 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e005      	b.n	8004b94 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b08a      	sub	sp, #40	; 0x28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4ba4      	ldr	r3, [pc, #656]	; (8004e5c <UART_SetConfig+0x2c0>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a99      	ldr	r2, [pc, #612]	; (8004e60 <UART_SetConfig+0x2c4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	4313      	orrs	r3, r2
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a90      	ldr	r2, [pc, #576]	; (8004e64 <UART_SetConfig+0x2c8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d126      	bne.n	8004c74 <UART_SetConfig+0xd8>
 8004c26:	4b90      	ldr	r3, [pc, #576]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d81b      	bhi.n	8004c6c <UART_SetConfig+0xd0>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0xa0>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5d 	.word	0x08004c5d
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c65 	.word	0x08004c65
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e116      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e112      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e10e      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e10a      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e106      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7c      	ldr	r2, [pc, #496]	; (8004e6c <UART_SetConfig+0x2d0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d138      	bne.n	8004cf0 <UART_SetConfig+0x154>
 8004c7e:	4b7a      	ldr	r3, [pc, #488]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b0c      	cmp	r3, #12
 8004c8a:	d82d      	bhi.n	8004ce8 <UART_SetConfig+0x14c>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <UART_SetConfig+0xf8>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cc9 	.word	0x08004cc9
 8004c98:	08004ce9 	.word	0x08004ce9
 8004c9c:	08004ce9 	.word	0x08004ce9
 8004ca0:	08004ce9 	.word	0x08004ce9
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004ce9 	.word	0x08004ce9
 8004cac:	08004ce9 	.word	0x08004ce9
 8004cb0:	08004ce9 	.word	0x08004ce9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	08004ce9 	.word	0x08004ce9
 8004cbc:	08004ce9 	.word	0x08004ce9
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e0d8      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e0d4      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e0d0      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e0cc      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e0c8      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5e      	ldr	r2, [pc, #376]	; (8004e70 <UART_SetConfig+0x2d4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d125      	bne.n	8004d46 <UART_SetConfig+0x1aa>
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d04:	2b30      	cmp	r3, #48	; 0x30
 8004d06:	d016      	beq.n	8004d36 <UART_SetConfig+0x19a>
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d818      	bhi.n	8004d3e <UART_SetConfig+0x1a2>
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d00a      	beq.n	8004d26 <UART_SetConfig+0x18a>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d814      	bhi.n	8004d3e <UART_SetConfig+0x1a2>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <UART_SetConfig+0x182>
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d008      	beq.n	8004d2e <UART_SetConfig+0x192>
 8004d1c:	e00f      	b.n	8004d3e <UART_SetConfig+0x1a2>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d24:	e0ad      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d26:	2302      	movs	r3, #2
 8004d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2c:	e0a9      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d34:	e0a5      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d36:	2308      	movs	r3, #8
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3c:	e0a1      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d3e:	2310      	movs	r3, #16
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e09d      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4a      	ldr	r2, [pc, #296]	; (8004e74 <UART_SetConfig+0x2d8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d125      	bne.n	8004d9c <UART_SetConfig+0x200>
 8004d50:	4b45      	ldr	r3, [pc, #276]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d5c:	d016      	beq.n	8004d8c <UART_SetConfig+0x1f0>
 8004d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d60:	d818      	bhi.n	8004d94 <UART_SetConfig+0x1f8>
 8004d62:	2b80      	cmp	r3, #128	; 0x80
 8004d64:	d00a      	beq.n	8004d7c <UART_SetConfig+0x1e0>
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d814      	bhi.n	8004d94 <UART_SetConfig+0x1f8>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <UART_SetConfig+0x1d8>
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d008      	beq.n	8004d84 <UART_SetConfig+0x1e8>
 8004d72:	e00f      	b.n	8004d94 <UART_SetConfig+0x1f8>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e082      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e07e      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e07a      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e076      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e072      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a35      	ldr	r2, [pc, #212]	; (8004e78 <UART_SetConfig+0x2dc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d12a      	bne.n	8004dfc <UART_SetConfig+0x260>
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db4:	d01a      	beq.n	8004dec <UART_SetConfig+0x250>
 8004db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dba:	d81b      	bhi.n	8004df4 <UART_SetConfig+0x258>
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc0:	d00c      	beq.n	8004ddc <UART_SetConfig+0x240>
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d815      	bhi.n	8004df4 <UART_SetConfig+0x258>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <UART_SetConfig+0x238>
 8004dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd0:	d008      	beq.n	8004de4 <UART_SetConfig+0x248>
 8004dd2:	e00f      	b.n	8004df4 <UART_SetConfig+0x258>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e052      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e04e      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e04a      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e046      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e042      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <UART_SetConfig+0x2c4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d13a      	bne.n	8004e7c <UART_SetConfig+0x2e0>
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <UART_SetConfig+0x2cc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e14:	d01a      	beq.n	8004e4c <UART_SetConfig+0x2b0>
 8004e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1a:	d81b      	bhi.n	8004e54 <UART_SetConfig+0x2b8>
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d00c      	beq.n	8004e3c <UART_SetConfig+0x2a0>
 8004e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e26:	d815      	bhi.n	8004e54 <UART_SetConfig+0x2b8>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <UART_SetConfig+0x298>
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x2a8>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x2b8>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e022      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e01e      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e01a      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e016      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e012      	b.n	8004e82 <UART_SetConfig+0x2e6>
 8004e5c:	efff69f3 	.word	0xefff69f3
 8004e60:	40008000 	.word	0x40008000
 8004e64:	40013800 	.word	0x40013800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40004400 	.word	0x40004400
 8004e70:	40004800 	.word	0x40004800
 8004e74:	40004c00 	.word	0x40004c00
 8004e78:	40005000 	.word	0x40005000
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a9f      	ldr	r2, [pc, #636]	; (8005104 <UART_SetConfig+0x568>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d17a      	bne.n	8004f82 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d824      	bhi.n	8004ede <UART_SetConfig+0x342>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x300>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004edf 	.word	0x08004edf
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004edf 	.word	0x08004edf
 8004eac:	08004ecf 	.word	0x08004ecf
 8004eb0:	08004edf 	.word	0x08004edf
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004edf 	.word	0x08004edf
 8004ebc:	08004ed7 	.word	0x08004ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec0:	f7ff f84c 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8004ec4:	61f8      	str	r0, [r7, #28]
        break;
 8004ec6:	e010      	b.n	8004eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec8:	4b8f      	ldr	r3, [pc, #572]	; (8005108 <UART_SetConfig+0x56c>)
 8004eca:	61fb      	str	r3, [r7, #28]
        break;
 8004ecc:	e00d      	b.n	8004eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ece:	f7fe ffad 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8004ed2:	61f8      	str	r0, [r7, #28]
        break;
 8004ed4:	e009      	b.n	8004eea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eda:	61fb      	str	r3, [r7, #28]
        break;
 8004edc:	e005      	b.n	8004eea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ee8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80fb 	beq.w	80050e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d305      	bcc.n	8004f0e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d903      	bls.n	8004f16 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f14:	e0e8      	b.n	80050e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	461c      	mov	r4, r3
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	022b      	lsls	r3, r5, #8
 8004f28:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f2c:	0222      	lsls	r2, r4, #8
 8004f2e:	68f9      	ldr	r1, [r7, #12]
 8004f30:	6849      	ldr	r1, [r1, #4]
 8004f32:	0849      	lsrs	r1, r1, #1
 8004f34:	2000      	movs	r0, #0
 8004f36:	4688      	mov	r8, r1
 8004f38:	4681      	mov	r9, r0
 8004f3a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f3e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f50:	4650      	mov	r0, sl
 8004f52:	4659      	mov	r1, fp
 8004f54:	f7fb fe28 	bl	8000ba8 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f66:	d308      	bcc.n	8004f7a <UART_SetConfig+0x3de>
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6e:	d204      	bcs.n	8004f7a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	e0b6      	b.n	80050e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f80:	e0b2      	b.n	80050e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d15e      	bne.n	800504a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d828      	bhi.n	8004fe6 <UART_SetConfig+0x44a>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x400>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe ffcc 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e014      	b.n	8004ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe ffde 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b4d      	ldr	r3, [pc, #308]	; (8005108 <UART_SetConfig+0x56c>)
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe ff29 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d077      	beq.n	80050e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005a      	lsls	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d916      	bls.n	8005042 <UART_SetConfig+0x4a6>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501a:	d212      	bcs.n	8005042 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f023 030f 	bic.w	r3, r3, #15
 8005024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	b29b      	uxth	r3, r3
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	b29a      	uxth	r2, r3
 8005032:	8afb      	ldrh	r3, [r7, #22]
 8005034:	4313      	orrs	r3, r2
 8005036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	8afa      	ldrh	r2, [r7, #22]
 800503e:	60da      	str	r2, [r3, #12]
 8005040:	e052      	b.n	80050e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005048:	e04e      	b.n	80050e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800504a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800504e:	2b08      	cmp	r3, #8
 8005050:	d827      	bhi.n	80050a2 <UART_SetConfig+0x506>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x4bc>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe ff6e 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e014      	b.n	80050ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe ff80 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8005088:	61f8      	str	r0, [r7, #28]
        break;
 800508a:	e010      	b.n	80050ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <UART_SetConfig+0x56c>)
 800508e:	61fb      	str	r3, [r7, #28]
        break;
 8005090:	e00d      	b.n	80050ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe fecb 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8005096:	61f8      	str	r0, [r7, #28]
        break;
 8005098:	e009      	b.n	80050ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61fb      	str	r3, [r7, #28]
        break;
 80050a0:	e005      	b.n	80050ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050ac:	bf00      	nop
    }

    if (pclk != 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d019      	beq.n	80050e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	085a      	lsrs	r2, r3, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d909      	bls.n	80050e2 <UART_SetConfig+0x546>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d205      	bcs.n	80050e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e002      	b.n	80050e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	; 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	40008000 	.word	0x40008000
 8005108:	00f42400 	.word	0x00f42400

0800510c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520a:	d10a      	bne.n	8005222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b098      	sub	sp, #96	; 0x60
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005260:	f7fc fa24 	bl	80016ac <HAL_GetTick>
 8005264:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d12e      	bne.n	80052d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f88c 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d021      	beq.n	80052d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a2:	653b      	str	r3, [r7, #80]	; 0x50
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
 80052ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e6      	bne.n	800528e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e062      	b.n	8005398 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d149      	bne.n	8005374 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f856 	bl	80053a0 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03c      	beq.n	8005374 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	623b      	str	r3, [r7, #32]
   return(result);
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	633b      	str	r3, [r7, #48]	; 0x30
 800531a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e6      	bne.n	80052fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	60fb      	str	r3, [r7, #12]
   return(result);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800534c:	61fa      	str	r2, [r7, #28]
 800534e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	69b9      	ldr	r1, [r7, #24]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	617b      	str	r3, [r7, #20]
   return(result);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e011      	b.n	8005398 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3758      	adds	r7, #88	; 0x58
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	4613      	mov	r3, r2
 80053ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b0:	e049      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d045      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fc f977 	bl	80016ac <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e048      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d031      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d110      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2208      	movs	r2, #8
 80053f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f838 	bl	800546e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2208      	movs	r2, #8
 8005402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e029      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005420:	d111      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f81e 	bl	800546e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e00f      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	429a      	cmp	r2, r3
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	429a      	cmp	r2, r3
 8005462:	d0a6      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800546e:	b480      	push	{r7}
 8005470:	b095      	sub	sp, #84	; 0x54
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	643b      	str	r3, [r7, #64]	; 0x40
 8005496:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800549a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800549c:	e841 2300 	strex	r3, r2, [r1]
 80054a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e6      	bne.n	8005476 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d118      	bne.n	8005516 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0310 	bic.w	r3, r3, #16
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	613b      	str	r3, [r7, #16]
   return(result);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e6      	bne.n	80054e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	669a      	str	r2, [r3, #104]	; 0x68
}
 800552a:	bf00      	nop
 800552c:	3754      	adds	r7, #84	; 0x54
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <__cvt>:
 8005536:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800553a:	ec55 4b10 	vmov	r4, r5, d0
 800553e:	2d00      	cmp	r5, #0
 8005540:	460e      	mov	r6, r1
 8005542:	4619      	mov	r1, r3
 8005544:	462b      	mov	r3, r5
 8005546:	bfbb      	ittet	lt
 8005548:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800554c:	461d      	movlt	r5, r3
 800554e:	2300      	movge	r3, #0
 8005550:	232d      	movlt	r3, #45	; 0x2d
 8005552:	700b      	strb	r3, [r1, #0]
 8005554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005556:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800555a:	4691      	mov	r9, r2
 800555c:	f023 0820 	bic.w	r8, r3, #32
 8005560:	bfbc      	itt	lt
 8005562:	4622      	movlt	r2, r4
 8005564:	4614      	movlt	r4, r2
 8005566:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800556a:	d005      	beq.n	8005578 <__cvt+0x42>
 800556c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005570:	d100      	bne.n	8005574 <__cvt+0x3e>
 8005572:	3601      	adds	r6, #1
 8005574:	2102      	movs	r1, #2
 8005576:	e000      	b.n	800557a <__cvt+0x44>
 8005578:	2103      	movs	r1, #3
 800557a:	ab03      	add	r3, sp, #12
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	ab02      	add	r3, sp, #8
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	ec45 4b10 	vmov	d0, r4, r5
 8005586:	4653      	mov	r3, sl
 8005588:	4632      	mov	r2, r6
 800558a:	f000 fe69 	bl	8006260 <_dtoa_r>
 800558e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005592:	4607      	mov	r7, r0
 8005594:	d102      	bne.n	800559c <__cvt+0x66>
 8005596:	f019 0f01 	tst.w	r9, #1
 800559a:	d022      	beq.n	80055e2 <__cvt+0xac>
 800559c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055a0:	eb07 0906 	add.w	r9, r7, r6
 80055a4:	d110      	bne.n	80055c8 <__cvt+0x92>
 80055a6:	783b      	ldrb	r3, [r7, #0]
 80055a8:	2b30      	cmp	r3, #48	; 0x30
 80055aa:	d10a      	bne.n	80055c2 <__cvt+0x8c>
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7fb fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80055b8:	b918      	cbnz	r0, 80055c2 <__cvt+0x8c>
 80055ba:	f1c6 0601 	rsb	r6, r6, #1
 80055be:	f8ca 6000 	str.w	r6, [sl]
 80055c2:	f8da 3000 	ldr.w	r3, [sl]
 80055c6:	4499      	add	r9, r3
 80055c8:	2200      	movs	r2, #0
 80055ca:	2300      	movs	r3, #0
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fb fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80055d4:	b108      	cbz	r0, 80055da <__cvt+0xa4>
 80055d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80055da:	2230      	movs	r2, #48	; 0x30
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	454b      	cmp	r3, r9
 80055e0:	d307      	bcc.n	80055f2 <__cvt+0xbc>
 80055e2:	9b03      	ldr	r3, [sp, #12]
 80055e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e6:	1bdb      	subs	r3, r3, r7
 80055e8:	4638      	mov	r0, r7
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	b004      	add	sp, #16
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	9103      	str	r1, [sp, #12]
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e7f0      	b.n	80055dc <__cvt+0xa6>

080055fa <__exponent>:
 80055fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fc:	4603      	mov	r3, r0
 80055fe:	2900      	cmp	r1, #0
 8005600:	bfb8      	it	lt
 8005602:	4249      	neglt	r1, r1
 8005604:	f803 2b02 	strb.w	r2, [r3], #2
 8005608:	bfb4      	ite	lt
 800560a:	222d      	movlt	r2, #45	; 0x2d
 800560c:	222b      	movge	r2, #43	; 0x2b
 800560e:	2909      	cmp	r1, #9
 8005610:	7042      	strb	r2, [r0, #1]
 8005612:	dd2a      	ble.n	800566a <__exponent+0x70>
 8005614:	f10d 0207 	add.w	r2, sp, #7
 8005618:	4617      	mov	r7, r2
 800561a:	260a      	movs	r6, #10
 800561c:	4694      	mov	ip, r2
 800561e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005622:	fb06 1415 	mls	r4, r6, r5, r1
 8005626:	3430      	adds	r4, #48	; 0x30
 8005628:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800562c:	460c      	mov	r4, r1
 800562e:	2c63      	cmp	r4, #99	; 0x63
 8005630:	f102 32ff 	add.w	r2, r2, #4294967295
 8005634:	4629      	mov	r1, r5
 8005636:	dcf1      	bgt.n	800561c <__exponent+0x22>
 8005638:	3130      	adds	r1, #48	; 0x30
 800563a:	f1ac 0402 	sub.w	r4, ip, #2
 800563e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005642:	1c41      	adds	r1, r0, #1
 8005644:	4622      	mov	r2, r4
 8005646:	42ba      	cmp	r2, r7
 8005648:	d30a      	bcc.n	8005660 <__exponent+0x66>
 800564a:	f10d 0209 	add.w	r2, sp, #9
 800564e:	eba2 020c 	sub.w	r2, r2, ip
 8005652:	42bc      	cmp	r4, r7
 8005654:	bf88      	it	hi
 8005656:	2200      	movhi	r2, #0
 8005658:	4413      	add	r3, r2
 800565a:	1a18      	subs	r0, r3, r0
 800565c:	b003      	add	sp, #12
 800565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005660:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005664:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005668:	e7ed      	b.n	8005646 <__exponent+0x4c>
 800566a:	2330      	movs	r3, #48	; 0x30
 800566c:	3130      	adds	r1, #48	; 0x30
 800566e:	7083      	strb	r3, [r0, #2]
 8005670:	70c1      	strb	r1, [r0, #3]
 8005672:	1d03      	adds	r3, r0, #4
 8005674:	e7f1      	b.n	800565a <__exponent+0x60>
	...

08005678 <_printf_float>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ed2d 8b02 	vpush	{d8}
 8005680:	b08d      	sub	sp, #52	; 0x34
 8005682:	460c      	mov	r4, r1
 8005684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005688:	4616      	mov	r6, r2
 800568a:	461f      	mov	r7, r3
 800568c:	4605      	mov	r5, r0
 800568e:	f000 fce7 	bl	8006060 <_localeconv_r>
 8005692:	f8d0 a000 	ldr.w	sl, [r0]
 8005696:	4650      	mov	r0, sl
 8005698:	f7fa fdea 	bl	8000270 <strlen>
 800569c:	2300      	movs	r3, #0
 800569e:	930a      	str	r3, [sp, #40]	; 0x28
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	9305      	str	r3, [sp, #20]
 80056a4:	f8d8 3000 	ldr.w	r3, [r8]
 80056a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056ac:	3307      	adds	r3, #7
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	f103 0208 	add.w	r2, r3, #8
 80056b6:	f8c8 2000 	str.w	r2, [r8]
 80056ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80056c8:	ee08 0a10 	vmov	s16, r0
 80056cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80056d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d4:	4b9e      	ldr	r3, [pc, #632]	; (8005950 <_printf_float+0x2d8>)
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	f7fb fa27 	bl	8000b2c <__aeabi_dcmpun>
 80056de:	bb88      	cbnz	r0, 8005744 <_printf_float+0xcc>
 80056e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e4:	4b9a      	ldr	r3, [pc, #616]	; (8005950 <_printf_float+0x2d8>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	f7fb fa01 	bl	8000af0 <__aeabi_dcmple>
 80056ee:	bb48      	cbnz	r0, 8005744 <_printf_float+0xcc>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4640      	mov	r0, r8
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fb f9f0 	bl	8000adc <__aeabi_dcmplt>
 80056fc:	b110      	cbz	r0, 8005704 <_printf_float+0x8c>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	4a93      	ldr	r2, [pc, #588]	; (8005954 <_printf_float+0x2dc>)
 8005706:	4b94      	ldr	r3, [pc, #592]	; (8005958 <_printf_float+0x2e0>)
 8005708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800570c:	bf94      	ite	ls
 800570e:	4690      	movls	r8, r2
 8005710:	4698      	movhi	r8, r3
 8005712:	2303      	movs	r3, #3
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	9b05      	ldr	r3, [sp, #20]
 8005718:	f023 0304 	bic.w	r3, r3, #4
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	f04f 0900 	mov.w	r9, #0
 8005722:	9700      	str	r7, [sp, #0]
 8005724:	4633      	mov	r3, r6
 8005726:	aa0b      	add	r2, sp, #44	; 0x2c
 8005728:	4621      	mov	r1, r4
 800572a:	4628      	mov	r0, r5
 800572c:	f000 f9da 	bl	8005ae4 <_printf_common>
 8005730:	3001      	adds	r0, #1
 8005732:	f040 8090 	bne.w	8005856 <_printf_float+0x1de>
 8005736:	f04f 30ff 	mov.w	r0, #4294967295
 800573a:	b00d      	add	sp, #52	; 0x34
 800573c:	ecbd 8b02 	vpop	{d8}
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fb f9ee 	bl	8000b2c <__aeabi_dcmpun>
 8005750:	b140      	cbz	r0, 8005764 <_printf_float+0xec>
 8005752:	464b      	mov	r3, r9
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfbc      	itt	lt
 8005758:	232d      	movlt	r3, #45	; 0x2d
 800575a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800575e:	4a7f      	ldr	r2, [pc, #508]	; (800595c <_printf_float+0x2e4>)
 8005760:	4b7f      	ldr	r3, [pc, #508]	; (8005960 <_printf_float+0x2e8>)
 8005762:	e7d1      	b.n	8005708 <_printf_float+0x90>
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800576a:	9206      	str	r2, [sp, #24]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	d13f      	bne.n	80057f0 <_printf_float+0x178>
 8005770:	2306      	movs	r3, #6
 8005772:	6063      	str	r3, [r4, #4]
 8005774:	9b05      	ldr	r3, [sp, #20]
 8005776:	6861      	ldr	r1, [r4, #4]
 8005778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	ab0a      	add	r3, sp, #40	; 0x28
 8005782:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005786:	ab09      	add	r3, sp, #36	; 0x24
 8005788:	ec49 8b10 	vmov	d0, r8, r9
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005794:	4628      	mov	r0, r5
 8005796:	f7ff fece 	bl	8005536 <__cvt>
 800579a:	9b06      	ldr	r3, [sp, #24]
 800579c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800579e:	2b47      	cmp	r3, #71	; 0x47
 80057a0:	4680      	mov	r8, r0
 80057a2:	d108      	bne.n	80057b6 <_printf_float+0x13e>
 80057a4:	1cc8      	adds	r0, r1, #3
 80057a6:	db02      	blt.n	80057ae <_printf_float+0x136>
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	4299      	cmp	r1, r3
 80057ac:	dd41      	ble.n	8005832 <_printf_float+0x1ba>
 80057ae:	f1ab 0302 	sub.w	r3, fp, #2
 80057b2:	fa5f fb83 	uxtb.w	fp, r3
 80057b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057ba:	d820      	bhi.n	80057fe <_printf_float+0x186>
 80057bc:	3901      	subs	r1, #1
 80057be:	465a      	mov	r2, fp
 80057c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057c4:	9109      	str	r1, [sp, #36]	; 0x24
 80057c6:	f7ff ff18 	bl	80055fa <__exponent>
 80057ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057cc:	1813      	adds	r3, r2, r0
 80057ce:	2a01      	cmp	r2, #1
 80057d0:	4681      	mov	r9, r0
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	dc02      	bgt.n	80057dc <_printf_float+0x164>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	07d2      	lsls	r2, r2, #31
 80057da:	d501      	bpl.n	80057e0 <_printf_float+0x168>
 80057dc:	3301      	adds	r3, #1
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d09c      	beq.n	8005722 <_printf_float+0xaa>
 80057e8:	232d      	movs	r3, #45	; 0x2d
 80057ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ee:	e798      	b.n	8005722 <_printf_float+0xaa>
 80057f0:	9a06      	ldr	r2, [sp, #24]
 80057f2:	2a47      	cmp	r2, #71	; 0x47
 80057f4:	d1be      	bne.n	8005774 <_printf_float+0xfc>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1bc      	bne.n	8005774 <_printf_float+0xfc>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7b9      	b.n	8005772 <_printf_float+0xfa>
 80057fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005802:	d118      	bne.n	8005836 <_printf_float+0x1be>
 8005804:	2900      	cmp	r1, #0
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	dd0b      	ble.n	8005822 <_printf_float+0x1aa>
 800580a:	6121      	str	r1, [r4, #16]
 800580c:	b913      	cbnz	r3, 8005814 <_printf_float+0x19c>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	d502      	bpl.n	800581a <_printf_float+0x1a2>
 8005814:	3301      	adds	r3, #1
 8005816:	440b      	add	r3, r1
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	65a1      	str	r1, [r4, #88]	; 0x58
 800581c:	f04f 0900 	mov.w	r9, #0
 8005820:	e7de      	b.n	80057e0 <_printf_float+0x168>
 8005822:	b913      	cbnz	r3, 800582a <_printf_float+0x1b2>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	07d2      	lsls	r2, r2, #31
 8005828:	d501      	bpl.n	800582e <_printf_float+0x1b6>
 800582a:	3302      	adds	r3, #2
 800582c:	e7f4      	b.n	8005818 <_printf_float+0x1a0>
 800582e:	2301      	movs	r3, #1
 8005830:	e7f2      	b.n	8005818 <_printf_float+0x1a0>
 8005832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	4299      	cmp	r1, r3
 800583a:	db05      	blt.n	8005848 <_printf_float+0x1d0>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	6121      	str	r1, [r4, #16]
 8005840:	07d8      	lsls	r0, r3, #31
 8005842:	d5ea      	bpl.n	800581a <_printf_float+0x1a2>
 8005844:	1c4b      	adds	r3, r1, #1
 8005846:	e7e7      	b.n	8005818 <_printf_float+0x1a0>
 8005848:	2900      	cmp	r1, #0
 800584a:	bfd4      	ite	le
 800584c:	f1c1 0202 	rsble	r2, r1, #2
 8005850:	2201      	movgt	r2, #1
 8005852:	4413      	add	r3, r2
 8005854:	e7e0      	b.n	8005818 <_printf_float+0x1a0>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	055a      	lsls	r2, r3, #21
 800585a:	d407      	bmi.n	800586c <_printf_float+0x1f4>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	4642      	mov	r2, r8
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	d12c      	bne.n	80058c4 <_printf_float+0x24c>
 800586a:	e764      	b.n	8005736 <_printf_float+0xbe>
 800586c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005870:	f240 80e0 	bls.w	8005a34 <_printf_float+0x3bc>
 8005874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	f7fb f924 	bl	8000ac8 <__aeabi_dcmpeq>
 8005880:	2800      	cmp	r0, #0
 8005882:	d034      	beq.n	80058ee <_printf_float+0x276>
 8005884:	4a37      	ldr	r2, [pc, #220]	; (8005964 <_printf_float+0x2ec>)
 8005886:	2301      	movs	r3, #1
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af51 	beq.w	8005736 <_printf_float+0xbe>
 8005894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005898:	429a      	cmp	r2, r3
 800589a:	db02      	blt.n	80058a2 <_printf_float+0x22a>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	07d8      	lsls	r0, r3, #31
 80058a0:	d510      	bpl.n	80058c4 <_printf_float+0x24c>
 80058a2:	ee18 3a10 	vmov	r3, s16
 80058a6:	4652      	mov	r2, sl
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f af41 	beq.w	8005736 <_printf_float+0xbe>
 80058b4:	f04f 0800 	mov.w	r8, #0
 80058b8:	f104 091a 	add.w	r9, r4, #26
 80058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	4543      	cmp	r3, r8
 80058c2:	dc09      	bgt.n	80058d8 <_printf_float+0x260>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	079b      	lsls	r3, r3, #30
 80058c8:	f100 8107 	bmi.w	8005ada <_printf_float+0x462>
 80058cc:	68e0      	ldr	r0, [r4, #12]
 80058ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d0:	4298      	cmp	r0, r3
 80058d2:	bfb8      	it	lt
 80058d4:	4618      	movlt	r0, r3
 80058d6:	e730      	b.n	800573a <_printf_float+0xc2>
 80058d8:	2301      	movs	r3, #1
 80058da:	464a      	mov	r2, r9
 80058dc:	4631      	mov	r1, r6
 80058de:	4628      	mov	r0, r5
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	f43f af27 	beq.w	8005736 <_printf_float+0xbe>
 80058e8:	f108 0801 	add.w	r8, r8, #1
 80058ec:	e7e6      	b.n	80058bc <_printf_float+0x244>
 80058ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc39      	bgt.n	8005968 <_printf_float+0x2f0>
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <_printf_float+0x2ec>)
 80058f6:	2301      	movs	r3, #1
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af19 	beq.w	8005736 <_printf_float+0xbe>
 8005904:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005908:	4313      	orrs	r3, r2
 800590a:	d102      	bne.n	8005912 <_printf_float+0x29a>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07d9      	lsls	r1, r3, #31
 8005910:	d5d8      	bpl.n	80058c4 <_printf_float+0x24c>
 8005912:	ee18 3a10 	vmov	r3, s16
 8005916:	4652      	mov	r2, sl
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f af09 	beq.w	8005736 <_printf_float+0xbe>
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	f104 0a1a 	add.w	sl, r4, #26
 800592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592e:	425b      	negs	r3, r3
 8005930:	454b      	cmp	r3, r9
 8005932:	dc01      	bgt.n	8005938 <_printf_float+0x2c0>
 8005934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005936:	e792      	b.n	800585e <_printf_float+0x1e6>
 8005938:	2301      	movs	r3, #1
 800593a:	4652      	mov	r2, sl
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f aef7 	beq.w	8005736 <_printf_float+0xbe>
 8005948:	f109 0901 	add.w	r9, r9, #1
 800594c:	e7ee      	b.n	800592c <_printf_float+0x2b4>
 800594e:	bf00      	nop
 8005950:	7fefffff 	.word	0x7fefffff
 8005954:	080082b8 	.word	0x080082b8
 8005958:	080082bc 	.word	0x080082bc
 800595c:	080082c0 	.word	0x080082c0
 8005960:	080082c4 	.word	0x080082c4
 8005964:	080082c8 	.word	0x080082c8
 8005968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800596a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800596c:	429a      	cmp	r2, r3
 800596e:	bfa8      	it	ge
 8005970:	461a      	movge	r2, r3
 8005972:	2a00      	cmp	r2, #0
 8005974:	4691      	mov	r9, r2
 8005976:	dc37      	bgt.n	80059e8 <_printf_float+0x370>
 8005978:	f04f 0b00 	mov.w	fp, #0
 800597c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005980:	f104 021a 	add.w	r2, r4, #26
 8005984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	eba3 0309 	sub.w	r3, r3, r9
 800598c:	455b      	cmp	r3, fp
 800598e:	dc33      	bgt.n	80059f8 <_printf_float+0x380>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	db3b      	blt.n	8005a10 <_printf_float+0x398>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07da      	lsls	r2, r3, #31
 800599c:	d438      	bmi.n	8005a10 <_printf_float+0x398>
 800599e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059a2:	eba2 0903 	sub.w	r9, r2, r3
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	1ad2      	subs	r2, r2, r3
 80059aa:	4591      	cmp	r9, r2
 80059ac:	bfa8      	it	ge
 80059ae:	4691      	movge	r9, r2
 80059b0:	f1b9 0f00 	cmp.w	r9, #0
 80059b4:	dc35      	bgt.n	8005a22 <_printf_float+0x3aa>
 80059b6:	f04f 0800 	mov.w	r8, #0
 80059ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059be:	f104 0a1a 	add.w	sl, r4, #26
 80059c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	eba3 0309 	sub.w	r3, r3, r9
 80059cc:	4543      	cmp	r3, r8
 80059ce:	f77f af79 	ble.w	80058c4 <_printf_float+0x24c>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4652      	mov	r2, sl
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f aeaa 	beq.w	8005736 <_printf_float+0xbe>
 80059e2:	f108 0801 	add.w	r8, r8, #1
 80059e6:	e7ec      	b.n	80059c2 <_printf_float+0x34a>
 80059e8:	4613      	mov	r3, r2
 80059ea:	4631      	mov	r1, r6
 80059ec:	4642      	mov	r2, r8
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	d1c0      	bne.n	8005978 <_printf_float+0x300>
 80059f6:	e69e      	b.n	8005736 <_printf_float+0xbe>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	9205      	str	r2, [sp, #20]
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f ae97 	beq.w	8005736 <_printf_float+0xbe>
 8005a08:	9a05      	ldr	r2, [sp, #20]
 8005a0a:	f10b 0b01 	add.w	fp, fp, #1
 8005a0e:	e7b9      	b.n	8005984 <_printf_float+0x30c>
 8005a10:	ee18 3a10 	vmov	r3, s16
 8005a14:	4652      	mov	r2, sl
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d1be      	bne.n	800599e <_printf_float+0x326>
 8005a20:	e689      	b.n	8005736 <_printf_float+0xbe>
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	464b      	mov	r3, r9
 8005a26:	4442      	add	r2, r8
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d1c1      	bne.n	80059b6 <_printf_float+0x33e>
 8005a32:	e680      	b.n	8005736 <_printf_float+0xbe>
 8005a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	dc01      	bgt.n	8005a3e <_printf_float+0x3c6>
 8005a3a:	07db      	lsls	r3, r3, #31
 8005a3c:	d53a      	bpl.n	8005ab4 <_printf_float+0x43c>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4642      	mov	r2, r8
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae74 	beq.w	8005736 <_printf_float+0xbe>
 8005a4e:	ee18 3a10 	vmov	r3, s16
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f ae6b 	beq.w	8005736 <_printf_float+0xbe>
 8005a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a6c:	f7fb f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a70:	b9d8      	cbnz	r0, 8005aaa <_printf_float+0x432>
 8005a72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a76:	f108 0201 	add.w	r2, r8, #1
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	d10e      	bne.n	8005aa2 <_printf_float+0x42a>
 8005a84:	e657      	b.n	8005736 <_printf_float+0xbe>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f ae50 	beq.w	8005736 <_printf_float+0xbe>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4543      	cmp	r3, r8
 8005aa0:	dcf1      	bgt.n	8005a86 <_printf_float+0x40e>
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa8:	e6da      	b.n	8005860 <_printf_float+0x1e8>
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	f104 0a1a 	add.w	sl, r4, #26
 8005ab2:	e7f2      	b.n	8005a9a <_printf_float+0x422>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	e7df      	b.n	8005a7a <_printf_float+0x402>
 8005aba:	2301      	movs	r3, #1
 8005abc:	464a      	mov	r2, r9
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f ae36 	beq.w	8005736 <_printf_float+0xbe>
 8005aca:	f108 0801 	add.w	r8, r8, #1
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ad2:	1a5b      	subs	r3, r3, r1
 8005ad4:	4543      	cmp	r3, r8
 8005ad6:	dcf0      	bgt.n	8005aba <_printf_float+0x442>
 8005ad8:	e6f8      	b.n	80058cc <_printf_float+0x254>
 8005ada:	f04f 0800 	mov.w	r8, #0
 8005ade:	f104 0919 	add.w	r9, r4, #25
 8005ae2:	e7f4      	b.n	8005ace <_printf_float+0x456>

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4616      	mov	r6, r2
 8005aea:	4699      	mov	r9, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b00:	4607      	mov	r7, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b10a      	cbz	r2, 8005b0a <_printf_common+0x26>
 8005b06:	3301      	adds	r3, #1
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	0699      	lsls	r1, r3, #26
 8005b0e:	bf42      	ittt	mi
 8005b10:	6833      	ldrmi	r3, [r6, #0]
 8005b12:	3302      	addmi	r3, #2
 8005b14:	6033      	strmi	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	f015 0506 	ands.w	r5, r5, #6
 8005b1c:	d106      	bne.n	8005b2c <_printf_common+0x48>
 8005b1e:	f104 0a19 	add.w	sl, r4, #25
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	6832      	ldr	r2, [r6, #0]
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc26      	bgt.n	8005b7a <_printf_common+0x96>
 8005b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b30:	1e13      	subs	r3, r2, #0
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	0692      	lsls	r2, r2, #26
 8005b3a:	d42b      	bmi.n	8005b94 <_printf_common+0xb0>
 8005b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d01e      	beq.n	8005b88 <_printf_common+0xa4>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	6922      	ldr	r2, [r4, #16]
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf02      	ittt	eq
 8005b56:	68e5      	ldreq	r5, [r4, #12]
 8005b58:	6833      	ldreq	r3, [r6, #0]
 8005b5a:	1aed      	subeq	r5, r5, r3
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	bf0c      	ite	eq
 8005b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b64:	2500      	movne	r5, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bfc4      	itt	gt
 8005b6a:	1a9b      	subgt	r3, r3, r2
 8005b6c:	18ed      	addgt	r5, r5, r3
 8005b6e:	2600      	movs	r6, #0
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xc8>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xa8>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xac>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c6      	b.n	8005b22 <_printf_common+0x3e>
 8005b94:	18e1      	adds	r1, r4, r3
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	2030      	movs	r0, #48	; 0x30
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9e:	4422      	add	r2, r4
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba8:	3302      	adds	r3, #2
 8005baa:	e7c7      	b.n	8005b3c <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa4>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x8e>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	7e0f      	ldrb	r7, [r1, #24]
 8005bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc8:	2f78      	cmp	r7, #120	; 0x78
 8005bca:	4691      	mov	r9, r2
 8005bcc:	4680      	mov	r8, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	; 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d4 	beq.w	8005d8a <_printf_i+0x1ca>
 8005be2:	2f58      	cmp	r7, #88	; 0x58
 8005be4:	f000 80c0 	beq.w	8005d68 <_printf_i+0x1a8>
 8005be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a101      	add	r1, pc, #4	; (adr r1, 8005c00 <_printf_i+0x40>)
 8005bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d71 	.word	0x08005d71
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005d2b 	.word	0x08005d2b
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d93 	.word	0x08005d93
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d33 	.word	0x08005d33
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	602a      	str	r2, [r5, #0]
 8005c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e09f      	b.n	8005dac <_printf_i+0x1ec>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	0607      	lsls	r7, r0, #24
 8005c72:	f103 0104 	add.w	r1, r3, #4
 8005c76:	6029      	str	r1, [r5, #0]
 8005c78:	d501      	bpl.n	8005c7e <_printf_i+0xbe>
 8005c7a:	681e      	ldr	r6, [r3, #0]
 8005c7c:	e003      	b.n	8005c86 <_printf_i+0xc6>
 8005c7e:	0646      	lsls	r6, r0, #25
 8005c80:	d5fb      	bpl.n	8005c7a <_printf_i+0xba>
 8005c82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	da03      	bge.n	8005c92 <_printf_i+0xd2>
 8005c8a:	232d      	movs	r3, #45	; 0x2d
 8005c8c:	4276      	negs	r6, r6
 8005c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c92:	485a      	ldr	r0, [pc, #360]	; (8005dfc <_printf_i+0x23c>)
 8005c94:	230a      	movs	r3, #10
 8005c96:	e012      	b.n	8005cbe <_printf_i+0xfe>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	6029      	str	r1, [r5, #0]
 8005ca0:	0605      	lsls	r5, r0, #24
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0xe8>
 8005ca4:	681e      	ldr	r6, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0xee>
 8005ca8:	0641      	lsls	r1, r0, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0xe4>
 8005cac:	881e      	ldrh	r6, [r3, #0]
 8005cae:	4853      	ldr	r0, [pc, #332]	; (8005dfc <_printf_i+0x23c>)
 8005cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2308      	moveq	r3, #8
 8005cb6:	230a      	movne	r3, #10
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cbe:	6865      	ldr	r5, [r4, #4]
 8005cc0:	60a5      	str	r5, [r4, #8]
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	bfa2      	ittt	ge
 8005cc6:	6821      	ldrge	r1, [r4, #0]
 8005cc8:	f021 0104 	bicge.w	r1, r1, #4
 8005ccc:	6021      	strge	r1, [r4, #0]
 8005cce:	b90e      	cbnz	r6, 8005cd4 <_printf_i+0x114>
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	d04b      	beq.n	8005d6c <_printf_i+0x1ac>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cda:	fb03 6711 	mls	r7, r3, r1, r6
 8005cde:	5dc7      	ldrb	r7, [r0, r7]
 8005ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ce4:	4637      	mov	r7, r6
 8005ce6:	42bb      	cmp	r3, r7
 8005ce8:	460e      	mov	r6, r1
 8005cea:	d9f4      	bls.n	8005cd6 <_printf_i+0x116>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d10b      	bne.n	8005d08 <_printf_i+0x148>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	07de      	lsls	r6, r3, #31
 8005cf4:	d508      	bpl.n	8005d08 <_printf_i+0x148>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	bfde      	ittt	le
 8005cfe:	2330      	movle	r3, #48	; 0x30
 8005d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d08:	1b52      	subs	r2, r2, r5
 8005d0a:	6122      	str	r2, [r4, #16]
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	464b      	mov	r3, r9
 8005d12:	aa03      	add	r2, sp, #12
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f7ff fee4 	bl	8005ae4 <_printf_common>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d14a      	bne.n	8005db6 <_printf_i+0x1f6>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	b004      	add	sp, #16
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	4833      	ldr	r0, [pc, #204]	; (8005e00 <_printf_i+0x240>)
 8005d34:	2778      	movs	r7, #120	; 0x78
 8005d36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6829      	ldr	r1, [r5, #0]
 8005d3e:	061f      	lsls	r7, r3, #24
 8005d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d44:	d402      	bmi.n	8005d4c <_printf_i+0x18c>
 8005d46:	065f      	lsls	r7, r3, #25
 8005d48:	bf48      	it	mi
 8005d4a:	b2b6      	uxthmi	r6, r6
 8005d4c:	07df      	lsls	r7, r3, #31
 8005d4e:	bf48      	it	mi
 8005d50:	f043 0320 	orrmi.w	r3, r3, #32
 8005d54:	6029      	str	r1, [r5, #0]
 8005d56:	bf48      	it	mi
 8005d58:	6023      	strmi	r3, [r4, #0]
 8005d5a:	b91e      	cbnz	r6, 8005d64 <_printf_i+0x1a4>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	2310      	movs	r3, #16
 8005d66:	e7a7      	b.n	8005cb8 <_printf_i+0xf8>
 8005d68:	4824      	ldr	r0, [pc, #144]	; (8005dfc <_printf_i+0x23c>)
 8005d6a:	e7e4      	b.n	8005d36 <_printf_i+0x176>
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	e7bd      	b.n	8005cec <_printf_i+0x12c>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	6826      	ldr	r6, [r4, #0]
 8005d74:	6961      	ldr	r1, [r4, #20]
 8005d76:	1d18      	adds	r0, r3, #4
 8005d78:	6028      	str	r0, [r5, #0]
 8005d7a:	0635      	lsls	r5, r6, #24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	d501      	bpl.n	8005d84 <_printf_i+0x1c4>
 8005d80:	6019      	str	r1, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <_printf_i+0x1ca>
 8005d84:	0670      	lsls	r0, r6, #25
 8005d86:	d5fb      	bpl.n	8005d80 <_printf_i+0x1c0>
 8005d88:	8019      	strh	r1, [r3, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	4615      	mov	r5, r2
 8005d90:	e7bc      	b.n	8005d0c <_printf_i+0x14c>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7fa fa16 	bl	80001d0 <memchr>
 8005da4:	b108      	cbz	r0, 8005daa <_printf_i+0x1ea>
 8005da6:	1b40      	subs	r0, r0, r5
 8005da8:	6060      	str	r0, [r4, #4]
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	e7aa      	b.n	8005d0c <_printf_i+0x14c>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	462a      	mov	r2, r5
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0ad      	beq.n	8005d20 <_printf_i+0x160>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	079b      	lsls	r3, r3, #30
 8005dc8:	d413      	bmi.n	8005df2 <_printf_i+0x232>
 8005dca:	68e0      	ldr	r0, [r4, #12]
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	4298      	cmp	r0, r3
 8005dd0:	bfb8      	it	lt
 8005dd2:	4618      	movlt	r0, r3
 8005dd4:	e7a6      	b.n	8005d24 <_printf_i+0x164>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4649      	mov	r1, r9
 8005ddc:	4640      	mov	r0, r8
 8005dde:	47d0      	blx	sl
 8005de0:	3001      	adds	r0, #1
 8005de2:	d09d      	beq.n	8005d20 <_printf_i+0x160>
 8005de4:	3501      	adds	r5, #1
 8005de6:	68e3      	ldr	r3, [r4, #12]
 8005de8:	9903      	ldr	r1, [sp, #12]
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dcf2      	bgt.n	8005dd6 <_printf_i+0x216>
 8005df0:	e7eb      	b.n	8005dca <_printf_i+0x20a>
 8005df2:	2500      	movs	r5, #0
 8005df4:	f104 0619 	add.w	r6, r4, #25
 8005df8:	e7f5      	b.n	8005de6 <_printf_i+0x226>
 8005dfa:	bf00      	nop
 8005dfc:	080082ca 	.word	0x080082ca
 8005e00:	080082db 	.word	0x080082db

08005e04 <std>:
 8005e04:	2300      	movs	r3, #0
 8005e06:	b510      	push	{r4, lr}
 8005e08:	4604      	mov	r4, r0
 8005e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e12:	6083      	str	r3, [r0, #8]
 8005e14:	8181      	strh	r1, [r0, #12]
 8005e16:	6643      	str	r3, [r0, #100]	; 0x64
 8005e18:	81c2      	strh	r2, [r0, #14]
 8005e1a:	6183      	str	r3, [r0, #24]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	2208      	movs	r2, #8
 8005e20:	305c      	adds	r0, #92	; 0x5c
 8005e22:	f000 f914 	bl	800604e <memset>
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <std+0x58>)
 8005e28:	6263      	str	r3, [r4, #36]	; 0x24
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <std+0x5c>)
 8005e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <std+0x60>)
 8005e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <std+0x64>)
 8005e34:	6323      	str	r3, [r4, #48]	; 0x30
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <std+0x68>)
 8005e38:	6224      	str	r4, [r4, #32]
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d006      	beq.n	8005e4c <std+0x48>
 8005e3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e42:	4294      	cmp	r4, r2
 8005e44:	d002      	beq.n	8005e4c <std+0x48>
 8005e46:	33d0      	adds	r3, #208	; 0xd0
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d105      	bne.n	8005e58 <std+0x54>
 8005e4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e54:	f000 b978 	b.w	8006148 <__retarget_lock_init_recursive>
 8005e58:	bd10      	pop	{r4, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08005fc9 	.word	0x08005fc9
 8005e60:	08005feb 	.word	0x08005feb
 8005e64:	08006023 	.word	0x08006023
 8005e68:	08006047 	.word	0x08006047
 8005e6c:	20000360 	.word	0x20000360

08005e70 <stdio_exit_handler>:
 8005e70:	4a02      	ldr	r2, [pc, #8]	; (8005e7c <stdio_exit_handler+0xc>)
 8005e72:	4903      	ldr	r1, [pc, #12]	; (8005e80 <stdio_exit_handler+0x10>)
 8005e74:	4803      	ldr	r0, [pc, #12]	; (8005e84 <stdio_exit_handler+0x14>)
 8005e76:	f000 b869 	b.w	8005f4c <_fwalk_sglue>
 8005e7a:	bf00      	nop
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	08007af9 	.word	0x08007af9
 8005e84:	20000018 	.word	0x20000018

08005e88 <cleanup_stdio>:
 8005e88:	6841      	ldr	r1, [r0, #4]
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <cleanup_stdio+0x34>)
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	4604      	mov	r4, r0
 8005e92:	d001      	beq.n	8005e98 <cleanup_stdio+0x10>
 8005e94:	f001 fe30 	bl	8007af8 <_fflush_r>
 8005e98:	68a1      	ldr	r1, [r4, #8]
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <cleanup_stdio+0x38>)
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	d002      	beq.n	8005ea6 <cleanup_stdio+0x1e>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f001 fe29 	bl	8007af8 <_fflush_r>
 8005ea6:	68e1      	ldr	r1, [r4, #12]
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <cleanup_stdio+0x3c>)
 8005eaa:	4299      	cmp	r1, r3
 8005eac:	d004      	beq.n	8005eb8 <cleanup_stdio+0x30>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb4:	f001 be20 	b.w	8007af8 <_fflush_r>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000360 	.word	0x20000360
 8005ec0:	200003c8 	.word	0x200003c8
 8005ec4:	20000430 	.word	0x20000430

08005ec8 <global_stdio_init.part.0>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <global_stdio_init.part.0+0x30>)
 8005ecc:	4c0b      	ldr	r4, [pc, #44]	; (8005efc <global_stdio_init.part.0+0x34>)
 8005ece:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <global_stdio_init.part.0+0x38>)
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2104      	movs	r1, #4
 8005ed8:	f7ff ff94 	bl	8005e04 <std>
 8005edc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	2109      	movs	r1, #9
 8005ee4:	f7ff ff8e 	bl	8005e04 <std>
 8005ee8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005eec:	2202      	movs	r2, #2
 8005eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef2:	2112      	movs	r1, #18
 8005ef4:	f7ff bf86 	b.w	8005e04 <std>
 8005ef8:	20000498 	.word	0x20000498
 8005efc:	20000360 	.word	0x20000360
 8005f00:	08005e71 	.word	0x08005e71

08005f04 <__sfp_lock_acquire>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__sfp_lock_acquire+0x8>)
 8005f06:	f000 b920 	b.w	800614a <__retarget_lock_acquire_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200004a1 	.word	0x200004a1

08005f10 <__sfp_lock_release>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__sfp_lock_release+0x8>)
 8005f12:	f000 b91b 	b.w	800614c <__retarget_lock_release_recursive>
 8005f16:	bf00      	nop
 8005f18:	200004a1 	.word	0x200004a1

08005f1c <__sinit>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f7ff fff0 	bl	8005f04 <__sfp_lock_acquire>
 8005f24:	6a23      	ldr	r3, [r4, #32]
 8005f26:	b11b      	cbz	r3, 8005f30 <__sinit+0x14>
 8005f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2c:	f7ff bff0 	b.w	8005f10 <__sfp_lock_release>
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__sinit+0x28>)
 8005f32:	6223      	str	r3, [r4, #32]
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <__sinit+0x2c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f5      	bne.n	8005f28 <__sinit+0xc>
 8005f3c:	f7ff ffc4 	bl	8005ec8 <global_stdio_init.part.0>
 8005f40:	e7f2      	b.n	8005f28 <__sinit+0xc>
 8005f42:	bf00      	nop
 8005f44:	08005e89 	.word	0x08005e89
 8005f48:	20000498 	.word	0x20000498

08005f4c <_fwalk_sglue>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4607      	mov	r7, r0
 8005f52:	4688      	mov	r8, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	2600      	movs	r6, #0
 8005f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f60:	d505      	bpl.n	8005f6e <_fwalk_sglue+0x22>
 8005f62:	6824      	ldr	r4, [r4, #0]
 8005f64:	2c00      	cmp	r4, #0
 8005f66:	d1f7      	bne.n	8005f58 <_fwalk_sglue+0xc>
 8005f68:	4630      	mov	r0, r6
 8005f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d907      	bls.n	8005f84 <_fwalk_sglue+0x38>
 8005f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	d003      	beq.n	8005f84 <_fwalk_sglue+0x38>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4638      	mov	r0, r7
 8005f80:	47c0      	blx	r8
 8005f82:	4306      	orrs	r6, r0
 8005f84:	3568      	adds	r5, #104	; 0x68
 8005f86:	e7e9      	b.n	8005f5c <_fwalk_sglue+0x10>

08005f88 <siprintf>:
 8005f88:	b40e      	push	{r1, r2, r3}
 8005f8a:	b500      	push	{lr}
 8005f8c:	b09c      	sub	sp, #112	; 0x70
 8005f8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f90:	9002      	str	r0, [sp, #8]
 8005f92:	9006      	str	r0, [sp, #24]
 8005f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f98:	4809      	ldr	r0, [pc, #36]	; (8005fc0 <siprintf+0x38>)
 8005f9a:	9107      	str	r1, [sp, #28]
 8005f9c:	9104      	str	r1, [sp, #16]
 8005f9e:	4909      	ldr	r1, [pc, #36]	; (8005fc4 <siprintf+0x3c>)
 8005fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa4:	9105      	str	r1, [sp, #20]
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	a902      	add	r1, sp, #8
 8005fac:	f001 fc20 	bl	80077f0 <_svfiprintf_r>
 8005fb0:	9b02      	ldr	r3, [sp, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	b01c      	add	sp, #112	; 0x70
 8005fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fbc:	b003      	add	sp, #12
 8005fbe:	4770      	bx	lr
 8005fc0:	20000064 	.word	0x20000064
 8005fc4:	ffff0208 	.word	0xffff0208

08005fc8 <__sread>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	460c      	mov	r4, r1
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	f000 f86c 	bl	80060ac <_read_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	bfab      	itete	ge
 8005fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fda:	89a3      	ldrhlt	r3, [r4, #12]
 8005fdc:	181b      	addge	r3, r3, r0
 8005fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fe2:	bfac      	ite	ge
 8005fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fe6:	81a3      	strhlt	r3, [r4, #12]
 8005fe8:	bd10      	pop	{r4, pc}

08005fea <__swrite>:
 8005fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	461f      	mov	r7, r3
 8005ff0:	898b      	ldrh	r3, [r1, #12]
 8005ff2:	05db      	lsls	r3, r3, #23
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4616      	mov	r6, r2
 8005ffa:	d505      	bpl.n	8006008 <__swrite+0x1e>
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	2302      	movs	r3, #2
 8006002:	2200      	movs	r2, #0
 8006004:	f000 f840 	bl	8006088 <_lseek_r>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800601e:	f000 b857 	b.w	80060d0 <_write_r>

08006022 <__sseek>:
 8006022:	b510      	push	{r4, lr}
 8006024:	460c      	mov	r4, r1
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 f82d 	bl	8006088 <_lseek_r>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	bf15      	itete	ne
 8006034:	6560      	strne	r0, [r4, #84]	; 0x54
 8006036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800603a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800603e:	81a3      	strheq	r3, [r4, #12]
 8006040:	bf18      	it	ne
 8006042:	81a3      	strhne	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__sclose>:
 8006046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800604a:	f000 b80d 	b.w	8006068 <_close_r>

0800604e <memset>:
 800604e:	4402      	add	r2, r0
 8006050:	4603      	mov	r3, r0
 8006052:	4293      	cmp	r3, r2
 8006054:	d100      	bne.n	8006058 <memset+0xa>
 8006056:	4770      	bx	lr
 8006058:	f803 1b01 	strb.w	r1, [r3], #1
 800605c:	e7f9      	b.n	8006052 <memset+0x4>
	...

08006060 <_localeconv_r>:
 8006060:	4800      	ldr	r0, [pc, #0]	; (8006064 <_localeconv_r+0x4>)
 8006062:	4770      	bx	lr
 8006064:	20000158 	.word	0x20000158

08006068 <_close_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4d06      	ldr	r5, [pc, #24]	; (8006084 <_close_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	f7fb fa0b 	bl	800148e <_close>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_close_r+0x1a>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_close_r+0x1a>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	2000049c 	.word	0x2000049c

08006088 <_lseek_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	; (80060a8 <_lseek_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fb fa20 	bl	80014dc <_lseek>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_lseek_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_lseek_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	2000049c 	.word	0x2000049c

080060ac <_read_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	; (80060cc <_read_r+0x20>)
 80060b0:	4604      	mov	r4, r0
 80060b2:	4608      	mov	r0, r1
 80060b4:	4611      	mov	r1, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fb f9ae 	bl	800141c <_read>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_read_r+0x1e>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_read_r+0x1e>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	2000049c 	.word	0x2000049c

080060d0 <_write_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_write_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fb f9b9 	bl	8001456 <_write>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_write_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_write_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	2000049c 	.word	0x2000049c

080060f4 <__errno>:
 80060f4:	4b01      	ldr	r3, [pc, #4]	; (80060fc <__errno+0x8>)
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000064 	.word	0x20000064

08006100 <__libc_init_array>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4d0d      	ldr	r5, [pc, #52]	; (8006138 <__libc_init_array+0x38>)
 8006104:	4c0d      	ldr	r4, [pc, #52]	; (800613c <__libc_init_array+0x3c>)
 8006106:	1b64      	subs	r4, r4, r5
 8006108:	10a4      	asrs	r4, r4, #2
 800610a:	2600      	movs	r6, #0
 800610c:	42a6      	cmp	r6, r4
 800610e:	d109      	bne.n	8006124 <__libc_init_array+0x24>
 8006110:	4d0b      	ldr	r5, [pc, #44]	; (8006140 <__libc_init_array+0x40>)
 8006112:	4c0c      	ldr	r4, [pc, #48]	; (8006144 <__libc_init_array+0x44>)
 8006114:	f002 f894 	bl	8008240 <_init>
 8006118:	1b64      	subs	r4, r4, r5
 800611a:	10a4      	asrs	r4, r4, #2
 800611c:	2600      	movs	r6, #0
 800611e:	42a6      	cmp	r6, r4
 8006120:	d105      	bne.n	800612e <__libc_init_array+0x2e>
 8006122:	bd70      	pop	{r4, r5, r6, pc}
 8006124:	f855 3b04 	ldr.w	r3, [r5], #4
 8006128:	4798      	blx	r3
 800612a:	3601      	adds	r6, #1
 800612c:	e7ee      	b.n	800610c <__libc_init_array+0xc>
 800612e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006132:	4798      	blx	r3
 8006134:	3601      	adds	r6, #1
 8006136:	e7f2      	b.n	800611e <__libc_init_array+0x1e>
 8006138:	08008634 	.word	0x08008634
 800613c:	08008634 	.word	0x08008634
 8006140:	08008634 	.word	0x08008634
 8006144:	08008638 	.word	0x08008638

08006148 <__retarget_lock_init_recursive>:
 8006148:	4770      	bx	lr

0800614a <__retarget_lock_acquire_recursive>:
 800614a:	4770      	bx	lr

0800614c <__retarget_lock_release_recursive>:
 800614c:	4770      	bx	lr

0800614e <quorem>:
 800614e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006152:	6903      	ldr	r3, [r0, #16]
 8006154:	690c      	ldr	r4, [r1, #16]
 8006156:	42a3      	cmp	r3, r4
 8006158:	4607      	mov	r7, r0
 800615a:	db7e      	blt.n	800625a <quorem+0x10c>
 800615c:	3c01      	subs	r4, #1
 800615e:	f101 0814 	add.w	r8, r1, #20
 8006162:	f100 0514 	add.w	r5, r0, #20
 8006166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006174:	3301      	adds	r3, #1
 8006176:	429a      	cmp	r2, r3
 8006178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800617c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006180:	fbb2 f6f3 	udiv	r6, r2, r3
 8006184:	d331      	bcc.n	80061ea <quorem+0x9c>
 8006186:	f04f 0e00 	mov.w	lr, #0
 800618a:	4640      	mov	r0, r8
 800618c:	46ac      	mov	ip, r5
 800618e:	46f2      	mov	sl, lr
 8006190:	f850 2b04 	ldr.w	r2, [r0], #4
 8006194:	b293      	uxth	r3, r2
 8006196:	fb06 e303 	mla	r3, r6, r3, lr
 800619a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800619e:	0c1a      	lsrs	r2, r3, #16
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ebaa 0303 	sub.w	r3, sl, r3
 80061a6:	f8dc a000 	ldr.w	sl, [ip]
 80061aa:	fa13 f38a 	uxtah	r3, r3, sl
 80061ae:	fb06 220e 	mla	r2, r6, lr, r2
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061ba:	b292      	uxth	r2, r2
 80061bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80061c8:	4581      	cmp	r9, r0
 80061ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ce:	f84c 3b04 	str.w	r3, [ip], #4
 80061d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061d6:	d2db      	bcs.n	8006190 <quorem+0x42>
 80061d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80061dc:	b92b      	cbnz	r3, 80061ea <quorem+0x9c>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	429d      	cmp	r5, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	d32c      	bcc.n	8006242 <quorem+0xf4>
 80061e8:	613c      	str	r4, [r7, #16]
 80061ea:	4638      	mov	r0, r7
 80061ec:	f001 f9a6 	bl	800753c <__mcmp>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	db22      	blt.n	800623a <quorem+0xec>
 80061f4:	3601      	adds	r6, #1
 80061f6:	4629      	mov	r1, r5
 80061f8:	2000      	movs	r0, #0
 80061fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80061fe:	f8d1 c000 	ldr.w	ip, [r1]
 8006202:	b293      	uxth	r3, r2
 8006204:	1ac3      	subs	r3, r0, r3
 8006206:	0c12      	lsrs	r2, r2, #16
 8006208:	fa13 f38c 	uxtah	r3, r3, ip
 800620c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621a:	45c1      	cmp	r9, r8
 800621c:	f841 3b04 	str.w	r3, [r1], #4
 8006220:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006224:	d2e9      	bcs.n	80061fa <quorem+0xac>
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	b922      	cbnz	r2, 800623a <quorem+0xec>
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d30a      	bcc.n	800624e <quorem+0x100>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4630      	mov	r0, r6
 800623c:	b003      	add	sp, #12
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	3b04      	subs	r3, #4
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1ce      	bne.n	80061e8 <quorem+0x9a>
 800624a:	3c01      	subs	r4, #1
 800624c:	e7c9      	b.n	80061e2 <quorem+0x94>
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	3b04      	subs	r3, #4
 8006252:	2a00      	cmp	r2, #0
 8006254:	d1f0      	bne.n	8006238 <quorem+0xea>
 8006256:	3c01      	subs	r4, #1
 8006258:	e7eb      	b.n	8006232 <quorem+0xe4>
 800625a:	2000      	movs	r0, #0
 800625c:	e7ee      	b.n	800623c <quorem+0xee>
	...

08006260 <_dtoa_r>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	ed2d 8b04 	vpush	{d8-d9}
 8006268:	69c5      	ldr	r5, [r0, #28]
 800626a:	b093      	sub	sp, #76	; 0x4c
 800626c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006270:	ec57 6b10 	vmov	r6, r7, d0
 8006274:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006278:	9107      	str	r1, [sp, #28]
 800627a:	4604      	mov	r4, r0
 800627c:	920a      	str	r2, [sp, #40]	; 0x28
 800627e:	930d      	str	r3, [sp, #52]	; 0x34
 8006280:	b975      	cbnz	r5, 80062a0 <_dtoa_r+0x40>
 8006282:	2010      	movs	r0, #16
 8006284:	f000 fe2a 	bl	8006edc <malloc>
 8006288:	4602      	mov	r2, r0
 800628a:	61e0      	str	r0, [r4, #28]
 800628c:	b920      	cbnz	r0, 8006298 <_dtoa_r+0x38>
 800628e:	4bae      	ldr	r3, [pc, #696]	; (8006548 <_dtoa_r+0x2e8>)
 8006290:	21ef      	movs	r1, #239	; 0xef
 8006292:	48ae      	ldr	r0, [pc, #696]	; (800654c <_dtoa_r+0x2ec>)
 8006294:	f001 fc90 	bl	8007bb8 <__assert_func>
 8006298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800629c:	6005      	str	r5, [r0, #0]
 800629e:	60c5      	str	r5, [r0, #12]
 80062a0:	69e3      	ldr	r3, [r4, #28]
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	b151      	cbz	r1, 80062bc <_dtoa_r+0x5c>
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	604a      	str	r2, [r1, #4]
 80062aa:	2301      	movs	r3, #1
 80062ac:	4093      	lsls	r3, r2
 80062ae:	608b      	str	r3, [r1, #8]
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 ff07 	bl	80070c4 <_Bfree>
 80062b6:	69e3      	ldr	r3, [r4, #28]
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	1e3b      	subs	r3, r7, #0
 80062be:	bfbb      	ittet	lt
 80062c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	9303      	strlt	r3, [sp, #12]
 80062c6:	2300      	movge	r3, #0
 80062c8:	2201      	movlt	r2, #1
 80062ca:	bfac      	ite	ge
 80062cc:	f8c8 3000 	strge.w	r3, [r8]
 80062d0:	f8c8 2000 	strlt.w	r2, [r8]
 80062d4:	4b9e      	ldr	r3, [pc, #632]	; (8006550 <_dtoa_r+0x2f0>)
 80062d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80062da:	ea33 0308 	bics.w	r3, r3, r8
 80062de:	d11b      	bne.n	8006318 <_dtoa_r+0xb8>
 80062e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80062ec:	4333      	orrs	r3, r6
 80062ee:	f000 8593 	beq.w	8006e18 <_dtoa_r+0xbb8>
 80062f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f4:	b963      	cbnz	r3, 8006310 <_dtoa_r+0xb0>
 80062f6:	4b97      	ldr	r3, [pc, #604]	; (8006554 <_dtoa_r+0x2f4>)
 80062f8:	e027      	b.n	800634a <_dtoa_r+0xea>
 80062fa:	4b97      	ldr	r3, [pc, #604]	; (8006558 <_dtoa_r+0x2f8>)
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	9800      	ldr	r0, [sp, #0]
 8006306:	b013      	add	sp, #76	; 0x4c
 8006308:	ecbd 8b04 	vpop	{d8-d9}
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	4b90      	ldr	r3, [pc, #576]	; (8006554 <_dtoa_r+0x2f4>)
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	3303      	adds	r3, #3
 8006316:	e7f3      	b.n	8006300 <_dtoa_r+0xa0>
 8006318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	ec51 0b17 	vmov	r0, r1, d7
 8006322:	eeb0 8a47 	vmov.f32	s16, s14
 8006326:	eef0 8a67 	vmov.f32	s17, s15
 800632a:	2300      	movs	r3, #0
 800632c:	f7fa fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006330:	4681      	mov	r9, r0
 8006332:	b160      	cbz	r0, 800634e <_dtoa_r+0xee>
 8006334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006336:	2301      	movs	r3, #1
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8568 	beq.w	8006e12 <_dtoa_r+0xbb2>
 8006342:	4b86      	ldr	r3, [pc, #536]	; (800655c <_dtoa_r+0x2fc>)
 8006344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	e7da      	b.n	8006304 <_dtoa_r+0xa4>
 800634e:	aa10      	add	r2, sp, #64	; 0x40
 8006350:	a911      	add	r1, sp, #68	; 0x44
 8006352:	4620      	mov	r0, r4
 8006354:	eeb0 0a48 	vmov.f32	s0, s16
 8006358:	eef0 0a68 	vmov.f32	s1, s17
 800635c:	f001 f994 	bl	8007688 <__d2b>
 8006360:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006364:	4682      	mov	sl, r0
 8006366:	2d00      	cmp	r5, #0
 8006368:	d07f      	beq.n	800646a <_dtoa_r+0x20a>
 800636a:	ee18 3a90 	vmov	r3, s17
 800636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006372:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006376:	ec51 0b18 	vmov	r0, r1, d8
 800637a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800637e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006382:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006386:	4619      	mov	r1, r3
 8006388:	2200      	movs	r2, #0
 800638a:	4b75      	ldr	r3, [pc, #468]	; (8006560 <_dtoa_r+0x300>)
 800638c:	f7f9 ff7c 	bl	8000288 <__aeabi_dsub>
 8006390:	a367      	add	r3, pc, #412	; (adr r3, 8006530 <_dtoa_r+0x2d0>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	a367      	add	r3, pc, #412	; (adr r3, 8006538 <_dtoa_r+0x2d8>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7f9 ff74 	bl	800028c <__adddf3>
 80063a4:	4606      	mov	r6, r0
 80063a6:	4628      	mov	r0, r5
 80063a8:	460f      	mov	r7, r1
 80063aa:	f7fa f8bb 	bl	8000524 <__aeabi_i2d>
 80063ae:	a364      	add	r3, pc, #400	; (adr r3, 8006540 <_dtoa_r+0x2e0>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7f9 ff64 	bl	800028c <__adddf3>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	f7fa fbc6 	bl	8000b58 <__aeabi_d2iz>
 80063cc:	2200      	movs	r2, #0
 80063ce:	4683      	mov	fp, r0
 80063d0:	2300      	movs	r3, #0
 80063d2:	4630      	mov	r0, r6
 80063d4:	4639      	mov	r1, r7
 80063d6:	f7fa fb81 	bl	8000adc <__aeabi_dcmplt>
 80063da:	b148      	cbz	r0, 80063f0 <_dtoa_r+0x190>
 80063dc:	4658      	mov	r0, fp
 80063de:	f7fa f8a1 	bl	8000524 <__aeabi_i2d>
 80063e2:	4632      	mov	r2, r6
 80063e4:	463b      	mov	r3, r7
 80063e6:	f7fa fb6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ea:	b908      	cbnz	r0, 80063f0 <_dtoa_r+0x190>
 80063ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063f0:	f1bb 0f16 	cmp.w	fp, #22
 80063f4:	d857      	bhi.n	80064a6 <_dtoa_r+0x246>
 80063f6:	4b5b      	ldr	r3, [pc, #364]	; (8006564 <_dtoa_r+0x304>)
 80063f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	ec51 0b18 	vmov	r0, r1, d8
 8006404:	f7fa fb6a 	bl	8000adc <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	d04e      	beq.n	80064aa <_dtoa_r+0x24a>
 800640c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006410:	2300      	movs	r3, #0
 8006412:	930c      	str	r3, [sp, #48]	; 0x30
 8006414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006416:	1b5b      	subs	r3, r3, r5
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	bf45      	ittet	mi
 800641c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006420:	9305      	strmi	r3, [sp, #20]
 8006422:	2300      	movpl	r3, #0
 8006424:	2300      	movmi	r3, #0
 8006426:	9206      	str	r2, [sp, #24]
 8006428:	bf54      	ite	pl
 800642a:	9305      	strpl	r3, [sp, #20]
 800642c:	9306      	strmi	r3, [sp, #24]
 800642e:	f1bb 0f00 	cmp.w	fp, #0
 8006432:	db3c      	blt.n	80064ae <_dtoa_r+0x24e>
 8006434:	9b06      	ldr	r3, [sp, #24]
 8006436:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800643a:	445b      	add	r3, fp
 800643c:	9306      	str	r3, [sp, #24]
 800643e:	2300      	movs	r3, #0
 8006440:	9308      	str	r3, [sp, #32]
 8006442:	9b07      	ldr	r3, [sp, #28]
 8006444:	2b09      	cmp	r3, #9
 8006446:	d868      	bhi.n	800651a <_dtoa_r+0x2ba>
 8006448:	2b05      	cmp	r3, #5
 800644a:	bfc4      	itt	gt
 800644c:	3b04      	subgt	r3, #4
 800644e:	9307      	strgt	r3, [sp, #28]
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	f1a3 0302 	sub.w	r3, r3, #2
 8006456:	bfcc      	ite	gt
 8006458:	2500      	movgt	r5, #0
 800645a:	2501      	movle	r5, #1
 800645c:	2b03      	cmp	r3, #3
 800645e:	f200 8085 	bhi.w	800656c <_dtoa_r+0x30c>
 8006462:	e8df f003 	tbb	[pc, r3]
 8006466:	3b2e      	.short	0x3b2e
 8006468:	5839      	.short	0x5839
 800646a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800646e:	441d      	add	r5, r3
 8006470:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006474:	2b20      	cmp	r3, #32
 8006476:	bfc1      	itttt	gt
 8006478:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800647c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006480:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006484:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006488:	bfd6      	itet	le
 800648a:	f1c3 0320 	rsble	r3, r3, #32
 800648e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006492:	fa06 f003 	lslle.w	r0, r6, r3
 8006496:	f7fa f835 	bl	8000504 <__aeabi_ui2d>
 800649a:	2201      	movs	r2, #1
 800649c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80064a0:	3d01      	subs	r5, #1
 80064a2:	920e      	str	r2, [sp, #56]	; 0x38
 80064a4:	e76f      	b.n	8006386 <_dtoa_r+0x126>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e7b3      	b.n	8006412 <_dtoa_r+0x1b2>
 80064aa:	900c      	str	r0, [sp, #48]	; 0x30
 80064ac:	e7b2      	b.n	8006414 <_dtoa_r+0x1b4>
 80064ae:	9b05      	ldr	r3, [sp, #20]
 80064b0:	eba3 030b 	sub.w	r3, r3, fp
 80064b4:	9305      	str	r3, [sp, #20]
 80064b6:	f1cb 0300 	rsb	r3, fp, #0
 80064ba:	9308      	str	r3, [sp, #32]
 80064bc:	2300      	movs	r3, #0
 80064be:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c0:	e7bf      	b.n	8006442 <_dtoa_r+0x1e2>
 80064c2:	2300      	movs	r3, #0
 80064c4:	9309      	str	r3, [sp, #36]	; 0x24
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dc52      	bgt.n	8006572 <_dtoa_r+0x312>
 80064cc:	2301      	movs	r3, #1
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	461a      	mov	r2, r3
 80064d4:	920a      	str	r2, [sp, #40]	; 0x28
 80064d6:	e00b      	b.n	80064f0 <_dtoa_r+0x290>
 80064d8:	2301      	movs	r3, #1
 80064da:	e7f3      	b.n	80064c4 <_dtoa_r+0x264>
 80064dc:	2300      	movs	r3, #0
 80064de:	9309      	str	r3, [sp, #36]	; 0x24
 80064e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e2:	445b      	add	r3, fp
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	3301      	adds	r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	bfb8      	it	lt
 80064ee:	2301      	movlt	r3, #1
 80064f0:	69e0      	ldr	r0, [r4, #28]
 80064f2:	2100      	movs	r1, #0
 80064f4:	2204      	movs	r2, #4
 80064f6:	f102 0614 	add.w	r6, r2, #20
 80064fa:	429e      	cmp	r6, r3
 80064fc:	d93d      	bls.n	800657a <_dtoa_r+0x31a>
 80064fe:	6041      	str	r1, [r0, #4]
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fd9f 	bl	8007044 <_Balloc>
 8006506:	9000      	str	r0, [sp, #0]
 8006508:	2800      	cmp	r0, #0
 800650a:	d139      	bne.n	8006580 <_dtoa_r+0x320>
 800650c:	4b16      	ldr	r3, [pc, #88]	; (8006568 <_dtoa_r+0x308>)
 800650e:	4602      	mov	r2, r0
 8006510:	f240 11af 	movw	r1, #431	; 0x1af
 8006514:	e6bd      	b.n	8006292 <_dtoa_r+0x32>
 8006516:	2301      	movs	r3, #1
 8006518:	e7e1      	b.n	80064de <_dtoa_r+0x27e>
 800651a:	2501      	movs	r5, #1
 800651c:	2300      	movs	r3, #0
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	9509      	str	r5, [sp, #36]	; 0x24
 8006522:	f04f 33ff 	mov.w	r3, #4294967295
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	2200      	movs	r2, #0
 800652c:	2312      	movs	r3, #18
 800652e:	e7d1      	b.n	80064d4 <_dtoa_r+0x274>
 8006530:	636f4361 	.word	0x636f4361
 8006534:	3fd287a7 	.word	0x3fd287a7
 8006538:	8b60c8b3 	.word	0x8b60c8b3
 800653c:	3fc68a28 	.word	0x3fc68a28
 8006540:	509f79fb 	.word	0x509f79fb
 8006544:	3fd34413 	.word	0x3fd34413
 8006548:	080082f9 	.word	0x080082f9
 800654c:	08008310 	.word	0x08008310
 8006550:	7ff00000 	.word	0x7ff00000
 8006554:	080082f5 	.word	0x080082f5
 8006558:	080082ec 	.word	0x080082ec
 800655c:	080082c9 	.word	0x080082c9
 8006560:	3ff80000 	.word	0x3ff80000
 8006564:	08008400 	.word	0x08008400
 8006568:	08008368 	.word	0x08008368
 800656c:	2301      	movs	r3, #1
 800656e:	9309      	str	r3, [sp, #36]	; 0x24
 8006570:	e7d7      	b.n	8006522 <_dtoa_r+0x2c2>
 8006572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	e7ba      	b.n	80064f0 <_dtoa_r+0x290>
 800657a:	3101      	adds	r1, #1
 800657c:	0052      	lsls	r2, r2, #1
 800657e:	e7ba      	b.n	80064f6 <_dtoa_r+0x296>
 8006580:	69e3      	ldr	r3, [r4, #28]
 8006582:	9a00      	ldr	r2, [sp, #0]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	2b0e      	cmp	r3, #14
 800658a:	f200 80a8 	bhi.w	80066de <_dtoa_r+0x47e>
 800658e:	2d00      	cmp	r5, #0
 8006590:	f000 80a5 	beq.w	80066de <_dtoa_r+0x47e>
 8006594:	f1bb 0f00 	cmp.w	fp, #0
 8006598:	dd38      	ble.n	800660c <_dtoa_r+0x3ac>
 800659a:	4bc0      	ldr	r3, [pc, #768]	; (800689c <_dtoa_r+0x63c>)
 800659c:	f00b 020f 	and.w	r2, fp, #15
 80065a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80065b0:	d019      	beq.n	80065e6 <_dtoa_r+0x386>
 80065b2:	4bbb      	ldr	r3, [pc, #748]	; (80068a0 <_dtoa_r+0x640>)
 80065b4:	ec51 0b18 	vmov	r0, r1, d8
 80065b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065bc:	f7fa f946 	bl	800084c <__aeabi_ddiv>
 80065c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c4:	f008 080f 	and.w	r8, r8, #15
 80065c8:	2503      	movs	r5, #3
 80065ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80068a0 <_dtoa_r+0x640>
 80065ce:	f1b8 0f00 	cmp.w	r8, #0
 80065d2:	d10a      	bne.n	80065ea <_dtoa_r+0x38a>
 80065d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d8:	4632      	mov	r2, r6
 80065da:	463b      	mov	r3, r7
 80065dc:	f7fa f936 	bl	800084c <__aeabi_ddiv>
 80065e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065e4:	e02b      	b.n	800663e <_dtoa_r+0x3de>
 80065e6:	2502      	movs	r5, #2
 80065e8:	e7ef      	b.n	80065ca <_dtoa_r+0x36a>
 80065ea:	f018 0f01 	tst.w	r8, #1
 80065ee:	d008      	beq.n	8006602 <_dtoa_r+0x3a2>
 80065f0:	4630      	mov	r0, r6
 80065f2:	4639      	mov	r1, r7
 80065f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80065f8:	f7f9 fffe 	bl	80005f8 <__aeabi_dmul>
 80065fc:	3501      	adds	r5, #1
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006606:	f109 0908 	add.w	r9, r9, #8
 800660a:	e7e0      	b.n	80065ce <_dtoa_r+0x36e>
 800660c:	f000 809f 	beq.w	800674e <_dtoa_r+0x4ee>
 8006610:	f1cb 0600 	rsb	r6, fp, #0
 8006614:	4ba1      	ldr	r3, [pc, #644]	; (800689c <_dtoa_r+0x63c>)
 8006616:	4fa2      	ldr	r7, [pc, #648]	; (80068a0 <_dtoa_r+0x640>)
 8006618:	f006 020f 	and.w	r2, r6, #15
 800661c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	ec51 0b18 	vmov	r0, r1, d8
 8006628:	f7f9 ffe6 	bl	80005f8 <__aeabi_dmul>
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	1136      	asrs	r6, r6, #4
 8006632:	2300      	movs	r3, #0
 8006634:	2502      	movs	r5, #2
 8006636:	2e00      	cmp	r6, #0
 8006638:	d17e      	bne.n	8006738 <_dtoa_r+0x4d8>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1d0      	bne.n	80065e0 <_dtoa_r+0x380>
 800663e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006640:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8084 	beq.w	8006752 <_dtoa_r+0x4f2>
 800664a:	4b96      	ldr	r3, [pc, #600]	; (80068a4 <_dtoa_r+0x644>)
 800664c:	2200      	movs	r2, #0
 800664e:	4640      	mov	r0, r8
 8006650:	4649      	mov	r1, r9
 8006652:	f7fa fa43 	bl	8000adc <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	d07b      	beq.n	8006752 <_dtoa_r+0x4f2>
 800665a:	9b04      	ldr	r3, [sp, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d078      	beq.n	8006752 <_dtoa_r+0x4f2>
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	dd39      	ble.n	80066da <_dtoa_r+0x47a>
 8006666:	4b90      	ldr	r3, [pc, #576]	; (80068a8 <_dtoa_r+0x648>)
 8006668:	2200      	movs	r2, #0
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7f9 ffc3 	bl	80005f8 <__aeabi_dmul>
 8006672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006676:	9e01      	ldr	r6, [sp, #4]
 8006678:	f10b 37ff 	add.w	r7, fp, #4294967295
 800667c:	3501      	adds	r5, #1
 800667e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006682:	4628      	mov	r0, r5
 8006684:	f7f9 ff4e 	bl	8000524 <__aeabi_i2d>
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	4b86      	ldr	r3, [pc, #536]	; (80068ac <_dtoa_r+0x64c>)
 8006692:	2200      	movs	r2, #0
 8006694:	f7f9 fdfa 	bl	800028c <__adddf3>
 8006698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800669c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	d158      	bne.n	8006758 <_dtoa_r+0x4f8>
 80066a6:	4b82      	ldr	r3, [pc, #520]	; (80068b0 <_dtoa_r+0x650>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	f7f9 fdeb 	bl	8000288 <__aeabi_dsub>
 80066b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b6:	4680      	mov	r8, r0
 80066b8:	4689      	mov	r9, r1
 80066ba:	f7fa fa2d 	bl	8000b18 <__aeabi_dcmpgt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	f040 8296 	bne.w	8006bf0 <_dtoa_r+0x990>
 80066c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066c8:	4640      	mov	r0, r8
 80066ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7fa fa04 	bl	8000adc <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f040 8289 	bne.w	8006bec <_dtoa_r+0x98c>
 80066da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80066de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f2c0 814e 	blt.w	8006982 <_dtoa_r+0x722>
 80066e6:	f1bb 0f0e 	cmp.w	fp, #14
 80066ea:	f300 814a 	bgt.w	8006982 <_dtoa_r+0x722>
 80066ee:	4b6b      	ldr	r3, [pc, #428]	; (800689c <_dtoa_r+0x63c>)
 80066f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f280 80dc 	bge.w	80068b8 <_dtoa_r+0x658>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f300 80d8 	bgt.w	80068b8 <_dtoa_r+0x658>
 8006708:	f040 826f 	bne.w	8006bea <_dtoa_r+0x98a>
 800670c:	4b68      	ldr	r3, [pc, #416]	; (80068b0 <_dtoa_r+0x650>)
 800670e:	2200      	movs	r2, #0
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671c:	f7fa f9f2 	bl	8000b04 <__aeabi_dcmpge>
 8006720:	9e04      	ldr	r6, [sp, #16]
 8006722:	4637      	mov	r7, r6
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 8245 	bne.w	8006bb4 <_dtoa_r+0x954>
 800672a:	9d00      	ldr	r5, [sp, #0]
 800672c:	2331      	movs	r3, #49	; 0x31
 800672e:	f805 3b01 	strb.w	r3, [r5], #1
 8006732:	f10b 0b01 	add.w	fp, fp, #1
 8006736:	e241      	b.n	8006bbc <_dtoa_r+0x95c>
 8006738:	07f2      	lsls	r2, r6, #31
 800673a:	d505      	bpl.n	8006748 <_dtoa_r+0x4e8>
 800673c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	3501      	adds	r5, #1
 8006746:	2301      	movs	r3, #1
 8006748:	1076      	asrs	r6, r6, #1
 800674a:	3708      	adds	r7, #8
 800674c:	e773      	b.n	8006636 <_dtoa_r+0x3d6>
 800674e:	2502      	movs	r5, #2
 8006750:	e775      	b.n	800663e <_dtoa_r+0x3de>
 8006752:	9e04      	ldr	r6, [sp, #16]
 8006754:	465f      	mov	r7, fp
 8006756:	e792      	b.n	800667e <_dtoa_r+0x41e>
 8006758:	9900      	ldr	r1, [sp, #0]
 800675a:	4b50      	ldr	r3, [pc, #320]	; (800689c <_dtoa_r+0x63c>)
 800675c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006760:	4431      	add	r1, r6
 8006762:	9102      	str	r1, [sp, #8]
 8006764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006766:	eeb0 9a47 	vmov.f32	s18, s14
 800676a:	eef0 9a67 	vmov.f32	s19, s15
 800676e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006772:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006776:	2900      	cmp	r1, #0
 8006778:	d044      	beq.n	8006804 <_dtoa_r+0x5a4>
 800677a:	494e      	ldr	r1, [pc, #312]	; (80068b4 <_dtoa_r+0x654>)
 800677c:	2000      	movs	r0, #0
 800677e:	f7fa f865 	bl	800084c <__aeabi_ddiv>
 8006782:	ec53 2b19 	vmov	r2, r3, d9
 8006786:	f7f9 fd7f 	bl	8000288 <__aeabi_dsub>
 800678a:	9d00      	ldr	r5, [sp, #0]
 800678c:	ec41 0b19 	vmov	d9, r0, r1
 8006790:	4649      	mov	r1, r9
 8006792:	4640      	mov	r0, r8
 8006794:	f7fa f9e0 	bl	8000b58 <__aeabi_d2iz>
 8006798:	4606      	mov	r6, r0
 800679a:	f7f9 fec3 	bl	8000524 <__aeabi_i2d>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4640      	mov	r0, r8
 80067a4:	4649      	mov	r1, r9
 80067a6:	f7f9 fd6f 	bl	8000288 <__aeabi_dsub>
 80067aa:	3630      	adds	r6, #48	; 0x30
 80067ac:	f805 6b01 	strb.w	r6, [r5], #1
 80067b0:	ec53 2b19 	vmov	r2, r3, d9
 80067b4:	4680      	mov	r8, r0
 80067b6:	4689      	mov	r9, r1
 80067b8:	f7fa f990 	bl	8000adc <__aeabi_dcmplt>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d164      	bne.n	800688a <_dtoa_r+0x62a>
 80067c0:	4642      	mov	r2, r8
 80067c2:	464b      	mov	r3, r9
 80067c4:	4937      	ldr	r1, [pc, #220]	; (80068a4 <_dtoa_r+0x644>)
 80067c6:	2000      	movs	r0, #0
 80067c8:	f7f9 fd5e 	bl	8000288 <__aeabi_dsub>
 80067cc:	ec53 2b19 	vmov	r2, r3, d9
 80067d0:	f7fa f984 	bl	8000adc <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 80b6 	bne.w	8006946 <_dtoa_r+0x6e6>
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	429d      	cmp	r5, r3
 80067de:	f43f af7c 	beq.w	80066da <_dtoa_r+0x47a>
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <_dtoa_r+0x648>)
 80067e4:	ec51 0b19 	vmov	r0, r1, d9
 80067e8:	2200      	movs	r2, #0
 80067ea:	f7f9 ff05 	bl	80005f8 <__aeabi_dmul>
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <_dtoa_r+0x648>)
 80067f0:	ec41 0b19 	vmov	d9, r0, r1
 80067f4:	2200      	movs	r2, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fefd 	bl	80005f8 <__aeabi_dmul>
 80067fe:	4680      	mov	r8, r0
 8006800:	4689      	mov	r9, r1
 8006802:	e7c5      	b.n	8006790 <_dtoa_r+0x530>
 8006804:	ec51 0b17 	vmov	r0, r1, d7
 8006808:	f7f9 fef6 	bl	80005f8 <__aeabi_dmul>
 800680c:	9b02      	ldr	r3, [sp, #8]
 800680e:	9d00      	ldr	r5, [sp, #0]
 8006810:	930f      	str	r3, [sp, #60]	; 0x3c
 8006812:	ec41 0b19 	vmov	d9, r0, r1
 8006816:	4649      	mov	r1, r9
 8006818:	4640      	mov	r0, r8
 800681a:	f7fa f99d 	bl	8000b58 <__aeabi_d2iz>
 800681e:	4606      	mov	r6, r0
 8006820:	f7f9 fe80 	bl	8000524 <__aeabi_i2d>
 8006824:	3630      	adds	r6, #48	; 0x30
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fd2b 	bl	8000288 <__aeabi_dsub>
 8006832:	f805 6b01 	strb.w	r6, [r5], #1
 8006836:	9b02      	ldr	r3, [sp, #8]
 8006838:	429d      	cmp	r5, r3
 800683a:	4680      	mov	r8, r0
 800683c:	4689      	mov	r9, r1
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	d124      	bne.n	800688e <_dtoa_r+0x62e>
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <_dtoa_r+0x654>)
 8006846:	ec51 0b19 	vmov	r0, r1, d9
 800684a:	f7f9 fd1f 	bl	800028c <__adddf3>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7fa f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800685a:	2800      	cmp	r0, #0
 800685c:	d173      	bne.n	8006946 <_dtoa_r+0x6e6>
 800685e:	ec53 2b19 	vmov	r2, r3, d9
 8006862:	4914      	ldr	r1, [pc, #80]	; (80068b4 <_dtoa_r+0x654>)
 8006864:	2000      	movs	r0, #0
 8006866:	f7f9 fd0f 	bl	8000288 <__aeabi_dsub>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7fa f933 	bl	8000adc <__aeabi_dcmplt>
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f af2f 	beq.w	80066da <_dtoa_r+0x47a>
 800687c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800687e:	1e6b      	subs	r3, r5, #1
 8006880:	930f      	str	r3, [sp, #60]	; 0x3c
 8006882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006886:	2b30      	cmp	r3, #48	; 0x30
 8006888:	d0f8      	beq.n	800687c <_dtoa_r+0x61c>
 800688a:	46bb      	mov	fp, r7
 800688c:	e04a      	b.n	8006924 <_dtoa_r+0x6c4>
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <_dtoa_r+0x648>)
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	e7bd      	b.n	8006816 <_dtoa_r+0x5b6>
 800689a:	bf00      	nop
 800689c:	08008400 	.word	0x08008400
 80068a0:	080083d8 	.word	0x080083d8
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	40240000 	.word	0x40240000
 80068ac:	401c0000 	.word	0x401c0000
 80068b0:	40140000 	.word	0x40140000
 80068b4:	3fe00000 	.word	0x3fe00000
 80068b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068bc:	9d00      	ldr	r5, [sp, #0]
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	4630      	mov	r0, r6
 80068c4:	4639      	mov	r1, r7
 80068c6:	f7f9 ffc1 	bl	800084c <__aeabi_ddiv>
 80068ca:	f7fa f945 	bl	8000b58 <__aeabi_d2iz>
 80068ce:	9001      	str	r0, [sp, #4]
 80068d0:	f7f9 fe28 	bl	8000524 <__aeabi_i2d>
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	f7f9 fe8e 	bl	80005f8 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7f9 fcd0 	bl	8000288 <__aeabi_dsub>
 80068e8:	9e01      	ldr	r6, [sp, #4]
 80068ea:	9f04      	ldr	r7, [sp, #16]
 80068ec:	3630      	adds	r6, #48	; 0x30
 80068ee:	f805 6b01 	strb.w	r6, [r5], #1
 80068f2:	9e00      	ldr	r6, [sp, #0]
 80068f4:	1bae      	subs	r6, r5, r6
 80068f6:	42b7      	cmp	r7, r6
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	d134      	bne.n	8006968 <_dtoa_r+0x708>
 80068fe:	f7f9 fcc5 	bl	800028c <__adddf3>
 8006902:	4642      	mov	r2, r8
 8006904:	464b      	mov	r3, r9
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	f7fa f905 	bl	8000b18 <__aeabi_dcmpgt>
 800690e:	b9c8      	cbnz	r0, 8006944 <_dtoa_r+0x6e4>
 8006910:	4642      	mov	r2, r8
 8006912:	464b      	mov	r3, r9
 8006914:	4630      	mov	r0, r6
 8006916:	4639      	mov	r1, r7
 8006918:	f7fa f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800691c:	b110      	cbz	r0, 8006924 <_dtoa_r+0x6c4>
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	07db      	lsls	r3, r3, #31
 8006922:	d40f      	bmi.n	8006944 <_dtoa_r+0x6e4>
 8006924:	4651      	mov	r1, sl
 8006926:	4620      	mov	r0, r4
 8006928:	f000 fbcc 	bl	80070c4 <_Bfree>
 800692c:	2300      	movs	r3, #0
 800692e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006930:	702b      	strb	r3, [r5, #0]
 8006932:	f10b 0301 	add.w	r3, fp, #1
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800693a:	2b00      	cmp	r3, #0
 800693c:	f43f ace2 	beq.w	8006304 <_dtoa_r+0xa4>
 8006940:	601d      	str	r5, [r3, #0]
 8006942:	e4df      	b.n	8006304 <_dtoa_r+0xa4>
 8006944:	465f      	mov	r7, fp
 8006946:	462b      	mov	r3, r5
 8006948:	461d      	mov	r5, r3
 800694a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800694e:	2a39      	cmp	r2, #57	; 0x39
 8006950:	d106      	bne.n	8006960 <_dtoa_r+0x700>
 8006952:	9a00      	ldr	r2, [sp, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d1f7      	bne.n	8006948 <_dtoa_r+0x6e8>
 8006958:	9900      	ldr	r1, [sp, #0]
 800695a:	2230      	movs	r2, #48	; 0x30
 800695c:	3701      	adds	r7, #1
 800695e:	700a      	strb	r2, [r1, #0]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	3201      	adds	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e790      	b.n	800688a <_dtoa_r+0x62a>
 8006968:	4ba3      	ldr	r3, [pc, #652]	; (8006bf8 <_dtoa_r+0x998>)
 800696a:	2200      	movs	r2, #0
 800696c:	f7f9 fe44 	bl	80005f8 <__aeabi_dmul>
 8006970:	2200      	movs	r2, #0
 8006972:	2300      	movs	r3, #0
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	f7fa f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800697c:	2800      	cmp	r0, #0
 800697e:	d09e      	beq.n	80068be <_dtoa_r+0x65e>
 8006980:	e7d0      	b.n	8006924 <_dtoa_r+0x6c4>
 8006982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006984:	2a00      	cmp	r2, #0
 8006986:	f000 80ca 	beq.w	8006b1e <_dtoa_r+0x8be>
 800698a:	9a07      	ldr	r2, [sp, #28]
 800698c:	2a01      	cmp	r2, #1
 800698e:	f300 80ad 	bgt.w	8006aec <_dtoa_r+0x88c>
 8006992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006994:	2a00      	cmp	r2, #0
 8006996:	f000 80a5 	beq.w	8006ae4 <_dtoa_r+0x884>
 800699a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800699e:	9e08      	ldr	r6, [sp, #32]
 80069a0:	9d05      	ldr	r5, [sp, #20]
 80069a2:	9a05      	ldr	r2, [sp, #20]
 80069a4:	441a      	add	r2, r3
 80069a6:	9205      	str	r2, [sp, #20]
 80069a8:	9a06      	ldr	r2, [sp, #24]
 80069aa:	2101      	movs	r1, #1
 80069ac:	441a      	add	r2, r3
 80069ae:	4620      	mov	r0, r4
 80069b0:	9206      	str	r2, [sp, #24]
 80069b2:	f000 fc3d 	bl	8007230 <__i2b>
 80069b6:	4607      	mov	r7, r0
 80069b8:	b165      	cbz	r5, 80069d4 <_dtoa_r+0x774>
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dd09      	ble.n	80069d4 <_dtoa_r+0x774>
 80069c0:	42ab      	cmp	r3, r5
 80069c2:	9a05      	ldr	r2, [sp, #20]
 80069c4:	bfa8      	it	ge
 80069c6:	462b      	movge	r3, r5
 80069c8:	1ad2      	subs	r2, r2, r3
 80069ca:	9205      	str	r2, [sp, #20]
 80069cc:	9a06      	ldr	r2, [sp, #24]
 80069ce:	1aed      	subs	r5, r5, r3
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	9306      	str	r3, [sp, #24]
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	b1f3      	cbz	r3, 8006a16 <_dtoa_r+0x7b6>
 80069d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80a3 	beq.w	8006b26 <_dtoa_r+0x8c6>
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	dd10      	ble.n	8006a06 <_dtoa_r+0x7a6>
 80069e4:	4639      	mov	r1, r7
 80069e6:	4632      	mov	r2, r6
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fce1 	bl	80073b0 <__pow5mult>
 80069ee:	4652      	mov	r2, sl
 80069f0:	4601      	mov	r1, r0
 80069f2:	4607      	mov	r7, r0
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fc31 	bl	800725c <__multiply>
 80069fa:	4651      	mov	r1, sl
 80069fc:	4680      	mov	r8, r0
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fb60 	bl	80070c4 <_Bfree>
 8006a04:	46c2      	mov	sl, r8
 8006a06:	9b08      	ldr	r3, [sp, #32]
 8006a08:	1b9a      	subs	r2, r3, r6
 8006a0a:	d004      	beq.n	8006a16 <_dtoa_r+0x7b6>
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 fcce 	bl	80073b0 <__pow5mult>
 8006a14:	4682      	mov	sl, r0
 8006a16:	2101      	movs	r1, #1
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fc09 	bl	8007230 <__i2b>
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	4606      	mov	r6, r0
 8006a24:	f340 8081 	ble.w	8006b2a <_dtoa_r+0x8ca>
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fcbf 	bl	80073b0 <__pow5mult>
 8006a32:	9b07      	ldr	r3, [sp, #28]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	4606      	mov	r6, r0
 8006a38:	dd7a      	ble.n	8006b30 <_dtoa_r+0x8d0>
 8006a3a:	f04f 0800 	mov.w	r8, #0
 8006a3e:	6933      	ldr	r3, [r6, #16]
 8006a40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a44:	6918      	ldr	r0, [r3, #16]
 8006a46:	f000 fba5 	bl	8007194 <__hi0bits>
 8006a4a:	f1c0 0020 	rsb	r0, r0, #32
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	4418      	add	r0, r3
 8006a52:	f010 001f 	ands.w	r0, r0, #31
 8006a56:	f000 8094 	beq.w	8006b82 <_dtoa_r+0x922>
 8006a5a:	f1c0 0320 	rsb	r3, r0, #32
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	f340 8085 	ble.w	8006b6e <_dtoa_r+0x90e>
 8006a64:	9b05      	ldr	r3, [sp, #20]
 8006a66:	f1c0 001c 	rsb	r0, r0, #28
 8006a6a:	4403      	add	r3, r0
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	9b06      	ldr	r3, [sp, #24]
 8006a70:	4403      	add	r3, r0
 8006a72:	4405      	add	r5, r0
 8006a74:	9306      	str	r3, [sp, #24]
 8006a76:	9b05      	ldr	r3, [sp, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dd05      	ble.n	8006a88 <_dtoa_r+0x828>
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fcef 	bl	8007464 <__lshift>
 8006a86:	4682      	mov	sl, r0
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd05      	ble.n	8006a9a <_dtoa_r+0x83a>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	461a      	mov	r2, r3
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fce6 	bl	8007464 <__lshift>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d072      	beq.n	8006b86 <_dtoa_r+0x926>
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	f000 fd4a 	bl	800753c <__mcmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	da6c      	bge.n	8006b86 <_dtoa_r+0x926>
 8006aac:	2300      	movs	r3, #0
 8006aae:	4651      	mov	r1, sl
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 fb28 	bl	8007108 <__multadd>
 8006ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006abe:	4682      	mov	sl, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 81b0 	beq.w	8006e26 <_dtoa_r+0xbc6>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4639      	mov	r1, r7
 8006aca:	220a      	movs	r2, #10
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fb1b 	bl	8007108 <__multadd>
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	f300 8096 	bgt.w	8006c08 <_dtoa_r+0x9a8>
 8006adc:	9b07      	ldr	r3, [sp, #28]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	dc59      	bgt.n	8006b96 <_dtoa_r+0x936>
 8006ae2:	e091      	b.n	8006c08 <_dtoa_r+0x9a8>
 8006ae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ae6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aea:	e758      	b.n	800699e <_dtoa_r+0x73e>
 8006aec:	9b04      	ldr	r3, [sp, #16]
 8006aee:	1e5e      	subs	r6, r3, #1
 8006af0:	9b08      	ldr	r3, [sp, #32]
 8006af2:	42b3      	cmp	r3, r6
 8006af4:	bfbf      	itttt	lt
 8006af6:	9b08      	ldrlt	r3, [sp, #32]
 8006af8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006afa:	9608      	strlt	r6, [sp, #32]
 8006afc:	1af3      	sublt	r3, r6, r3
 8006afe:	bfb4      	ite	lt
 8006b00:	18d2      	addlt	r2, r2, r3
 8006b02:	1b9e      	subge	r6, r3, r6
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	bfbc      	itt	lt
 8006b08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b0a:	2600      	movlt	r6, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb7      	itett	lt
 8006b10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b18:	1a9d      	sublt	r5, r3, r2
 8006b1a:	2300      	movlt	r3, #0
 8006b1c:	e741      	b.n	80069a2 <_dtoa_r+0x742>
 8006b1e:	9e08      	ldr	r6, [sp, #32]
 8006b20:	9d05      	ldr	r5, [sp, #20]
 8006b22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b24:	e748      	b.n	80069b8 <_dtoa_r+0x758>
 8006b26:	9a08      	ldr	r2, [sp, #32]
 8006b28:	e770      	b.n	8006a0c <_dtoa_r+0x7ac>
 8006b2a:	9b07      	ldr	r3, [sp, #28]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	dc19      	bgt.n	8006b64 <_dtoa_r+0x904>
 8006b30:	9b02      	ldr	r3, [sp, #8]
 8006b32:	b9bb      	cbnz	r3, 8006b64 <_dtoa_r+0x904>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b3a:	b99b      	cbnz	r3, 8006b64 <_dtoa_r+0x904>
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b42:	0d1b      	lsrs	r3, r3, #20
 8006b44:	051b      	lsls	r3, r3, #20
 8006b46:	b183      	cbz	r3, 8006b6a <_dtoa_r+0x90a>
 8006b48:	9b05      	ldr	r3, [sp, #20]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	9b06      	ldr	r3, [sp, #24]
 8006b50:	3301      	adds	r3, #1
 8006b52:	9306      	str	r3, [sp, #24]
 8006b54:	f04f 0801 	mov.w	r8, #1
 8006b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f47f af6f 	bne.w	8006a3e <_dtoa_r+0x7de>
 8006b60:	2001      	movs	r0, #1
 8006b62:	e774      	b.n	8006a4e <_dtoa_r+0x7ee>
 8006b64:	f04f 0800 	mov.w	r8, #0
 8006b68:	e7f6      	b.n	8006b58 <_dtoa_r+0x8f8>
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	e7f4      	b.n	8006b58 <_dtoa_r+0x8f8>
 8006b6e:	d082      	beq.n	8006a76 <_dtoa_r+0x816>
 8006b70:	9a05      	ldr	r2, [sp, #20]
 8006b72:	331c      	adds	r3, #28
 8006b74:	441a      	add	r2, r3
 8006b76:	9205      	str	r2, [sp, #20]
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	441d      	add	r5, r3
 8006b7e:	9206      	str	r2, [sp, #24]
 8006b80:	e779      	b.n	8006a76 <_dtoa_r+0x816>
 8006b82:	4603      	mov	r3, r0
 8006b84:	e7f4      	b.n	8006b70 <_dtoa_r+0x910>
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc37      	bgt.n	8006bfc <_dtoa_r+0x99c>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	dd34      	ble.n	8006bfc <_dtoa_r+0x99c>
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	b963      	cbnz	r3, 8006bb4 <_dtoa_r+0x954>
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	2205      	movs	r2, #5
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fab2 	bl	8007108 <__multadd>
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	4650      	mov	r0, sl
 8006baa:	f000 fcc7 	bl	800753c <__mcmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f73f adbb 	bgt.w	800672a <_dtoa_r+0x4ca>
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb6:	9d00      	ldr	r5, [sp, #0]
 8006bb8:	ea6f 0b03 	mvn.w	fp, r3
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fa7e 	bl	80070c4 <_Bfree>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f43f aeab 	beq.w	8006924 <_dtoa_r+0x6c4>
 8006bce:	f1b8 0f00 	cmp.w	r8, #0
 8006bd2:	d005      	beq.n	8006be0 <_dtoa_r+0x980>
 8006bd4:	45b8      	cmp	r8, r7
 8006bd6:	d003      	beq.n	8006be0 <_dtoa_r+0x980>
 8006bd8:	4641      	mov	r1, r8
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fa72 	bl	80070c4 <_Bfree>
 8006be0:	4639      	mov	r1, r7
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fa6e 	bl	80070c4 <_Bfree>
 8006be8:	e69c      	b.n	8006924 <_dtoa_r+0x6c4>
 8006bea:	2600      	movs	r6, #0
 8006bec:	4637      	mov	r7, r6
 8006bee:	e7e1      	b.n	8006bb4 <_dtoa_r+0x954>
 8006bf0:	46bb      	mov	fp, r7
 8006bf2:	4637      	mov	r7, r6
 8006bf4:	e599      	b.n	800672a <_dtoa_r+0x4ca>
 8006bf6:	bf00      	nop
 8006bf8:	40240000 	.word	0x40240000
 8006bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80c8 	beq.w	8006d94 <_dtoa_r+0xb34>
 8006c04:	9b04      	ldr	r3, [sp, #16]
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	dd05      	ble.n	8006c18 <_dtoa_r+0x9b8>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fc27 	bl	8007464 <__lshift>
 8006c16:	4607      	mov	r7, r0
 8006c18:	f1b8 0f00 	cmp.w	r8, #0
 8006c1c:	d05b      	beq.n	8006cd6 <_dtoa_r+0xa76>
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fa0f 	bl	8007044 <_Balloc>
 8006c26:	4605      	mov	r5, r0
 8006c28:	b928      	cbnz	r0, 8006c36 <_dtoa_r+0x9d6>
 8006c2a:	4b83      	ldr	r3, [pc, #524]	; (8006e38 <_dtoa_r+0xbd8>)
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c32:	f7ff bb2e 	b.w	8006292 <_dtoa_r+0x32>
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	3202      	adds	r2, #2
 8006c3a:	0092      	lsls	r2, r2, #2
 8006c3c:	f107 010c 	add.w	r1, r7, #12
 8006c40:	300c      	adds	r0, #12
 8006c42:	f000 ffab 	bl	8007b9c <memcpy>
 8006c46:	2201      	movs	r2, #1
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fc0a 	bl	8007464 <__lshift>
 8006c50:	9b00      	ldr	r3, [sp, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	9308      	str	r3, [sp, #32]
 8006c5e:	9b02      	ldr	r3, [sp, #8]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	46b8      	mov	r8, r7
 8006c66:	9306      	str	r3, [sp, #24]
 8006c68:	4607      	mov	r7, r0
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4650      	mov	r0, sl
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	f7ff fa6b 	bl	800614e <quorem>
 8006c78:	4641      	mov	r1, r8
 8006c7a:	9002      	str	r0, [sp, #8]
 8006c7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c80:	4650      	mov	r0, sl
 8006c82:	f000 fc5b 	bl	800753c <__mcmp>
 8006c86:	463a      	mov	r2, r7
 8006c88:	9005      	str	r0, [sp, #20]
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fc71 	bl	8007574 <__mdiff>
 8006c92:	68c2      	ldr	r2, [r0, #12]
 8006c94:	4605      	mov	r5, r0
 8006c96:	bb02      	cbnz	r2, 8006cda <_dtoa_r+0xa7a>
 8006c98:	4601      	mov	r1, r0
 8006c9a:	4650      	mov	r0, sl
 8006c9c:	f000 fc4e 	bl	800753c <__mcmp>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca8:	f000 fa0c 	bl	80070c4 <_Bfree>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb0:	9d04      	ldr	r5, [sp, #16]
 8006cb2:	ea43 0102 	orr.w	r1, r3, r2
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	4319      	orrs	r1, r3
 8006cba:	d110      	bne.n	8006cde <_dtoa_r+0xa7e>
 8006cbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cc0:	d029      	beq.n	8006d16 <_dtoa_r+0xab6>
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd02      	ble.n	8006cce <_dtoa_r+0xa6e>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	f883 9000 	strb.w	r9, [r3]
 8006cd4:	e774      	b.n	8006bc0 <_dtoa_r+0x960>
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	e7ba      	b.n	8006c50 <_dtoa_r+0x9f0>
 8006cda:	2201      	movs	r2, #1
 8006cdc:	e7e1      	b.n	8006ca2 <_dtoa_r+0xa42>
 8006cde:	9b05      	ldr	r3, [sp, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db04      	blt.n	8006cee <_dtoa_r+0xa8e>
 8006ce4:	9907      	ldr	r1, [sp, #28]
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	9906      	ldr	r1, [sp, #24]
 8006cea:	430b      	orrs	r3, r1
 8006cec:	d120      	bne.n	8006d30 <_dtoa_r+0xad0>
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	dded      	ble.n	8006cce <_dtoa_r+0xa6e>
 8006cf2:	4651      	mov	r1, sl
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fbb4 	bl	8007464 <__lshift>
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4682      	mov	sl, r0
 8006d00:	f000 fc1c 	bl	800753c <__mcmp>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	dc03      	bgt.n	8006d10 <_dtoa_r+0xab0>
 8006d08:	d1e1      	bne.n	8006cce <_dtoa_r+0xa6e>
 8006d0a:	f019 0f01 	tst.w	r9, #1
 8006d0e:	d0de      	beq.n	8006cce <_dtoa_r+0xa6e>
 8006d10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d14:	d1d8      	bne.n	8006cc8 <_dtoa_r+0xa68>
 8006d16:	9a01      	ldr	r2, [sp, #4]
 8006d18:	2339      	movs	r3, #57	; 0x39
 8006d1a:	7013      	strb	r3, [r2, #0]
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	461d      	mov	r5, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d26:	2a39      	cmp	r2, #57	; 0x39
 8006d28:	d06c      	beq.n	8006e04 <_dtoa_r+0xba4>
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e747      	b.n	8006bc0 <_dtoa_r+0x960>
 8006d30:	2a00      	cmp	r2, #0
 8006d32:	dd07      	ble.n	8006d44 <_dtoa_r+0xae4>
 8006d34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d38:	d0ed      	beq.n	8006d16 <_dtoa_r+0xab6>
 8006d3a:	9a01      	ldr	r2, [sp, #4]
 8006d3c:	f109 0301 	add.w	r3, r9, #1
 8006d40:	7013      	strb	r3, [r2, #0]
 8006d42:	e73d      	b.n	8006bc0 <_dtoa_r+0x960>
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	9a08      	ldr	r2, [sp, #32]
 8006d48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d043      	beq.n	8006dd8 <_dtoa_r+0xb78>
 8006d50:	4651      	mov	r1, sl
 8006d52:	2300      	movs	r3, #0
 8006d54:	220a      	movs	r2, #10
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f9d6 	bl	8007108 <__multadd>
 8006d5c:	45b8      	cmp	r8, r7
 8006d5e:	4682      	mov	sl, r0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	f04f 020a 	mov.w	r2, #10
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	d107      	bne.n	8006d7e <_dtoa_r+0xb1e>
 8006d6e:	f000 f9cb 	bl	8007108 <__multadd>
 8006d72:	4680      	mov	r8, r0
 8006d74:	4607      	mov	r7, r0
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	e775      	b.n	8006c6a <_dtoa_r+0xa0a>
 8006d7e:	f000 f9c3 	bl	8007108 <__multadd>
 8006d82:	4639      	mov	r1, r7
 8006d84:	4680      	mov	r8, r0
 8006d86:	2300      	movs	r3, #0
 8006d88:	220a      	movs	r2, #10
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f9bc 	bl	8007108 <__multadd>
 8006d90:	4607      	mov	r7, r0
 8006d92:	e7f0      	b.n	8006d76 <_dtoa_r+0xb16>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	9d00      	ldr	r5, [sp, #0]
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	f7ff f9d6 	bl	800614e <quorem>
 8006da2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006da6:	9b00      	ldr	r3, [sp, #0]
 8006da8:	f805 9b01 	strb.w	r9, [r5], #1
 8006dac:	1aea      	subs	r2, r5, r3
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	dd07      	ble.n	8006dc4 <_dtoa_r+0xb64>
 8006db4:	4651      	mov	r1, sl
 8006db6:	2300      	movs	r3, #0
 8006db8:	220a      	movs	r2, #10
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f9a4 	bl	8007108 <__multadd>
 8006dc0:	4682      	mov	sl, r0
 8006dc2:	e7ea      	b.n	8006d9a <_dtoa_r+0xb3a>
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfc8      	it	gt
 8006dca:	461d      	movgt	r5, r3
 8006dcc:	9b00      	ldr	r3, [sp, #0]
 8006dce:	bfd8      	it	le
 8006dd0:	2501      	movle	r5, #1
 8006dd2:	441d      	add	r5, r3
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	4651      	mov	r1, sl
 8006dda:	2201      	movs	r2, #1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fb41 	bl	8007464 <__lshift>
 8006de2:	4631      	mov	r1, r6
 8006de4:	4682      	mov	sl, r0
 8006de6:	f000 fba9 	bl	800753c <__mcmp>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	dc96      	bgt.n	8006d1c <_dtoa_r+0xabc>
 8006dee:	d102      	bne.n	8006df6 <_dtoa_r+0xb96>
 8006df0:	f019 0f01 	tst.w	r9, #1
 8006df4:	d192      	bne.n	8006d1c <_dtoa_r+0xabc>
 8006df6:	462b      	mov	r3, r5
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dfe:	2a30      	cmp	r2, #48	; 0x30
 8006e00:	d0fa      	beq.n	8006df8 <_dtoa_r+0xb98>
 8006e02:	e6dd      	b.n	8006bc0 <_dtoa_r+0x960>
 8006e04:	9a00      	ldr	r2, [sp, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d189      	bne.n	8006d1e <_dtoa_r+0xabe>
 8006e0a:	f10b 0b01 	add.w	fp, fp, #1
 8006e0e:	2331      	movs	r3, #49	; 0x31
 8006e10:	e796      	b.n	8006d40 <_dtoa_r+0xae0>
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <_dtoa_r+0xbdc>)
 8006e14:	f7ff ba99 	b.w	800634a <_dtoa_r+0xea>
 8006e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f47f aa6d 	bne.w	80062fa <_dtoa_r+0x9a>
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <_dtoa_r+0xbe0>)
 8006e22:	f7ff ba92 	b.w	800634a <_dtoa_r+0xea>
 8006e26:	9b01      	ldr	r3, [sp, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dcb5      	bgt.n	8006d98 <_dtoa_r+0xb38>
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	f73f aeb1 	bgt.w	8006b96 <_dtoa_r+0x936>
 8006e34:	e7b0      	b.n	8006d98 <_dtoa_r+0xb38>
 8006e36:	bf00      	nop
 8006e38:	08008368 	.word	0x08008368
 8006e3c:	080082c8 	.word	0x080082c8
 8006e40:	080082ec 	.word	0x080082ec

08006e44 <_free_r>:
 8006e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e46:	2900      	cmp	r1, #0
 8006e48:	d044      	beq.n	8006ed4 <_free_r+0x90>
 8006e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e4e:	9001      	str	r0, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f1a1 0404 	sub.w	r4, r1, #4
 8006e56:	bfb8      	it	lt
 8006e58:	18e4      	addlt	r4, r4, r3
 8006e5a:	f000 f8e7 	bl	800702c <__malloc_lock>
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <_free_r+0x94>)
 8006e60:	9801      	ldr	r0, [sp, #4]
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	b933      	cbnz	r3, 8006e74 <_free_r+0x30>
 8006e66:	6063      	str	r3, [r4, #4]
 8006e68:	6014      	str	r4, [r2, #0]
 8006e6a:	b003      	add	sp, #12
 8006e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e70:	f000 b8e2 	b.w	8007038 <__malloc_unlock>
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d908      	bls.n	8006e8a <_free_r+0x46>
 8006e78:	6825      	ldr	r5, [r4, #0]
 8006e7a:	1961      	adds	r1, r4, r5
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	bf01      	itttt	eq
 8006e80:	6819      	ldreq	r1, [r3, #0]
 8006e82:	685b      	ldreq	r3, [r3, #4]
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	e7ed      	b.n	8006e66 <_free_r+0x22>
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	b10b      	cbz	r3, 8006e94 <_free_r+0x50>
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	d9fa      	bls.n	8006e8a <_free_r+0x46>
 8006e94:	6811      	ldr	r1, [r2, #0]
 8006e96:	1855      	adds	r5, r2, r1
 8006e98:	42a5      	cmp	r5, r4
 8006e9a:	d10b      	bne.n	8006eb4 <_free_r+0x70>
 8006e9c:	6824      	ldr	r4, [r4, #0]
 8006e9e:	4421      	add	r1, r4
 8006ea0:	1854      	adds	r4, r2, r1
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	6011      	str	r1, [r2, #0]
 8006ea6:	d1e0      	bne.n	8006e6a <_free_r+0x26>
 8006ea8:	681c      	ldr	r4, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	6053      	str	r3, [r2, #4]
 8006eae:	440c      	add	r4, r1
 8006eb0:	6014      	str	r4, [r2, #0]
 8006eb2:	e7da      	b.n	8006e6a <_free_r+0x26>
 8006eb4:	d902      	bls.n	8006ebc <_free_r+0x78>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	6003      	str	r3, [r0, #0]
 8006eba:	e7d6      	b.n	8006e6a <_free_r+0x26>
 8006ebc:	6825      	ldr	r5, [r4, #0]
 8006ebe:	1961      	adds	r1, r4, r5
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	bf04      	itt	eq
 8006ec4:	6819      	ldreq	r1, [r3, #0]
 8006ec6:	685b      	ldreq	r3, [r3, #4]
 8006ec8:	6063      	str	r3, [r4, #4]
 8006eca:	bf04      	itt	eq
 8006ecc:	1949      	addeq	r1, r1, r5
 8006ece:	6021      	streq	r1, [r4, #0]
 8006ed0:	6054      	str	r4, [r2, #4]
 8006ed2:	e7ca      	b.n	8006e6a <_free_r+0x26>
 8006ed4:	b003      	add	sp, #12
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	200004a4 	.word	0x200004a4

08006edc <malloc>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <malloc+0xc>)
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f000 b823 	b.w	8006f2c <_malloc_r>
 8006ee6:	bf00      	nop
 8006ee8:	20000064 	.word	0x20000064

08006eec <sbrk_aligned>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4e0e      	ldr	r6, [pc, #56]	; (8006f28 <sbrk_aligned+0x3c>)
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	6831      	ldr	r1, [r6, #0]
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	b911      	cbnz	r1, 8006efe <sbrk_aligned+0x12>
 8006ef8:	f000 fe40 	bl	8007b7c <_sbrk_r>
 8006efc:	6030      	str	r0, [r6, #0]
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f000 fe3b 	bl	8007b7c <_sbrk_r>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d00a      	beq.n	8006f20 <sbrk_aligned+0x34>
 8006f0a:	1cc4      	adds	r4, r0, #3
 8006f0c:	f024 0403 	bic.w	r4, r4, #3
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d007      	beq.n	8006f24 <sbrk_aligned+0x38>
 8006f14:	1a21      	subs	r1, r4, r0
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fe30 	bl	8007b7c <_sbrk_r>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d101      	bne.n	8006f24 <sbrk_aligned+0x38>
 8006f20:	f04f 34ff 	mov.w	r4, #4294967295
 8006f24:	4620      	mov	r0, r4
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	200004a8 	.word	0x200004a8

08006f2c <_malloc_r>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	1ccd      	adds	r5, r1, #3
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	3508      	adds	r5, #8
 8006f38:	2d0c      	cmp	r5, #12
 8006f3a:	bf38      	it	cc
 8006f3c:	250c      	movcc	r5, #12
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	4607      	mov	r7, r0
 8006f42:	db01      	blt.n	8006f48 <_malloc_r+0x1c>
 8006f44:	42a9      	cmp	r1, r5
 8006f46:	d905      	bls.n	8006f54 <_malloc_r+0x28>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	2600      	movs	r6, #0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007028 <_malloc_r+0xfc>
 8006f58:	f000 f868 	bl	800702c <__malloc_lock>
 8006f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f60:	461c      	mov	r4, r3
 8006f62:	bb5c      	cbnz	r4, 8006fbc <_malloc_r+0x90>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ffc0 	bl	8006eec <sbrk_aligned>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	4604      	mov	r4, r0
 8006f70:	d155      	bne.n	800701e <_malloc_r+0xf2>
 8006f72:	f8d8 4000 	ldr.w	r4, [r8]
 8006f76:	4626      	mov	r6, r4
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	d145      	bne.n	8007008 <_malloc_r+0xdc>
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d048      	beq.n	8007012 <_malloc_r+0xe6>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	4631      	mov	r1, r6
 8006f84:	4638      	mov	r0, r7
 8006f86:	eb04 0903 	add.w	r9, r4, r3
 8006f8a:	f000 fdf7 	bl	8007b7c <_sbrk_r>
 8006f8e:	4581      	cmp	r9, r0
 8006f90:	d13f      	bne.n	8007012 <_malloc_r+0xe6>
 8006f92:	6821      	ldr	r1, [r4, #0]
 8006f94:	1a6d      	subs	r5, r5, r1
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa7 	bl	8006eec <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d037      	beq.n	8007012 <_malloc_r+0xe6>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d038      	beq.n	8007022 <_malloc_r+0xf6>
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	42a2      	cmp	r2, r4
 8006fb4:	d12b      	bne.n	800700e <_malloc_r+0xe2>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	e00f      	b.n	8006fdc <_malloc_r+0xb0>
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	1b52      	subs	r2, r2, r5
 8006fc0:	d41f      	bmi.n	8007002 <_malloc_r+0xd6>
 8006fc2:	2a0b      	cmp	r2, #11
 8006fc4:	d917      	bls.n	8006ff6 <_malloc_r+0xca>
 8006fc6:	1961      	adds	r1, r4, r5
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	6025      	str	r5, [r4, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	6059      	strne	r1, [r3, #4]
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	bf08      	it	eq
 8006fd4:	f8c8 1000 	streq.w	r1, [r8]
 8006fd8:	5162      	str	r2, [r4, r5]
 8006fda:	604b      	str	r3, [r1, #4]
 8006fdc:	4638      	mov	r0, r7
 8006fde:	f104 060b 	add.w	r6, r4, #11
 8006fe2:	f000 f829 	bl	8007038 <__malloc_unlock>
 8006fe6:	f026 0607 	bic.w	r6, r6, #7
 8006fea:	1d23      	adds	r3, r4, #4
 8006fec:	1af2      	subs	r2, r6, r3
 8006fee:	d0ae      	beq.n	8006f4e <_malloc_r+0x22>
 8006ff0:	1b9b      	subs	r3, r3, r6
 8006ff2:	50a3      	str	r3, [r4, r2]
 8006ff4:	e7ab      	b.n	8006f4e <_malloc_r+0x22>
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	6862      	ldr	r2, [r4, #4]
 8006ffa:	d1dd      	bne.n	8006fb8 <_malloc_r+0x8c>
 8006ffc:	f8c8 2000 	str.w	r2, [r8]
 8007000:	e7ec      	b.n	8006fdc <_malloc_r+0xb0>
 8007002:	4623      	mov	r3, r4
 8007004:	6864      	ldr	r4, [r4, #4]
 8007006:	e7ac      	b.n	8006f62 <_malloc_r+0x36>
 8007008:	4634      	mov	r4, r6
 800700a:	6876      	ldr	r6, [r6, #4]
 800700c:	e7b4      	b.n	8006f78 <_malloc_r+0x4c>
 800700e:	4613      	mov	r3, r2
 8007010:	e7cc      	b.n	8006fac <_malloc_r+0x80>
 8007012:	230c      	movs	r3, #12
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4638      	mov	r0, r7
 8007018:	f000 f80e 	bl	8007038 <__malloc_unlock>
 800701c:	e797      	b.n	8006f4e <_malloc_r+0x22>
 800701e:	6025      	str	r5, [r4, #0]
 8007020:	e7dc      	b.n	8006fdc <_malloc_r+0xb0>
 8007022:	605b      	str	r3, [r3, #4]
 8007024:	deff      	udf	#255	; 0xff
 8007026:	bf00      	nop
 8007028:	200004a4 	.word	0x200004a4

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__malloc_lock+0x8>)
 800702e:	f7ff b88c 	b.w	800614a <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	200004a0 	.word	0x200004a0

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__malloc_unlock+0x8>)
 800703a:	f7ff b887 	b.w	800614c <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	200004a0 	.word	0x200004a0

08007044 <_Balloc>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	69c6      	ldr	r6, [r0, #28]
 8007048:	4604      	mov	r4, r0
 800704a:	460d      	mov	r5, r1
 800704c:	b976      	cbnz	r6, 800706c <_Balloc+0x28>
 800704e:	2010      	movs	r0, #16
 8007050:	f7ff ff44 	bl	8006edc <malloc>
 8007054:	4602      	mov	r2, r0
 8007056:	61e0      	str	r0, [r4, #28]
 8007058:	b920      	cbnz	r0, 8007064 <_Balloc+0x20>
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <_Balloc+0x78>)
 800705c:	4818      	ldr	r0, [pc, #96]	; (80070c0 <_Balloc+0x7c>)
 800705e:	216b      	movs	r1, #107	; 0x6b
 8007060:	f000 fdaa 	bl	8007bb8 <__assert_func>
 8007064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007068:	6006      	str	r6, [r0, #0]
 800706a:	60c6      	str	r6, [r0, #12]
 800706c:	69e6      	ldr	r6, [r4, #28]
 800706e:	68f3      	ldr	r3, [r6, #12]
 8007070:	b183      	cbz	r3, 8007094 <_Balloc+0x50>
 8007072:	69e3      	ldr	r3, [r4, #28]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800707a:	b9b8      	cbnz	r0, 80070ac <_Balloc+0x68>
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f605 	lsl.w	r6, r1, r5
 8007082:	1d72      	adds	r2, r6, #5
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fdb4 	bl	8007bf4 <_calloc_r>
 800708c:	b160      	cbz	r0, 80070a8 <_Balloc+0x64>
 800708e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007092:	e00e      	b.n	80070b2 <_Balloc+0x6e>
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	2104      	movs	r1, #4
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fdab 	bl	8007bf4 <_calloc_r>
 800709e:	69e3      	ldr	r3, [r4, #28]
 80070a0:	60f0      	str	r0, [r6, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e4      	bne.n	8007072 <_Balloc+0x2e>
 80070a8:	2000      	movs	r0, #0
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	6802      	ldr	r2, [r0, #0]
 80070ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070b2:	2300      	movs	r3, #0
 80070b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070b8:	e7f7      	b.n	80070aa <_Balloc+0x66>
 80070ba:	bf00      	nop
 80070bc:	080082f9 	.word	0x080082f9
 80070c0:	08008379 	.word	0x08008379

080070c4 <_Bfree>:
 80070c4:	b570      	push	{r4, r5, r6, lr}
 80070c6:	69c6      	ldr	r6, [r0, #28]
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b976      	cbnz	r6, 80070ec <_Bfree+0x28>
 80070ce:	2010      	movs	r0, #16
 80070d0:	f7ff ff04 	bl	8006edc <malloc>
 80070d4:	4602      	mov	r2, r0
 80070d6:	61e8      	str	r0, [r5, #28]
 80070d8:	b920      	cbnz	r0, 80070e4 <_Bfree+0x20>
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <_Bfree+0x3c>)
 80070dc:	4809      	ldr	r0, [pc, #36]	; (8007104 <_Bfree+0x40>)
 80070de:	218f      	movs	r1, #143	; 0x8f
 80070e0:	f000 fd6a 	bl	8007bb8 <__assert_func>
 80070e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e8:	6006      	str	r6, [r0, #0]
 80070ea:	60c6      	str	r6, [r0, #12]
 80070ec:	b13c      	cbz	r4, 80070fe <_Bfree+0x3a>
 80070ee:	69eb      	ldr	r3, [r5, #28]
 80070f0:	6862      	ldr	r2, [r4, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f8:	6021      	str	r1, [r4, #0]
 80070fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	080082f9 	.word	0x080082f9
 8007104:	08008379 	.word	0x08008379

08007108 <__multadd>:
 8007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710c:	690d      	ldr	r5, [r1, #16]
 800710e:	4607      	mov	r7, r0
 8007110:	460c      	mov	r4, r1
 8007112:	461e      	mov	r6, r3
 8007114:	f101 0c14 	add.w	ip, r1, #20
 8007118:	2000      	movs	r0, #0
 800711a:	f8dc 3000 	ldr.w	r3, [ip]
 800711e:	b299      	uxth	r1, r3
 8007120:	fb02 6101 	mla	r1, r2, r1, r6
 8007124:	0c1e      	lsrs	r6, r3, #16
 8007126:	0c0b      	lsrs	r3, r1, #16
 8007128:	fb02 3306 	mla	r3, r2, r6, r3
 800712c:	b289      	uxth	r1, r1
 800712e:	3001      	adds	r0, #1
 8007130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007134:	4285      	cmp	r5, r0
 8007136:	f84c 1b04 	str.w	r1, [ip], #4
 800713a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800713e:	dcec      	bgt.n	800711a <__multadd+0x12>
 8007140:	b30e      	cbz	r6, 8007186 <__multadd+0x7e>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	42ab      	cmp	r3, r5
 8007146:	dc19      	bgt.n	800717c <__multadd+0x74>
 8007148:	6861      	ldr	r1, [r4, #4]
 800714a:	4638      	mov	r0, r7
 800714c:	3101      	adds	r1, #1
 800714e:	f7ff ff79 	bl	8007044 <_Balloc>
 8007152:	4680      	mov	r8, r0
 8007154:	b928      	cbnz	r0, 8007162 <__multadd+0x5a>
 8007156:	4602      	mov	r2, r0
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <__multadd+0x84>)
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <__multadd+0x88>)
 800715c:	21ba      	movs	r1, #186	; 0xba
 800715e:	f000 fd2b 	bl	8007bb8 <__assert_func>
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	f104 010c 	add.w	r1, r4, #12
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f000 fd15 	bl	8007b9c <memcpy>
 8007172:	4621      	mov	r1, r4
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff ffa5 	bl	80070c4 <_Bfree>
 800717a:	4644      	mov	r4, r8
 800717c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007180:	3501      	adds	r5, #1
 8007182:	615e      	str	r6, [r3, #20]
 8007184:	6125      	str	r5, [r4, #16]
 8007186:	4620      	mov	r0, r4
 8007188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718c:	08008368 	.word	0x08008368
 8007190:	08008379 	.word	0x08008379

08007194 <__hi0bits>:
 8007194:	0c03      	lsrs	r3, r0, #16
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	b9d3      	cbnz	r3, 80071d0 <__hi0bits+0x3c>
 800719a:	0400      	lsls	r0, r0, #16
 800719c:	2310      	movs	r3, #16
 800719e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071a2:	bf04      	itt	eq
 80071a4:	0200      	lsleq	r0, r0, #8
 80071a6:	3308      	addeq	r3, #8
 80071a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071ac:	bf04      	itt	eq
 80071ae:	0100      	lsleq	r0, r0, #4
 80071b0:	3304      	addeq	r3, #4
 80071b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071b6:	bf04      	itt	eq
 80071b8:	0080      	lsleq	r0, r0, #2
 80071ba:	3302      	addeq	r3, #2
 80071bc:	2800      	cmp	r0, #0
 80071be:	db05      	blt.n	80071cc <__hi0bits+0x38>
 80071c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071c4:	f103 0301 	add.w	r3, r3, #1
 80071c8:	bf08      	it	eq
 80071ca:	2320      	moveq	r3, #32
 80071cc:	4618      	mov	r0, r3
 80071ce:	4770      	bx	lr
 80071d0:	2300      	movs	r3, #0
 80071d2:	e7e4      	b.n	800719e <__hi0bits+0xa>

080071d4 <__lo0bits>:
 80071d4:	6803      	ldr	r3, [r0, #0]
 80071d6:	f013 0207 	ands.w	r2, r3, #7
 80071da:	d00c      	beq.n	80071f6 <__lo0bits+0x22>
 80071dc:	07d9      	lsls	r1, r3, #31
 80071de:	d422      	bmi.n	8007226 <__lo0bits+0x52>
 80071e0:	079a      	lsls	r2, r3, #30
 80071e2:	bf49      	itett	mi
 80071e4:	085b      	lsrmi	r3, r3, #1
 80071e6:	089b      	lsrpl	r3, r3, #2
 80071e8:	6003      	strmi	r3, [r0, #0]
 80071ea:	2201      	movmi	r2, #1
 80071ec:	bf5c      	itt	pl
 80071ee:	6003      	strpl	r3, [r0, #0]
 80071f0:	2202      	movpl	r2, #2
 80071f2:	4610      	mov	r0, r2
 80071f4:	4770      	bx	lr
 80071f6:	b299      	uxth	r1, r3
 80071f8:	b909      	cbnz	r1, 80071fe <__lo0bits+0x2a>
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	2210      	movs	r2, #16
 80071fe:	b2d9      	uxtb	r1, r3
 8007200:	b909      	cbnz	r1, 8007206 <__lo0bits+0x32>
 8007202:	3208      	adds	r2, #8
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	0719      	lsls	r1, r3, #28
 8007208:	bf04      	itt	eq
 800720a:	091b      	lsreq	r3, r3, #4
 800720c:	3204      	addeq	r2, #4
 800720e:	0799      	lsls	r1, r3, #30
 8007210:	bf04      	itt	eq
 8007212:	089b      	lsreq	r3, r3, #2
 8007214:	3202      	addeq	r2, #2
 8007216:	07d9      	lsls	r1, r3, #31
 8007218:	d403      	bmi.n	8007222 <__lo0bits+0x4e>
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	f102 0201 	add.w	r2, r2, #1
 8007220:	d003      	beq.n	800722a <__lo0bits+0x56>
 8007222:	6003      	str	r3, [r0, #0]
 8007224:	e7e5      	b.n	80071f2 <__lo0bits+0x1e>
 8007226:	2200      	movs	r2, #0
 8007228:	e7e3      	b.n	80071f2 <__lo0bits+0x1e>
 800722a:	2220      	movs	r2, #32
 800722c:	e7e1      	b.n	80071f2 <__lo0bits+0x1e>
	...

08007230 <__i2b>:
 8007230:	b510      	push	{r4, lr}
 8007232:	460c      	mov	r4, r1
 8007234:	2101      	movs	r1, #1
 8007236:	f7ff ff05 	bl	8007044 <_Balloc>
 800723a:	4602      	mov	r2, r0
 800723c:	b928      	cbnz	r0, 800724a <__i2b+0x1a>
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <__i2b+0x24>)
 8007240:	4805      	ldr	r0, [pc, #20]	; (8007258 <__i2b+0x28>)
 8007242:	f240 1145 	movw	r1, #325	; 0x145
 8007246:	f000 fcb7 	bl	8007bb8 <__assert_func>
 800724a:	2301      	movs	r3, #1
 800724c:	6144      	str	r4, [r0, #20]
 800724e:	6103      	str	r3, [r0, #16]
 8007250:	bd10      	pop	{r4, pc}
 8007252:	bf00      	nop
 8007254:	08008368 	.word	0x08008368
 8007258:	08008379 	.word	0x08008379

0800725c <__multiply>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	4691      	mov	r9, r2
 8007262:	690a      	ldr	r2, [r1, #16]
 8007264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	bfb8      	it	lt
 800726c:	460b      	movlt	r3, r1
 800726e:	460c      	mov	r4, r1
 8007270:	bfbc      	itt	lt
 8007272:	464c      	movlt	r4, r9
 8007274:	4699      	movlt	r9, r3
 8007276:	6927      	ldr	r7, [r4, #16]
 8007278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	6861      	ldr	r1, [r4, #4]
 8007280:	eb07 060a 	add.w	r6, r7, sl
 8007284:	42b3      	cmp	r3, r6
 8007286:	b085      	sub	sp, #20
 8007288:	bfb8      	it	lt
 800728a:	3101      	addlt	r1, #1
 800728c:	f7ff feda 	bl	8007044 <_Balloc>
 8007290:	b930      	cbnz	r0, 80072a0 <__multiply+0x44>
 8007292:	4602      	mov	r2, r0
 8007294:	4b44      	ldr	r3, [pc, #272]	; (80073a8 <__multiply+0x14c>)
 8007296:	4845      	ldr	r0, [pc, #276]	; (80073ac <__multiply+0x150>)
 8007298:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800729c:	f000 fc8c 	bl	8007bb8 <__assert_func>
 80072a0:	f100 0514 	add.w	r5, r0, #20
 80072a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072a8:	462b      	mov	r3, r5
 80072aa:	2200      	movs	r2, #0
 80072ac:	4543      	cmp	r3, r8
 80072ae:	d321      	bcc.n	80072f4 <__multiply+0x98>
 80072b0:	f104 0314 	add.w	r3, r4, #20
 80072b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072b8:	f109 0314 	add.w	r3, r9, #20
 80072bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072c0:	9202      	str	r2, [sp, #8]
 80072c2:	1b3a      	subs	r2, r7, r4
 80072c4:	3a15      	subs	r2, #21
 80072c6:	f022 0203 	bic.w	r2, r2, #3
 80072ca:	3204      	adds	r2, #4
 80072cc:	f104 0115 	add.w	r1, r4, #21
 80072d0:	428f      	cmp	r7, r1
 80072d2:	bf38      	it	cc
 80072d4:	2204      	movcc	r2, #4
 80072d6:	9201      	str	r2, [sp, #4]
 80072d8:	9a02      	ldr	r2, [sp, #8]
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d80c      	bhi.n	80072fa <__multiply+0x9e>
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	dd03      	ble.n	80072ec <__multiply+0x90>
 80072e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d05b      	beq.n	80073a4 <__multiply+0x148>
 80072ec:	6106      	str	r6, [r0, #16]
 80072ee:	b005      	add	sp, #20
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	f843 2b04 	str.w	r2, [r3], #4
 80072f8:	e7d8      	b.n	80072ac <__multiply+0x50>
 80072fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80072fe:	f1ba 0f00 	cmp.w	sl, #0
 8007302:	d024      	beq.n	800734e <__multiply+0xf2>
 8007304:	f104 0e14 	add.w	lr, r4, #20
 8007308:	46a9      	mov	r9, r5
 800730a:	f04f 0c00 	mov.w	ip, #0
 800730e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007312:	f8d9 1000 	ldr.w	r1, [r9]
 8007316:	fa1f fb82 	uxth.w	fp, r2
 800731a:	b289      	uxth	r1, r1
 800731c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007324:	f8d9 2000 	ldr.w	r2, [r9]
 8007328:	4461      	add	r1, ip
 800732a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800732e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007336:	b289      	uxth	r1, r1
 8007338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800733c:	4577      	cmp	r7, lr
 800733e:	f849 1b04 	str.w	r1, [r9], #4
 8007342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007346:	d8e2      	bhi.n	800730e <__multiply+0xb2>
 8007348:	9a01      	ldr	r2, [sp, #4]
 800734a:	f845 c002 	str.w	ip, [r5, r2]
 800734e:	9a03      	ldr	r2, [sp, #12]
 8007350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007354:	3304      	adds	r3, #4
 8007356:	f1b9 0f00 	cmp.w	r9, #0
 800735a:	d021      	beq.n	80073a0 <__multiply+0x144>
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	f104 0c14 	add.w	ip, r4, #20
 8007362:	46ae      	mov	lr, r5
 8007364:	f04f 0a00 	mov.w	sl, #0
 8007368:	f8bc b000 	ldrh.w	fp, [ip]
 800736c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007370:	fb09 220b 	mla	r2, r9, fp, r2
 8007374:	4452      	add	r2, sl
 8007376:	b289      	uxth	r1, r1
 8007378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800737c:	f84e 1b04 	str.w	r1, [lr], #4
 8007380:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007388:	f8be 1000 	ldrh.w	r1, [lr]
 800738c:	fb09 110a 	mla	r1, r9, sl, r1
 8007390:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007394:	4567      	cmp	r7, ip
 8007396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800739a:	d8e5      	bhi.n	8007368 <__multiply+0x10c>
 800739c:	9a01      	ldr	r2, [sp, #4]
 800739e:	50a9      	str	r1, [r5, r2]
 80073a0:	3504      	adds	r5, #4
 80073a2:	e799      	b.n	80072d8 <__multiply+0x7c>
 80073a4:	3e01      	subs	r6, #1
 80073a6:	e79b      	b.n	80072e0 <__multiply+0x84>
 80073a8:	08008368 	.word	0x08008368
 80073ac:	08008379 	.word	0x08008379

080073b0 <__pow5mult>:
 80073b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	4615      	mov	r5, r2
 80073b6:	f012 0203 	ands.w	r2, r2, #3
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	d007      	beq.n	80073d0 <__pow5mult+0x20>
 80073c0:	4c25      	ldr	r4, [pc, #148]	; (8007458 <__pow5mult+0xa8>)
 80073c2:	3a01      	subs	r2, #1
 80073c4:	2300      	movs	r3, #0
 80073c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ca:	f7ff fe9d 	bl	8007108 <__multadd>
 80073ce:	4607      	mov	r7, r0
 80073d0:	10ad      	asrs	r5, r5, #2
 80073d2:	d03d      	beq.n	8007450 <__pow5mult+0xa0>
 80073d4:	69f4      	ldr	r4, [r6, #28]
 80073d6:	b97c      	cbnz	r4, 80073f8 <__pow5mult+0x48>
 80073d8:	2010      	movs	r0, #16
 80073da:	f7ff fd7f 	bl	8006edc <malloc>
 80073de:	4602      	mov	r2, r0
 80073e0:	61f0      	str	r0, [r6, #28]
 80073e2:	b928      	cbnz	r0, 80073f0 <__pow5mult+0x40>
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <__pow5mult+0xac>)
 80073e6:	481e      	ldr	r0, [pc, #120]	; (8007460 <__pow5mult+0xb0>)
 80073e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80073ec:	f000 fbe4 	bl	8007bb8 <__assert_func>
 80073f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073f4:	6004      	str	r4, [r0, #0]
 80073f6:	60c4      	str	r4, [r0, #12]
 80073f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007400:	b94c      	cbnz	r4, 8007416 <__pow5mult+0x66>
 8007402:	f240 2171 	movw	r1, #625	; 0x271
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ff12 	bl	8007230 <__i2b>
 800740c:	2300      	movs	r3, #0
 800740e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007412:	4604      	mov	r4, r0
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	f04f 0900 	mov.w	r9, #0
 800741a:	07eb      	lsls	r3, r5, #31
 800741c:	d50a      	bpl.n	8007434 <__pow5mult+0x84>
 800741e:	4639      	mov	r1, r7
 8007420:	4622      	mov	r2, r4
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ff1a 	bl	800725c <__multiply>
 8007428:	4639      	mov	r1, r7
 800742a:	4680      	mov	r8, r0
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff fe49 	bl	80070c4 <_Bfree>
 8007432:	4647      	mov	r7, r8
 8007434:	106d      	asrs	r5, r5, #1
 8007436:	d00b      	beq.n	8007450 <__pow5mult+0xa0>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	b938      	cbnz	r0, 800744c <__pow5mult+0x9c>
 800743c:	4622      	mov	r2, r4
 800743e:	4621      	mov	r1, r4
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff ff0b 	bl	800725c <__multiply>
 8007446:	6020      	str	r0, [r4, #0]
 8007448:	f8c0 9000 	str.w	r9, [r0]
 800744c:	4604      	mov	r4, r0
 800744e:	e7e4      	b.n	800741a <__pow5mult+0x6a>
 8007450:	4638      	mov	r0, r7
 8007452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007456:	bf00      	nop
 8007458:	080084c8 	.word	0x080084c8
 800745c:	080082f9 	.word	0x080082f9
 8007460:	08008379 	.word	0x08008379

08007464 <__lshift>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	460c      	mov	r4, r1
 800746a:	6849      	ldr	r1, [r1, #4]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	4607      	mov	r7, r0
 8007476:	4691      	mov	r9, r2
 8007478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800747c:	f108 0601 	add.w	r6, r8, #1
 8007480:	42b3      	cmp	r3, r6
 8007482:	db0b      	blt.n	800749c <__lshift+0x38>
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff fddd 	bl	8007044 <_Balloc>
 800748a:	4605      	mov	r5, r0
 800748c:	b948      	cbnz	r0, 80074a2 <__lshift+0x3e>
 800748e:	4602      	mov	r2, r0
 8007490:	4b28      	ldr	r3, [pc, #160]	; (8007534 <__lshift+0xd0>)
 8007492:	4829      	ldr	r0, [pc, #164]	; (8007538 <__lshift+0xd4>)
 8007494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007498:	f000 fb8e 	bl	8007bb8 <__assert_func>
 800749c:	3101      	adds	r1, #1
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	e7ee      	b.n	8007480 <__lshift+0x1c>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f100 0114 	add.w	r1, r0, #20
 80074a8:	f100 0210 	add.w	r2, r0, #16
 80074ac:	4618      	mov	r0, r3
 80074ae:	4553      	cmp	r3, sl
 80074b0:	db33      	blt.n	800751a <__lshift+0xb6>
 80074b2:	6920      	ldr	r0, [r4, #16]
 80074b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b8:	f104 0314 	add.w	r3, r4, #20
 80074bc:	f019 091f 	ands.w	r9, r9, #31
 80074c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074c8:	d02b      	beq.n	8007522 <__lshift+0xbe>
 80074ca:	f1c9 0e20 	rsb	lr, r9, #32
 80074ce:	468a      	mov	sl, r1
 80074d0:	2200      	movs	r2, #0
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	fa00 f009 	lsl.w	r0, r0, r9
 80074d8:	4310      	orrs	r0, r2
 80074da:	f84a 0b04 	str.w	r0, [sl], #4
 80074de:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e2:	459c      	cmp	ip, r3
 80074e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80074e8:	d8f3      	bhi.n	80074d2 <__lshift+0x6e>
 80074ea:	ebac 0304 	sub.w	r3, ip, r4
 80074ee:	3b15      	subs	r3, #21
 80074f0:	f023 0303 	bic.w	r3, r3, #3
 80074f4:	3304      	adds	r3, #4
 80074f6:	f104 0015 	add.w	r0, r4, #21
 80074fa:	4584      	cmp	ip, r0
 80074fc:	bf38      	it	cc
 80074fe:	2304      	movcc	r3, #4
 8007500:	50ca      	str	r2, [r1, r3]
 8007502:	b10a      	cbz	r2, 8007508 <__lshift+0xa4>
 8007504:	f108 0602 	add.w	r6, r8, #2
 8007508:	3e01      	subs	r6, #1
 800750a:	4638      	mov	r0, r7
 800750c:	612e      	str	r6, [r5, #16]
 800750e:	4621      	mov	r1, r4
 8007510:	f7ff fdd8 	bl	80070c4 <_Bfree>
 8007514:	4628      	mov	r0, r5
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	f842 0f04 	str.w	r0, [r2, #4]!
 800751e:	3301      	adds	r3, #1
 8007520:	e7c5      	b.n	80074ae <__lshift+0x4a>
 8007522:	3904      	subs	r1, #4
 8007524:	f853 2b04 	ldr.w	r2, [r3], #4
 8007528:	f841 2f04 	str.w	r2, [r1, #4]!
 800752c:	459c      	cmp	ip, r3
 800752e:	d8f9      	bhi.n	8007524 <__lshift+0xc0>
 8007530:	e7ea      	b.n	8007508 <__lshift+0xa4>
 8007532:	bf00      	nop
 8007534:	08008368 	.word	0x08008368
 8007538:	08008379 	.word	0x08008379

0800753c <__mcmp>:
 800753c:	b530      	push	{r4, r5, lr}
 800753e:	6902      	ldr	r2, [r0, #16]
 8007540:	690c      	ldr	r4, [r1, #16]
 8007542:	1b12      	subs	r2, r2, r4
 8007544:	d10e      	bne.n	8007564 <__mcmp+0x28>
 8007546:	f100 0314 	add.w	r3, r0, #20
 800754a:	3114      	adds	r1, #20
 800754c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800755c:	42a5      	cmp	r5, r4
 800755e:	d003      	beq.n	8007568 <__mcmp+0x2c>
 8007560:	d305      	bcc.n	800756e <__mcmp+0x32>
 8007562:	2201      	movs	r2, #1
 8007564:	4610      	mov	r0, r2
 8007566:	bd30      	pop	{r4, r5, pc}
 8007568:	4283      	cmp	r3, r0
 800756a:	d3f3      	bcc.n	8007554 <__mcmp+0x18>
 800756c:	e7fa      	b.n	8007564 <__mcmp+0x28>
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	e7f7      	b.n	8007564 <__mcmp+0x28>

08007574 <__mdiff>:
 8007574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	4606      	mov	r6, r0
 800757c:	4611      	mov	r1, r2
 800757e:	4620      	mov	r0, r4
 8007580:	4690      	mov	r8, r2
 8007582:	f7ff ffdb 	bl	800753c <__mcmp>
 8007586:	1e05      	subs	r5, r0, #0
 8007588:	d110      	bne.n	80075ac <__mdiff+0x38>
 800758a:	4629      	mov	r1, r5
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fd59 	bl	8007044 <_Balloc>
 8007592:	b930      	cbnz	r0, 80075a2 <__mdiff+0x2e>
 8007594:	4b3a      	ldr	r3, [pc, #232]	; (8007680 <__mdiff+0x10c>)
 8007596:	4602      	mov	r2, r0
 8007598:	f240 2137 	movw	r1, #567	; 0x237
 800759c:	4839      	ldr	r0, [pc, #228]	; (8007684 <__mdiff+0x110>)
 800759e:	f000 fb0b 	bl	8007bb8 <__assert_func>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ac:	bfa4      	itt	ge
 80075ae:	4643      	movge	r3, r8
 80075b0:	46a0      	movge	r8, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075b8:	bfa6      	itte	ge
 80075ba:	461c      	movge	r4, r3
 80075bc:	2500      	movge	r5, #0
 80075be:	2501      	movlt	r5, #1
 80075c0:	f7ff fd40 	bl	8007044 <_Balloc>
 80075c4:	b920      	cbnz	r0, 80075d0 <__mdiff+0x5c>
 80075c6:	4b2e      	ldr	r3, [pc, #184]	; (8007680 <__mdiff+0x10c>)
 80075c8:	4602      	mov	r2, r0
 80075ca:	f240 2145 	movw	r1, #581	; 0x245
 80075ce:	e7e5      	b.n	800759c <__mdiff+0x28>
 80075d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075d4:	6926      	ldr	r6, [r4, #16]
 80075d6:	60c5      	str	r5, [r0, #12]
 80075d8:	f104 0914 	add.w	r9, r4, #20
 80075dc:	f108 0514 	add.w	r5, r8, #20
 80075e0:	f100 0e14 	add.w	lr, r0, #20
 80075e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075ec:	f108 0210 	add.w	r2, r8, #16
 80075f0:	46f2      	mov	sl, lr
 80075f2:	2100      	movs	r1, #0
 80075f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80075f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075fc:	fa11 f88b 	uxtah	r8, r1, fp
 8007600:	b299      	uxth	r1, r3
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	eba8 0801 	sub.w	r8, r8, r1
 8007608:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800760c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007610:	fa1f f888 	uxth.w	r8, r8
 8007614:	1419      	asrs	r1, r3, #16
 8007616:	454e      	cmp	r6, r9
 8007618:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800761c:	f84a 3b04 	str.w	r3, [sl], #4
 8007620:	d8e8      	bhi.n	80075f4 <__mdiff+0x80>
 8007622:	1b33      	subs	r3, r6, r4
 8007624:	3b15      	subs	r3, #21
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	3304      	adds	r3, #4
 800762c:	3415      	adds	r4, #21
 800762e:	42a6      	cmp	r6, r4
 8007630:	bf38      	it	cc
 8007632:	2304      	movcc	r3, #4
 8007634:	441d      	add	r5, r3
 8007636:	4473      	add	r3, lr
 8007638:	469e      	mov	lr, r3
 800763a:	462e      	mov	r6, r5
 800763c:	4566      	cmp	r6, ip
 800763e:	d30e      	bcc.n	800765e <__mdiff+0xea>
 8007640:	f10c 0203 	add.w	r2, ip, #3
 8007644:	1b52      	subs	r2, r2, r5
 8007646:	f022 0203 	bic.w	r2, r2, #3
 800764a:	3d03      	subs	r5, #3
 800764c:	45ac      	cmp	ip, r5
 800764e:	bf38      	it	cc
 8007650:	2200      	movcc	r2, #0
 8007652:	4413      	add	r3, r2
 8007654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007658:	b17a      	cbz	r2, 800767a <__mdiff+0x106>
 800765a:	6107      	str	r7, [r0, #16]
 800765c:	e7a4      	b.n	80075a8 <__mdiff+0x34>
 800765e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007662:	fa11 f288 	uxtah	r2, r1, r8
 8007666:	1414      	asrs	r4, r2, #16
 8007668:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800766c:	b292      	uxth	r2, r2
 800766e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007672:	f84e 2b04 	str.w	r2, [lr], #4
 8007676:	1421      	asrs	r1, r4, #16
 8007678:	e7e0      	b.n	800763c <__mdiff+0xc8>
 800767a:	3f01      	subs	r7, #1
 800767c:	e7ea      	b.n	8007654 <__mdiff+0xe0>
 800767e:	bf00      	nop
 8007680:	08008368 	.word	0x08008368
 8007684:	08008379 	.word	0x08008379

08007688 <__d2b>:
 8007688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800768c:	460f      	mov	r7, r1
 800768e:	2101      	movs	r1, #1
 8007690:	ec59 8b10 	vmov	r8, r9, d0
 8007694:	4616      	mov	r6, r2
 8007696:	f7ff fcd5 	bl	8007044 <_Balloc>
 800769a:	4604      	mov	r4, r0
 800769c:	b930      	cbnz	r0, 80076ac <__d2b+0x24>
 800769e:	4602      	mov	r2, r0
 80076a0:	4b24      	ldr	r3, [pc, #144]	; (8007734 <__d2b+0xac>)
 80076a2:	4825      	ldr	r0, [pc, #148]	; (8007738 <__d2b+0xb0>)
 80076a4:	f240 310f 	movw	r1, #783	; 0x30f
 80076a8:	f000 fa86 	bl	8007bb8 <__assert_func>
 80076ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076b4:	bb2d      	cbnz	r5, 8007702 <__d2b+0x7a>
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	f1b8 0300 	subs.w	r3, r8, #0
 80076bc:	d026      	beq.n	800770c <__d2b+0x84>
 80076be:	4668      	mov	r0, sp
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	f7ff fd87 	bl	80071d4 <__lo0bits>
 80076c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076ca:	b1e8      	cbz	r0, 8007708 <__d2b+0x80>
 80076cc:	f1c0 0320 	rsb	r3, r0, #32
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	430b      	orrs	r3, r1
 80076d6:	40c2      	lsrs	r2, r0
 80076d8:	6163      	str	r3, [r4, #20]
 80076da:	9201      	str	r2, [sp, #4]
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	61a3      	str	r3, [r4, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bf14      	ite	ne
 80076e4:	2202      	movne	r2, #2
 80076e6:	2201      	moveq	r2, #1
 80076e8:	6122      	str	r2, [r4, #16]
 80076ea:	b1bd      	cbz	r5, 800771c <__d2b+0x94>
 80076ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076f0:	4405      	add	r5, r0
 80076f2:	603d      	str	r5, [r7, #0]
 80076f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076f8:	6030      	str	r0, [r6, #0]
 80076fa:	4620      	mov	r0, r4
 80076fc:	b003      	add	sp, #12
 80076fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007706:	e7d6      	b.n	80076b6 <__d2b+0x2e>
 8007708:	6161      	str	r1, [r4, #20]
 800770a:	e7e7      	b.n	80076dc <__d2b+0x54>
 800770c:	a801      	add	r0, sp, #4
 800770e:	f7ff fd61 	bl	80071d4 <__lo0bits>
 8007712:	9b01      	ldr	r3, [sp, #4]
 8007714:	6163      	str	r3, [r4, #20]
 8007716:	3020      	adds	r0, #32
 8007718:	2201      	movs	r2, #1
 800771a:	e7e5      	b.n	80076e8 <__d2b+0x60>
 800771c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007724:	6038      	str	r0, [r7, #0]
 8007726:	6918      	ldr	r0, [r3, #16]
 8007728:	f7ff fd34 	bl	8007194 <__hi0bits>
 800772c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007730:	e7e2      	b.n	80076f8 <__d2b+0x70>
 8007732:	bf00      	nop
 8007734:	08008368 	.word	0x08008368
 8007738:	08008379 	.word	0x08008379

0800773c <__ssputs_r>:
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	688e      	ldr	r6, [r1, #8]
 8007742:	461f      	mov	r7, r3
 8007744:	42be      	cmp	r6, r7
 8007746:	680b      	ldr	r3, [r1, #0]
 8007748:	4682      	mov	sl, r0
 800774a:	460c      	mov	r4, r1
 800774c:	4690      	mov	r8, r2
 800774e:	d82c      	bhi.n	80077aa <__ssputs_r+0x6e>
 8007750:	898a      	ldrh	r2, [r1, #12]
 8007752:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007756:	d026      	beq.n	80077a6 <__ssputs_r+0x6a>
 8007758:	6965      	ldr	r5, [r4, #20]
 800775a:	6909      	ldr	r1, [r1, #16]
 800775c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007760:	eba3 0901 	sub.w	r9, r3, r1
 8007764:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007768:	1c7b      	adds	r3, r7, #1
 800776a:	444b      	add	r3, r9
 800776c:	106d      	asrs	r5, r5, #1
 800776e:	429d      	cmp	r5, r3
 8007770:	bf38      	it	cc
 8007772:	461d      	movcc	r5, r3
 8007774:	0553      	lsls	r3, r2, #21
 8007776:	d527      	bpl.n	80077c8 <__ssputs_r+0x8c>
 8007778:	4629      	mov	r1, r5
 800777a:	f7ff fbd7 	bl	8006f2c <_malloc_r>
 800777e:	4606      	mov	r6, r0
 8007780:	b360      	cbz	r0, 80077dc <__ssputs_r+0xa0>
 8007782:	6921      	ldr	r1, [r4, #16]
 8007784:	464a      	mov	r2, r9
 8007786:	f000 fa09 	bl	8007b9c <memcpy>
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	6126      	str	r6, [r4, #16]
 8007798:	6165      	str	r5, [r4, #20]
 800779a:	444e      	add	r6, r9
 800779c:	eba5 0509 	sub.w	r5, r5, r9
 80077a0:	6026      	str	r6, [r4, #0]
 80077a2:	60a5      	str	r5, [r4, #8]
 80077a4:	463e      	mov	r6, r7
 80077a6:	42be      	cmp	r6, r7
 80077a8:	d900      	bls.n	80077ac <__ssputs_r+0x70>
 80077aa:	463e      	mov	r6, r7
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	4632      	mov	r2, r6
 80077b0:	4641      	mov	r1, r8
 80077b2:	f000 f9c9 	bl	8007b48 <memmove>
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	1b9b      	subs	r3, r3, r6
 80077ba:	60a3      	str	r3, [r4, #8]
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	4433      	add	r3, r6
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	2000      	movs	r0, #0
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	462a      	mov	r2, r5
 80077ca:	f000 fa3b 	bl	8007c44 <_realloc_r>
 80077ce:	4606      	mov	r6, r0
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d1e0      	bne.n	8007796 <__ssputs_r+0x5a>
 80077d4:	6921      	ldr	r1, [r4, #16]
 80077d6:	4650      	mov	r0, sl
 80077d8:	f7ff fb34 	bl	8006e44 <_free_r>
 80077dc:	230c      	movs	r3, #12
 80077de:	f8ca 3000 	str.w	r3, [sl]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295
 80077ee:	e7e9      	b.n	80077c4 <__ssputs_r+0x88>

080077f0 <_svfiprintf_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	4698      	mov	r8, r3
 80077f6:	898b      	ldrh	r3, [r1, #12]
 80077f8:	061b      	lsls	r3, r3, #24
 80077fa:	b09d      	sub	sp, #116	; 0x74
 80077fc:	4607      	mov	r7, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	4614      	mov	r4, r2
 8007802:	d50e      	bpl.n	8007822 <_svfiprintf_r+0x32>
 8007804:	690b      	ldr	r3, [r1, #16]
 8007806:	b963      	cbnz	r3, 8007822 <_svfiprintf_r+0x32>
 8007808:	2140      	movs	r1, #64	; 0x40
 800780a:	f7ff fb8f 	bl	8006f2c <_malloc_r>
 800780e:	6028      	str	r0, [r5, #0]
 8007810:	6128      	str	r0, [r5, #16]
 8007812:	b920      	cbnz	r0, 800781e <_svfiprintf_r+0x2e>
 8007814:	230c      	movs	r3, #12
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e0d0      	b.n	80079c0 <_svfiprintf_r+0x1d0>
 800781e:	2340      	movs	r3, #64	; 0x40
 8007820:	616b      	str	r3, [r5, #20]
 8007822:	2300      	movs	r3, #0
 8007824:	9309      	str	r3, [sp, #36]	; 0x24
 8007826:	2320      	movs	r3, #32
 8007828:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800782c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007830:	2330      	movs	r3, #48	; 0x30
 8007832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80079d8 <_svfiprintf_r+0x1e8>
 8007836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800783a:	f04f 0901 	mov.w	r9, #1
 800783e:	4623      	mov	r3, r4
 8007840:	469a      	mov	sl, r3
 8007842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007846:	b10a      	cbz	r2, 800784c <_svfiprintf_r+0x5c>
 8007848:	2a25      	cmp	r2, #37	; 0x25
 800784a:	d1f9      	bne.n	8007840 <_svfiprintf_r+0x50>
 800784c:	ebba 0b04 	subs.w	fp, sl, r4
 8007850:	d00b      	beq.n	800786a <_svfiprintf_r+0x7a>
 8007852:	465b      	mov	r3, fp
 8007854:	4622      	mov	r2, r4
 8007856:	4629      	mov	r1, r5
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff ff6f 	bl	800773c <__ssputs_r>
 800785e:	3001      	adds	r0, #1
 8007860:	f000 80a9 	beq.w	80079b6 <_svfiprintf_r+0x1c6>
 8007864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007866:	445a      	add	r2, fp
 8007868:	9209      	str	r2, [sp, #36]	; 0x24
 800786a:	f89a 3000 	ldrb.w	r3, [sl]
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80a1 	beq.w	80079b6 <_svfiprintf_r+0x1c6>
 8007874:	2300      	movs	r3, #0
 8007876:	f04f 32ff 	mov.w	r2, #4294967295
 800787a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800787e:	f10a 0a01 	add.w	sl, sl, #1
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	9307      	str	r3, [sp, #28]
 8007886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800788a:	931a      	str	r3, [sp, #104]	; 0x68
 800788c:	4654      	mov	r4, sl
 800788e:	2205      	movs	r2, #5
 8007890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007894:	4850      	ldr	r0, [pc, #320]	; (80079d8 <_svfiprintf_r+0x1e8>)
 8007896:	f7f8 fc9b 	bl	80001d0 <memchr>
 800789a:	9a04      	ldr	r2, [sp, #16]
 800789c:	b9d8      	cbnz	r0, 80078d6 <_svfiprintf_r+0xe6>
 800789e:	06d0      	lsls	r0, r2, #27
 80078a0:	bf44      	itt	mi
 80078a2:	2320      	movmi	r3, #32
 80078a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078a8:	0711      	lsls	r1, r2, #28
 80078aa:	bf44      	itt	mi
 80078ac:	232b      	movmi	r3, #43	; 0x2b
 80078ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b2:	f89a 3000 	ldrb.w	r3, [sl]
 80078b6:	2b2a      	cmp	r3, #42	; 0x2a
 80078b8:	d015      	beq.n	80078e6 <_svfiprintf_r+0xf6>
 80078ba:	9a07      	ldr	r2, [sp, #28]
 80078bc:	4654      	mov	r4, sl
 80078be:	2000      	movs	r0, #0
 80078c0:	f04f 0c0a 	mov.w	ip, #10
 80078c4:	4621      	mov	r1, r4
 80078c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ca:	3b30      	subs	r3, #48	; 0x30
 80078cc:	2b09      	cmp	r3, #9
 80078ce:	d94d      	bls.n	800796c <_svfiprintf_r+0x17c>
 80078d0:	b1b0      	cbz	r0, 8007900 <_svfiprintf_r+0x110>
 80078d2:	9207      	str	r2, [sp, #28]
 80078d4:	e014      	b.n	8007900 <_svfiprintf_r+0x110>
 80078d6:	eba0 0308 	sub.w	r3, r0, r8
 80078da:	fa09 f303 	lsl.w	r3, r9, r3
 80078de:	4313      	orrs	r3, r2
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	46a2      	mov	sl, r4
 80078e4:	e7d2      	b.n	800788c <_svfiprintf_r+0x9c>
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	1d19      	adds	r1, r3, #4
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	9103      	str	r1, [sp, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfbb      	ittet	lt
 80078f2:	425b      	neglt	r3, r3
 80078f4:	f042 0202 	orrlt.w	r2, r2, #2
 80078f8:	9307      	strge	r3, [sp, #28]
 80078fa:	9307      	strlt	r3, [sp, #28]
 80078fc:	bfb8      	it	lt
 80078fe:	9204      	strlt	r2, [sp, #16]
 8007900:	7823      	ldrb	r3, [r4, #0]
 8007902:	2b2e      	cmp	r3, #46	; 0x2e
 8007904:	d10c      	bne.n	8007920 <_svfiprintf_r+0x130>
 8007906:	7863      	ldrb	r3, [r4, #1]
 8007908:	2b2a      	cmp	r3, #42	; 0x2a
 800790a:	d134      	bne.n	8007976 <_svfiprintf_r+0x186>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	9203      	str	r2, [sp, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	bfb8      	it	lt
 8007918:	f04f 33ff 	movlt.w	r3, #4294967295
 800791c:	3402      	adds	r4, #2
 800791e:	9305      	str	r3, [sp, #20]
 8007920:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079e8 <_svfiprintf_r+0x1f8>
 8007924:	7821      	ldrb	r1, [r4, #0]
 8007926:	2203      	movs	r2, #3
 8007928:	4650      	mov	r0, sl
 800792a:	f7f8 fc51 	bl	80001d0 <memchr>
 800792e:	b138      	cbz	r0, 8007940 <_svfiprintf_r+0x150>
 8007930:	9b04      	ldr	r3, [sp, #16]
 8007932:	eba0 000a 	sub.w	r0, r0, sl
 8007936:	2240      	movs	r2, #64	; 0x40
 8007938:	4082      	lsls	r2, r0
 800793a:	4313      	orrs	r3, r2
 800793c:	3401      	adds	r4, #1
 800793e:	9304      	str	r3, [sp, #16]
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	4825      	ldr	r0, [pc, #148]	; (80079dc <_svfiprintf_r+0x1ec>)
 8007946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794a:	2206      	movs	r2, #6
 800794c:	f7f8 fc40 	bl	80001d0 <memchr>
 8007950:	2800      	cmp	r0, #0
 8007952:	d038      	beq.n	80079c6 <_svfiprintf_r+0x1d6>
 8007954:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <_svfiprintf_r+0x1f0>)
 8007956:	bb1b      	cbnz	r3, 80079a0 <_svfiprintf_r+0x1b0>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	3307      	adds	r3, #7
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	3308      	adds	r3, #8
 8007962:	9303      	str	r3, [sp, #12]
 8007964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007966:	4433      	add	r3, r6
 8007968:	9309      	str	r3, [sp, #36]	; 0x24
 800796a:	e768      	b.n	800783e <_svfiprintf_r+0x4e>
 800796c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007970:	460c      	mov	r4, r1
 8007972:	2001      	movs	r0, #1
 8007974:	e7a6      	b.n	80078c4 <_svfiprintf_r+0xd4>
 8007976:	2300      	movs	r3, #0
 8007978:	3401      	adds	r4, #1
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	4619      	mov	r1, r3
 800797e:	f04f 0c0a 	mov.w	ip, #10
 8007982:	4620      	mov	r0, r4
 8007984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007988:	3a30      	subs	r2, #48	; 0x30
 800798a:	2a09      	cmp	r2, #9
 800798c:	d903      	bls.n	8007996 <_svfiprintf_r+0x1a6>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c6      	beq.n	8007920 <_svfiprintf_r+0x130>
 8007992:	9105      	str	r1, [sp, #20]
 8007994:	e7c4      	b.n	8007920 <_svfiprintf_r+0x130>
 8007996:	fb0c 2101 	mla	r1, ip, r1, r2
 800799a:	4604      	mov	r4, r0
 800799c:	2301      	movs	r3, #1
 800799e:	e7f0      	b.n	8007982 <_svfiprintf_r+0x192>
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	462a      	mov	r2, r5
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <_svfiprintf_r+0x1f4>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4638      	mov	r0, r7
 80079ac:	f7fd fe64 	bl	8005678 <_printf_float>
 80079b0:	1c42      	adds	r2, r0, #1
 80079b2:	4606      	mov	r6, r0
 80079b4:	d1d6      	bne.n	8007964 <_svfiprintf_r+0x174>
 80079b6:	89ab      	ldrh	r3, [r5, #12]
 80079b8:	065b      	lsls	r3, r3, #25
 80079ba:	f53f af2d 	bmi.w	8007818 <_svfiprintf_r+0x28>
 80079be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c0:	b01d      	add	sp, #116	; 0x74
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	462a      	mov	r2, r5
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <_svfiprintf_r+0x1f4>)
 80079ce:	a904      	add	r1, sp, #16
 80079d0:	4638      	mov	r0, r7
 80079d2:	f7fe f8f5 	bl	8005bc0 <_printf_i>
 80079d6:	e7eb      	b.n	80079b0 <_svfiprintf_r+0x1c0>
 80079d8:	080084d4 	.word	0x080084d4
 80079dc:	080084de 	.word	0x080084de
 80079e0:	08005679 	.word	0x08005679
 80079e4:	0800773d 	.word	0x0800773d
 80079e8:	080084da 	.word	0x080084da

080079ec <__sflush_r>:
 80079ec:	898a      	ldrh	r2, [r1, #12]
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	4605      	mov	r5, r0
 80079f4:	0710      	lsls	r0, r2, #28
 80079f6:	460c      	mov	r4, r1
 80079f8:	d458      	bmi.n	8007aac <__sflush_r+0xc0>
 80079fa:	684b      	ldr	r3, [r1, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dc05      	bgt.n	8007a0c <__sflush_r+0x20>
 8007a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dc02      	bgt.n	8007a0c <__sflush_r+0x20>
 8007a06:	2000      	movs	r0, #0
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	d0f9      	beq.n	8007a06 <__sflush_r+0x1a>
 8007a12:	2300      	movs	r3, #0
 8007a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a18:	682f      	ldr	r7, [r5, #0]
 8007a1a:	6a21      	ldr	r1, [r4, #32]
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	d032      	beq.n	8007a86 <__sflush_r+0x9a>
 8007a20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	075a      	lsls	r2, r3, #29
 8007a26:	d505      	bpl.n	8007a34 <__sflush_r+0x48>
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	1ac0      	subs	r0, r0, r3
 8007a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a2e:	b10b      	cbz	r3, 8007a34 <__sflush_r+0x48>
 8007a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a32:	1ac0      	subs	r0, r0, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	4602      	mov	r2, r0
 8007a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a3a:	6a21      	ldr	r1, [r4, #32]
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b0      	blx	r6
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	d106      	bne.n	8007a54 <__sflush_r+0x68>
 8007a46:	6829      	ldr	r1, [r5, #0]
 8007a48:	291d      	cmp	r1, #29
 8007a4a:	d82b      	bhi.n	8007aa4 <__sflush_r+0xb8>
 8007a4c:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <__sflush_r+0x108>)
 8007a4e:	410a      	asrs	r2, r1
 8007a50:	07d6      	lsls	r6, r2, #31
 8007a52:	d427      	bmi.n	8007aa4 <__sflush_r+0xb8>
 8007a54:	2200      	movs	r2, #0
 8007a56:	6062      	str	r2, [r4, #4]
 8007a58:	04d9      	lsls	r1, r3, #19
 8007a5a:	6922      	ldr	r2, [r4, #16]
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	d504      	bpl.n	8007a6a <__sflush_r+0x7e>
 8007a60:	1c42      	adds	r2, r0, #1
 8007a62:	d101      	bne.n	8007a68 <__sflush_r+0x7c>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b903      	cbnz	r3, 8007a6a <__sflush_r+0x7e>
 8007a68:	6560      	str	r0, [r4, #84]	; 0x54
 8007a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6c:	602f      	str	r7, [r5, #0]
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d0c9      	beq.n	8007a06 <__sflush_r+0x1a>
 8007a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a76:	4299      	cmp	r1, r3
 8007a78:	d002      	beq.n	8007a80 <__sflush_r+0x94>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f7ff f9e2 	bl	8006e44 <_free_r>
 8007a80:	2000      	movs	r0, #0
 8007a82:	6360      	str	r0, [r4, #52]	; 0x34
 8007a84:	e7c0      	b.n	8007a08 <__sflush_r+0x1c>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b0      	blx	r6
 8007a8c:	1c41      	adds	r1, r0, #1
 8007a8e:	d1c8      	bne.n	8007a22 <__sflush_r+0x36>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0c5      	beq.n	8007a22 <__sflush_r+0x36>
 8007a96:	2b1d      	cmp	r3, #29
 8007a98:	d001      	beq.n	8007a9e <__sflush_r+0xb2>
 8007a9a:	2b16      	cmp	r3, #22
 8007a9c:	d101      	bne.n	8007aa2 <__sflush_r+0xb6>
 8007a9e:	602f      	str	r7, [r5, #0]
 8007aa0:	e7b1      	b.n	8007a06 <__sflush_r+0x1a>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e7ad      	b.n	8007a08 <__sflush_r+0x1c>
 8007aac:	690f      	ldr	r7, [r1, #16]
 8007aae:	2f00      	cmp	r7, #0
 8007ab0:	d0a9      	beq.n	8007a06 <__sflush_r+0x1a>
 8007ab2:	0793      	lsls	r3, r2, #30
 8007ab4:	680e      	ldr	r6, [r1, #0]
 8007ab6:	bf08      	it	eq
 8007ab8:	694b      	ldreq	r3, [r1, #20]
 8007aba:	600f      	str	r7, [r1, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2300      	movne	r3, #0
 8007ac0:	eba6 0807 	sub.w	r8, r6, r7
 8007ac4:	608b      	str	r3, [r1, #8]
 8007ac6:	f1b8 0f00 	cmp.w	r8, #0
 8007aca:	dd9c      	ble.n	8007a06 <__sflush_r+0x1a>
 8007acc:	6a21      	ldr	r1, [r4, #32]
 8007ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ad0:	4643      	mov	r3, r8
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b0      	blx	r6
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	dc06      	bgt.n	8007aea <__sflush_r+0xfe>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae8:	e78e      	b.n	8007a08 <__sflush_r+0x1c>
 8007aea:	4407      	add	r7, r0
 8007aec:	eba8 0800 	sub.w	r8, r8, r0
 8007af0:	e7e9      	b.n	8007ac6 <__sflush_r+0xda>
 8007af2:	bf00      	nop
 8007af4:	dfbffffe 	.word	0xdfbffffe

08007af8 <_fflush_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	4605      	mov	r5, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	b913      	cbnz	r3, 8007b08 <_fflush_r+0x10>
 8007b02:	2500      	movs	r5, #0
 8007b04:	4628      	mov	r0, r5
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	b118      	cbz	r0, 8007b12 <_fflush_r+0x1a>
 8007b0a:	6a03      	ldr	r3, [r0, #32]
 8007b0c:	b90b      	cbnz	r3, 8007b12 <_fflush_r+0x1a>
 8007b0e:	f7fe fa05 	bl	8005f1c <__sinit>
 8007b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0f3      	beq.n	8007b02 <_fflush_r+0xa>
 8007b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b1c:	07d0      	lsls	r0, r2, #31
 8007b1e:	d404      	bmi.n	8007b2a <_fflush_r+0x32>
 8007b20:	0599      	lsls	r1, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_fflush_r+0x32>
 8007b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b26:	f7fe fb10 	bl	800614a <__retarget_lock_acquire_recursive>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	f7ff ff5d 	bl	80079ec <__sflush_r>
 8007b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b34:	07da      	lsls	r2, r3, #31
 8007b36:	4605      	mov	r5, r0
 8007b38:	d4e4      	bmi.n	8007b04 <_fflush_r+0xc>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	059b      	lsls	r3, r3, #22
 8007b3e:	d4e1      	bmi.n	8007b04 <_fflush_r+0xc>
 8007b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b42:	f7fe fb03 	bl	800614c <__retarget_lock_release_recursive>
 8007b46:	e7dd      	b.n	8007b04 <_fflush_r+0xc>

08007b48 <memmove>:
 8007b48:	4288      	cmp	r0, r1
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	eb01 0402 	add.w	r4, r1, r2
 8007b50:	d902      	bls.n	8007b58 <memmove+0x10>
 8007b52:	4284      	cmp	r4, r0
 8007b54:	4623      	mov	r3, r4
 8007b56:	d807      	bhi.n	8007b68 <memmove+0x20>
 8007b58:	1e43      	subs	r3, r0, #1
 8007b5a:	42a1      	cmp	r1, r4
 8007b5c:	d008      	beq.n	8007b70 <memmove+0x28>
 8007b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b66:	e7f8      	b.n	8007b5a <memmove+0x12>
 8007b68:	4402      	add	r2, r0
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	428a      	cmp	r2, r1
 8007b6e:	d100      	bne.n	8007b72 <memmove+0x2a>
 8007b70:	bd10      	pop	{r4, pc}
 8007b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b7a:	e7f7      	b.n	8007b6c <memmove+0x24>

08007b7c <_sbrk_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_sbrk_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f9 fcb6 	bl	80014f8 <_sbrk>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_sbrk_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_sbrk_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	2000049c 	.word	0x2000049c

08007b9c <memcpy>:
 8007b9c:	440a      	add	r2, r1
 8007b9e:	4291      	cmp	r1, r2
 8007ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba4:	d100      	bne.n	8007ba8 <memcpy+0xc>
 8007ba6:	4770      	bx	lr
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bb2:	4291      	cmp	r1, r2
 8007bb4:	d1f9      	bne.n	8007baa <memcpy+0xe>
 8007bb6:	bd10      	pop	{r4, pc}

08007bb8 <__assert_func>:
 8007bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bba:	4614      	mov	r4, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <__assert_func+0x2c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	68d8      	ldr	r0, [r3, #12]
 8007bc6:	b14c      	cbz	r4, 8007bdc <__assert_func+0x24>
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <__assert_func+0x30>)
 8007bca:	9100      	str	r1, [sp, #0]
 8007bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bd0:	4906      	ldr	r1, [pc, #24]	; (8007bec <__assert_func+0x34>)
 8007bd2:	462b      	mov	r3, r5
 8007bd4:	f000 f872 	bl	8007cbc <fiprintf>
 8007bd8:	f000 f882 	bl	8007ce0 <abort>
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <__assert_func+0x38>)
 8007bde:	461c      	mov	r4, r3
 8007be0:	e7f3      	b.n	8007bca <__assert_func+0x12>
 8007be2:	bf00      	nop
 8007be4:	20000064 	.word	0x20000064
 8007be8:	080084ef 	.word	0x080084ef
 8007bec:	080084fc 	.word	0x080084fc
 8007bf0:	0800852a 	.word	0x0800852a

08007bf4 <_calloc_r>:
 8007bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bf6:	fba1 2402 	umull	r2, r4, r1, r2
 8007bfa:	b94c      	cbnz	r4, 8007c10 <_calloc_r+0x1c>
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	9201      	str	r2, [sp, #4]
 8007c00:	f7ff f994 	bl	8006f2c <_malloc_r>
 8007c04:	9a01      	ldr	r2, [sp, #4]
 8007c06:	4605      	mov	r5, r0
 8007c08:	b930      	cbnz	r0, 8007c18 <_calloc_r+0x24>
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	220c      	movs	r2, #12
 8007c12:	6002      	str	r2, [r0, #0]
 8007c14:	2500      	movs	r5, #0
 8007c16:	e7f8      	b.n	8007c0a <_calloc_r+0x16>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7fe fa18 	bl	800604e <memset>
 8007c1e:	e7f4      	b.n	8007c0a <_calloc_r+0x16>

08007c20 <__ascii_mbtowc>:
 8007c20:	b082      	sub	sp, #8
 8007c22:	b901      	cbnz	r1, 8007c26 <__ascii_mbtowc+0x6>
 8007c24:	a901      	add	r1, sp, #4
 8007c26:	b142      	cbz	r2, 8007c3a <__ascii_mbtowc+0x1a>
 8007c28:	b14b      	cbz	r3, 8007c3e <__ascii_mbtowc+0x1e>
 8007c2a:	7813      	ldrb	r3, [r2, #0]
 8007c2c:	600b      	str	r3, [r1, #0]
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	1e10      	subs	r0, r2, #0
 8007c32:	bf18      	it	ne
 8007c34:	2001      	movne	r0, #1
 8007c36:	b002      	add	sp, #8
 8007c38:	4770      	bx	lr
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	e7fb      	b.n	8007c36 <__ascii_mbtowc+0x16>
 8007c3e:	f06f 0001 	mvn.w	r0, #1
 8007c42:	e7f8      	b.n	8007c36 <__ascii_mbtowc+0x16>

08007c44 <_realloc_r>:
 8007c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c48:	4680      	mov	r8, r0
 8007c4a:	4614      	mov	r4, r2
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	b921      	cbnz	r1, 8007c5a <_realloc_r+0x16>
 8007c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	4611      	mov	r1, r2
 8007c56:	f7ff b969 	b.w	8006f2c <_malloc_r>
 8007c5a:	b92a      	cbnz	r2, 8007c68 <_realloc_r+0x24>
 8007c5c:	f7ff f8f2 	bl	8006e44 <_free_r>
 8007c60:	4625      	mov	r5, r4
 8007c62:	4628      	mov	r0, r5
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c68:	f000 f841 	bl	8007cee <_malloc_usable_size_r>
 8007c6c:	4284      	cmp	r4, r0
 8007c6e:	4607      	mov	r7, r0
 8007c70:	d802      	bhi.n	8007c78 <_realloc_r+0x34>
 8007c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c76:	d812      	bhi.n	8007c9e <_realloc_r+0x5a>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff f956 	bl	8006f2c <_malloc_r>
 8007c80:	4605      	mov	r5, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d0ed      	beq.n	8007c62 <_realloc_r+0x1e>
 8007c86:	42bc      	cmp	r4, r7
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	bf28      	it	cs
 8007c8e:	463a      	movcs	r2, r7
 8007c90:	f7ff ff84 	bl	8007b9c <memcpy>
 8007c94:	4631      	mov	r1, r6
 8007c96:	4640      	mov	r0, r8
 8007c98:	f7ff f8d4 	bl	8006e44 <_free_r>
 8007c9c:	e7e1      	b.n	8007c62 <_realloc_r+0x1e>
 8007c9e:	4635      	mov	r5, r6
 8007ca0:	e7df      	b.n	8007c62 <_realloc_r+0x1e>

08007ca2 <__ascii_wctomb>:
 8007ca2:	b149      	cbz	r1, 8007cb8 <__ascii_wctomb+0x16>
 8007ca4:	2aff      	cmp	r2, #255	; 0xff
 8007ca6:	bf85      	ittet	hi
 8007ca8:	238a      	movhi	r3, #138	; 0x8a
 8007caa:	6003      	strhi	r3, [r0, #0]
 8007cac:	700a      	strbls	r2, [r1, #0]
 8007cae:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cb2:	bf98      	it	ls
 8007cb4:	2001      	movls	r0, #1
 8007cb6:	4770      	bx	lr
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4770      	bx	lr

08007cbc <fiprintf>:
 8007cbc:	b40e      	push	{r1, r2, r3}
 8007cbe:	b503      	push	{r0, r1, lr}
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <fiprintf+0x20>)
 8007cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	f000 f83f 	bl	8007d50 <_vfiprintf_r>
 8007cd2:	b002      	add	sp, #8
 8007cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd8:	b003      	add	sp, #12
 8007cda:	4770      	bx	lr
 8007cdc:	20000064 	.word	0x20000064

08007ce0 <abort>:
 8007ce0:	b508      	push	{r3, lr}
 8007ce2:	2006      	movs	r0, #6
 8007ce4:	f000 fa0c 	bl	8008100 <raise>
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7f9 fb8d 	bl	8001408 <_exit>

08007cee <_malloc_usable_size_r>:
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	1f18      	subs	r0, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfbc      	itt	lt
 8007cf8:	580b      	ldrlt	r3, [r1, r0]
 8007cfa:	18c0      	addlt	r0, r0, r3
 8007cfc:	4770      	bx	lr

08007cfe <__sfputc_r>:
 8007cfe:	6893      	ldr	r3, [r2, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	b410      	push	{r4}
 8007d06:	6093      	str	r3, [r2, #8]
 8007d08:	da08      	bge.n	8007d1c <__sfputc_r+0x1e>
 8007d0a:	6994      	ldr	r4, [r2, #24]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	db01      	blt.n	8007d14 <__sfputc_r+0x16>
 8007d10:	290a      	cmp	r1, #10
 8007d12:	d103      	bne.n	8007d1c <__sfputc_r+0x1e>
 8007d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d18:	f000 b934 	b.w	8007f84 <__swbuf_r>
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	1c58      	adds	r0, r3, #1
 8007d20:	6010      	str	r0, [r2, #0]
 8007d22:	7019      	strb	r1, [r3, #0]
 8007d24:	4608      	mov	r0, r1
 8007d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <__sfputs_r>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	4614      	mov	r4, r2
 8007d34:	18d5      	adds	r5, r2, r3
 8007d36:	42ac      	cmp	r4, r5
 8007d38:	d101      	bne.n	8007d3e <__sfputs_r+0x12>
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e007      	b.n	8007d4e <__sfputs_r+0x22>
 8007d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d42:	463a      	mov	r2, r7
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ffda 	bl	8007cfe <__sfputc_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d1f3      	bne.n	8007d36 <__sfputs_r+0xa>
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d50 <_vfiprintf_r>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	460d      	mov	r5, r1
 8007d56:	b09d      	sub	sp, #116	; 0x74
 8007d58:	4614      	mov	r4, r2
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	b118      	cbz	r0, 8007d68 <_vfiprintf_r+0x18>
 8007d60:	6a03      	ldr	r3, [r0, #32]
 8007d62:	b90b      	cbnz	r3, 8007d68 <_vfiprintf_r+0x18>
 8007d64:	f7fe f8da 	bl	8005f1c <__sinit>
 8007d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	d405      	bmi.n	8007d7a <_vfiprintf_r+0x2a>
 8007d6e:	89ab      	ldrh	r3, [r5, #12]
 8007d70:	059a      	lsls	r2, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_vfiprintf_r+0x2a>
 8007d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d76:	f7fe f9e8 	bl	800614a <__retarget_lock_acquire_recursive>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	071b      	lsls	r3, r3, #28
 8007d7e:	d501      	bpl.n	8007d84 <_vfiprintf_r+0x34>
 8007d80:	692b      	ldr	r3, [r5, #16]
 8007d82:	b99b      	cbnz	r3, 8007dac <_vfiprintf_r+0x5c>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 f93a 	bl	8008000 <__swsetup_r>
 8007d8c:	b170      	cbz	r0, 8007dac <_vfiprintf_r+0x5c>
 8007d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d90:	07dc      	lsls	r4, r3, #31
 8007d92:	d504      	bpl.n	8007d9e <_vfiprintf_r+0x4e>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b01d      	add	sp, #116	; 0x74
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	0598      	lsls	r0, r3, #22
 8007da2:	d4f7      	bmi.n	8007d94 <_vfiprintf_r+0x44>
 8007da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da6:	f7fe f9d1 	bl	800614c <__retarget_lock_release_recursive>
 8007daa:	e7f3      	b.n	8007d94 <_vfiprintf_r+0x44>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	2320      	movs	r3, #32
 8007db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dba:	2330      	movs	r3, #48	; 0x30
 8007dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f70 <_vfiprintf_r+0x220>
 8007dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc4:	f04f 0901 	mov.w	r9, #1
 8007dc8:	4623      	mov	r3, r4
 8007dca:	469a      	mov	sl, r3
 8007dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_vfiprintf_r+0x86>
 8007dd2:	2a25      	cmp	r2, #37	; 0x25
 8007dd4:	d1f9      	bne.n	8007dca <_vfiprintf_r+0x7a>
 8007dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dda:	d00b      	beq.n	8007df4 <_vfiprintf_r+0xa4>
 8007ddc:	465b      	mov	r3, fp
 8007dde:	4622      	mov	r2, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ffa2 	bl	8007d2c <__sfputs_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	f000 80a9 	beq.w	8007f40 <_vfiprintf_r+0x1f0>
 8007dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df0:	445a      	add	r2, fp
 8007df2:	9209      	str	r2, [sp, #36]	; 0x24
 8007df4:	f89a 3000 	ldrb.w	r3, [sl]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80a1 	beq.w	8007f40 <_vfiprintf_r+0x1f0>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e08:	f10a 0a01 	add.w	sl, sl, #1
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e14:	931a      	str	r3, [sp, #104]	; 0x68
 8007e16:	4654      	mov	r4, sl
 8007e18:	2205      	movs	r2, #5
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	4854      	ldr	r0, [pc, #336]	; (8007f70 <_vfiprintf_r+0x220>)
 8007e20:	f7f8 f9d6 	bl	80001d0 <memchr>
 8007e24:	9a04      	ldr	r2, [sp, #16]
 8007e26:	b9d8      	cbnz	r0, 8007e60 <_vfiprintf_r+0x110>
 8007e28:	06d1      	lsls	r1, r2, #27
 8007e2a:	bf44      	itt	mi
 8007e2c:	2320      	movmi	r3, #32
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	0713      	lsls	r3, r2, #28
 8007e34:	bf44      	itt	mi
 8007e36:	232b      	movmi	r3, #43	; 0x2b
 8007e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e40:	2b2a      	cmp	r3, #42	; 0x2a
 8007e42:	d015      	beq.n	8007e70 <_vfiprintf_r+0x120>
 8007e44:	9a07      	ldr	r2, [sp, #28]
 8007e46:	4654      	mov	r4, sl
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f04f 0c0a 	mov.w	ip, #10
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e54:	3b30      	subs	r3, #48	; 0x30
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d94d      	bls.n	8007ef6 <_vfiprintf_r+0x1a6>
 8007e5a:	b1b0      	cbz	r0, 8007e8a <_vfiprintf_r+0x13a>
 8007e5c:	9207      	str	r2, [sp, #28]
 8007e5e:	e014      	b.n	8007e8a <_vfiprintf_r+0x13a>
 8007e60:	eba0 0308 	sub.w	r3, r0, r8
 8007e64:	fa09 f303 	lsl.w	r3, r9, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	46a2      	mov	sl, r4
 8007e6e:	e7d2      	b.n	8007e16 <_vfiprintf_r+0xc6>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	1d19      	adds	r1, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9103      	str	r1, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfbb      	ittet	lt
 8007e7c:	425b      	neglt	r3, r3
 8007e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e82:	9307      	strge	r3, [sp, #28]
 8007e84:	9307      	strlt	r3, [sp, #28]
 8007e86:	bfb8      	it	lt
 8007e88:	9204      	strlt	r2, [sp, #16]
 8007e8a:	7823      	ldrb	r3, [r4, #0]
 8007e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8e:	d10c      	bne.n	8007eaa <_vfiprintf_r+0x15a>
 8007e90:	7863      	ldrb	r3, [r4, #1]
 8007e92:	2b2a      	cmp	r3, #42	; 0x2a
 8007e94:	d134      	bne.n	8007f00 <_vfiprintf_r+0x1b0>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	1d1a      	adds	r2, r3, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	9203      	str	r2, [sp, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea6:	3402      	adds	r4, #2
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f80 <_vfiprintf_r+0x230>
 8007eae:	7821      	ldrb	r1, [r4, #0]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f7f8 f98c 	bl	80001d0 <memchr>
 8007eb8:	b138      	cbz	r0, 8007eca <_vfiprintf_r+0x17a>
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	eba0 000a 	sub.w	r0, r0, sl
 8007ec0:	2240      	movs	r2, #64	; 0x40
 8007ec2:	4082      	lsls	r2, r0
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	3401      	adds	r4, #1
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4829      	ldr	r0, [pc, #164]	; (8007f74 <_vfiprintf_r+0x224>)
 8007ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ed4:	2206      	movs	r2, #6
 8007ed6:	f7f8 f97b 	bl	80001d0 <memchr>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d03f      	beq.n	8007f5e <_vfiprintf_r+0x20e>
 8007ede:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <_vfiprintf_r+0x228>)
 8007ee0:	bb1b      	cbnz	r3, 8007f2a <_vfiprintf_r+0x1da>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	3308      	adds	r3, #8
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef0:	443b      	add	r3, r7
 8007ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef4:	e768      	b.n	8007dc8 <_vfiprintf_r+0x78>
 8007ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007efa:	460c      	mov	r4, r1
 8007efc:	2001      	movs	r0, #1
 8007efe:	e7a6      	b.n	8007e4e <_vfiprintf_r+0xfe>
 8007f00:	2300      	movs	r3, #0
 8007f02:	3401      	adds	r4, #1
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	4619      	mov	r1, r3
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f12:	3a30      	subs	r2, #48	; 0x30
 8007f14:	2a09      	cmp	r2, #9
 8007f16:	d903      	bls.n	8007f20 <_vfiprintf_r+0x1d0>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c6      	beq.n	8007eaa <_vfiprintf_r+0x15a>
 8007f1c:	9105      	str	r1, [sp, #20]
 8007f1e:	e7c4      	b.n	8007eaa <_vfiprintf_r+0x15a>
 8007f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f24:	4604      	mov	r4, r0
 8007f26:	2301      	movs	r3, #1
 8007f28:	e7f0      	b.n	8007f0c <_vfiprintf_r+0x1bc>
 8007f2a:	ab03      	add	r3, sp, #12
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <_vfiprintf_r+0x22c>)
 8007f32:	a904      	add	r1, sp, #16
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7fd fb9f 	bl	8005678 <_printf_float>
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	1c78      	adds	r0, r7, #1
 8007f3e:	d1d6      	bne.n	8007eee <_vfiprintf_r+0x19e>
 8007f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f42:	07d9      	lsls	r1, r3, #31
 8007f44:	d405      	bmi.n	8007f52 <_vfiprintf_r+0x202>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	059a      	lsls	r2, r3, #22
 8007f4a:	d402      	bmi.n	8007f52 <_vfiprintf_r+0x202>
 8007f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f4e:	f7fe f8fd 	bl	800614c <__retarget_lock_release_recursive>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	065b      	lsls	r3, r3, #25
 8007f56:	f53f af1d 	bmi.w	8007d94 <_vfiprintf_r+0x44>
 8007f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f5c:	e71c      	b.n	8007d98 <_vfiprintf_r+0x48>
 8007f5e:	ab03      	add	r3, sp, #12
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	462a      	mov	r2, r5
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_vfiprintf_r+0x22c>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f7fd fe29 	bl	8005bc0 <_printf_i>
 8007f6e:	e7e4      	b.n	8007f3a <_vfiprintf_r+0x1ea>
 8007f70:	080084d4 	.word	0x080084d4
 8007f74:	080084de 	.word	0x080084de
 8007f78:	08005679 	.word	0x08005679
 8007f7c:	08007d2d 	.word	0x08007d2d
 8007f80:	080084da 	.word	0x080084da

08007f84 <__swbuf_r>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	460e      	mov	r6, r1
 8007f88:	4614      	mov	r4, r2
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	b118      	cbz	r0, 8007f96 <__swbuf_r+0x12>
 8007f8e:	6a03      	ldr	r3, [r0, #32]
 8007f90:	b90b      	cbnz	r3, 8007f96 <__swbuf_r+0x12>
 8007f92:	f7fd ffc3 	bl	8005f1c <__sinit>
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	071a      	lsls	r2, r3, #28
 8007f9e:	d525      	bpl.n	8007fec <__swbuf_r+0x68>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	b31b      	cbz	r3, 8007fec <__swbuf_r+0x68>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	1a98      	subs	r0, r3, r2
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	b2f6      	uxtb	r6, r6
 8007fae:	4283      	cmp	r3, r0
 8007fb0:	4637      	mov	r7, r6
 8007fb2:	dc04      	bgt.n	8007fbe <__swbuf_r+0x3a>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7ff fd9e 	bl	8007af8 <_fflush_r>
 8007fbc:	b9e0      	cbnz	r0, 8007ff8 <__swbuf_r+0x74>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	701e      	strb	r6, [r3, #0]
 8007fcc:	6962      	ldr	r2, [r4, #20]
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d004      	beq.n	8007fde <__swbuf_r+0x5a>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	07db      	lsls	r3, r3, #31
 8007fd8:	d506      	bpl.n	8007fe8 <__swbuf_r+0x64>
 8007fda:	2e0a      	cmp	r6, #10
 8007fdc:	d104      	bne.n	8007fe8 <__swbuf_r+0x64>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f7ff fd89 	bl	8007af8 <_fflush_r>
 8007fe6:	b938      	cbnz	r0, 8007ff8 <__swbuf_r+0x74>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	4621      	mov	r1, r4
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f806 	bl	8008000 <__swsetup_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0d5      	beq.n	8007fa4 <__swbuf_r+0x20>
 8007ff8:	f04f 37ff 	mov.w	r7, #4294967295
 8007ffc:	e7f4      	b.n	8007fe8 <__swbuf_r+0x64>
	...

08008000 <__swsetup_r>:
 8008000:	b538      	push	{r3, r4, r5, lr}
 8008002:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <__swsetup_r+0xac>)
 8008004:	4605      	mov	r5, r0
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	460c      	mov	r4, r1
 800800a:	b118      	cbz	r0, 8008014 <__swsetup_r+0x14>
 800800c:	6a03      	ldr	r3, [r0, #32]
 800800e:	b90b      	cbnz	r3, 8008014 <__swsetup_r+0x14>
 8008010:	f7fd ff84 	bl	8005f1c <__sinit>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800801a:	0718      	lsls	r0, r3, #28
 800801c:	d422      	bmi.n	8008064 <__swsetup_r+0x64>
 800801e:	06d9      	lsls	r1, r3, #27
 8008020:	d407      	bmi.n	8008032 <__swsetup_r+0x32>
 8008022:	2309      	movs	r3, #9
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	e034      	b.n	800809c <__swsetup_r+0x9c>
 8008032:	0758      	lsls	r0, r3, #29
 8008034:	d512      	bpl.n	800805c <__swsetup_r+0x5c>
 8008036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008038:	b141      	cbz	r1, 800804c <__swsetup_r+0x4c>
 800803a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800803e:	4299      	cmp	r1, r3
 8008040:	d002      	beq.n	8008048 <__swsetup_r+0x48>
 8008042:	4628      	mov	r0, r5
 8008044:	f7fe fefe 	bl	8006e44 <_free_r>
 8008048:	2300      	movs	r3, #0
 800804a:	6363      	str	r3, [r4, #52]	; 0x34
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008052:	81a3      	strh	r3, [r4, #12]
 8008054:	2300      	movs	r3, #0
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f043 0308 	orr.w	r3, r3, #8
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	b94b      	cbnz	r3, 800807c <__swsetup_r+0x7c>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800806e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008072:	d003      	beq.n	800807c <__swsetup_r+0x7c>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f884 	bl	8008184 <__smakebuf_r>
 800807c:	89a0      	ldrh	r0, [r4, #12]
 800807e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008082:	f010 0301 	ands.w	r3, r0, #1
 8008086:	d00a      	beq.n	800809e <__swsetup_r+0x9e>
 8008088:	2300      	movs	r3, #0
 800808a:	60a3      	str	r3, [r4, #8]
 800808c:	6963      	ldr	r3, [r4, #20]
 800808e:	425b      	negs	r3, r3
 8008090:	61a3      	str	r3, [r4, #24]
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	b943      	cbnz	r3, 80080a8 <__swsetup_r+0xa8>
 8008096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800809a:	d1c4      	bne.n	8008026 <__swsetup_r+0x26>
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	0781      	lsls	r1, r0, #30
 80080a0:	bf58      	it	pl
 80080a2:	6963      	ldrpl	r3, [r4, #20]
 80080a4:	60a3      	str	r3, [r4, #8]
 80080a6:	e7f4      	b.n	8008092 <__swsetup_r+0x92>
 80080a8:	2000      	movs	r0, #0
 80080aa:	e7f7      	b.n	800809c <__swsetup_r+0x9c>
 80080ac:	20000064 	.word	0x20000064

080080b0 <_raise_r>:
 80080b0:	291f      	cmp	r1, #31
 80080b2:	b538      	push	{r3, r4, r5, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	460d      	mov	r5, r1
 80080b8:	d904      	bls.n	80080c4 <_raise_r+0x14>
 80080ba:	2316      	movs	r3, #22
 80080bc:	6003      	str	r3, [r0, #0]
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80080c6:	b112      	cbz	r2, 80080ce <_raise_r+0x1e>
 80080c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080cc:	b94b      	cbnz	r3, 80080e2 <_raise_r+0x32>
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 f830 	bl	8008134 <_getpid_r>
 80080d4:	462a      	mov	r2, r5
 80080d6:	4601      	mov	r1, r0
 80080d8:	4620      	mov	r0, r4
 80080da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080de:	f000 b817 	b.w	8008110 <_kill_r>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d00a      	beq.n	80080fc <_raise_r+0x4c>
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	d103      	bne.n	80080f2 <_raise_r+0x42>
 80080ea:	2316      	movs	r3, #22
 80080ec:	6003      	str	r3, [r0, #0]
 80080ee:	2001      	movs	r0, #1
 80080f0:	e7e7      	b.n	80080c2 <_raise_r+0x12>
 80080f2:	2400      	movs	r4, #0
 80080f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080f8:	4628      	mov	r0, r5
 80080fa:	4798      	blx	r3
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7e0      	b.n	80080c2 <_raise_r+0x12>

08008100 <raise>:
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <raise+0xc>)
 8008102:	4601      	mov	r1, r0
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	f7ff bfd3 	b.w	80080b0 <_raise_r>
 800810a:	bf00      	nop
 800810c:	20000064 	.word	0x20000064

08008110 <_kill_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d07      	ldr	r5, [pc, #28]	; (8008130 <_kill_r+0x20>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	4611      	mov	r1, r2
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	f7f9 f963 	bl	80013e8 <_kill>
 8008122:	1c43      	adds	r3, r0, #1
 8008124:	d102      	bne.n	800812c <_kill_r+0x1c>
 8008126:	682b      	ldr	r3, [r5, #0]
 8008128:	b103      	cbz	r3, 800812c <_kill_r+0x1c>
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	2000049c 	.word	0x2000049c

08008134 <_getpid_r>:
 8008134:	f7f9 b950 	b.w	80013d8 <_getpid>

08008138 <__swhatbuf_r>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	2900      	cmp	r1, #0
 8008142:	b096      	sub	sp, #88	; 0x58
 8008144:	4615      	mov	r5, r2
 8008146:	461e      	mov	r6, r3
 8008148:	da0d      	bge.n	8008166 <__swhatbuf_r+0x2e>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008150:	f04f 0100 	mov.w	r1, #0
 8008154:	bf0c      	ite	eq
 8008156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800815a:	2340      	movne	r3, #64	; 0x40
 800815c:	2000      	movs	r0, #0
 800815e:	6031      	str	r1, [r6, #0]
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	b016      	add	sp, #88	; 0x58
 8008164:	bd70      	pop	{r4, r5, r6, pc}
 8008166:	466a      	mov	r2, sp
 8008168:	f000 f848 	bl	80081fc <_fstat_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	dbec      	blt.n	800814a <__swhatbuf_r+0x12>
 8008170:	9901      	ldr	r1, [sp, #4]
 8008172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800817a:	4259      	negs	r1, r3
 800817c:	4159      	adcs	r1, r3
 800817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008182:	e7eb      	b.n	800815c <__swhatbuf_r+0x24>

08008184 <__smakebuf_r>:
 8008184:	898b      	ldrh	r3, [r1, #12]
 8008186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008188:	079d      	lsls	r5, r3, #30
 800818a:	4606      	mov	r6, r0
 800818c:	460c      	mov	r4, r1
 800818e:	d507      	bpl.n	80081a0 <__smakebuf_r+0x1c>
 8008190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	6123      	str	r3, [r4, #16]
 8008198:	2301      	movs	r3, #1
 800819a:	6163      	str	r3, [r4, #20]
 800819c:	b002      	add	sp, #8
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	ab01      	add	r3, sp, #4
 80081a2:	466a      	mov	r2, sp
 80081a4:	f7ff ffc8 	bl	8008138 <__swhatbuf_r>
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	4605      	mov	r5, r0
 80081ac:	4630      	mov	r0, r6
 80081ae:	f7fe febd 	bl	8006f2c <_malloc_r>
 80081b2:	b948      	cbnz	r0, 80081c8 <__smakebuf_r+0x44>
 80081b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b8:	059a      	lsls	r2, r3, #22
 80081ba:	d4ef      	bmi.n	800819c <__smakebuf_r+0x18>
 80081bc:	f023 0303 	bic.w	r3, r3, #3
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	e7e3      	b.n	8008190 <__smakebuf_r+0xc>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	6020      	str	r0, [r4, #0]
 80081cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d0:	81a3      	strh	r3, [r4, #12]
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	6163      	str	r3, [r4, #20]
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	6120      	str	r0, [r4, #16]
 80081da:	b15b      	cbz	r3, 80081f4 <__smakebuf_r+0x70>
 80081dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e0:	4630      	mov	r0, r6
 80081e2:	f000 f81d 	bl	8008220 <_isatty_r>
 80081e6:	b128      	cbz	r0, 80081f4 <__smakebuf_r+0x70>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	81a3      	strh	r3, [r4, #12]
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	431d      	orrs	r5, r3
 80081f8:	81a5      	strh	r5, [r4, #12]
 80081fa:	e7cf      	b.n	800819c <__smakebuf_r+0x18>

080081fc <_fstat_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	; (800821c <_fstat_r+0x20>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	4611      	mov	r1, r2
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f7f9 f94c 	bl	80014a6 <_fstat>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d102      	bne.n	8008218 <_fstat_r+0x1c>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	b103      	cbz	r3, 8008218 <_fstat_r+0x1c>
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	bf00      	nop
 800821c:	2000049c 	.word	0x2000049c

08008220 <_isatty_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d06      	ldr	r5, [pc, #24]	; (800823c <_isatty_r+0x1c>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	f7f9 f94b 	bl	80014c6 <_isatty>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_isatty_r+0x1a>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_isatty_r+0x1a>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	2000049c 	.word	0x2000049c

08008240 <_init>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	bf00      	nop
 8008244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008246:	bc08      	pop	{r3}
 8008248:	469e      	mov	lr, r3
 800824a:	4770      	bx	lr

0800824c <_fini>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr
