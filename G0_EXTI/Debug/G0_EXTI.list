
G0_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001164  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012ec  080012ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012ec  080012ec  000112ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080012f8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080012f8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003727  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000be1  00000000  00000000  0002379e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000430  00000000  00000000  00024380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000030a  00000000  00000000  000247b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e436  00000000  00000000  00024aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000033db  00000000  00000000  00042ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aad4c  00000000  00000000  000462cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001034  00000000  00000000  000f1018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012d4 	.word	0x080012d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080012d4 	.word	0x080012d4

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	; (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <LL_RCC_MSI_Enable+0x1c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <LL_RCC_MSI_Enable+0x1c>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_RCC_MSI_IsReady+0x20>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b02      	cmp	r3, #2
 8000352:	d101      	bne.n	8000358 <LL_RCC_MSI_IsReady+0x14>
 8000354:	2301      	movs	r3, #1
 8000356:	e000      	b.n	800035a <LL_RCC_MSI_IsReady+0x16>
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000

08000368 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <LL_RCC_MSI_SetRange+0x24>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000398:	4904      	ldr	r1, [pc, #16]	; (80003ac <LL_RCC_MSI_SetRange+0x24>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4313      	orrs	r3, r2
 800039e:	600b      	str	r3, [r1, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	4904      	ldr	r1, [pc, #16]	; (80003d8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80003c6:	4313      	orrs	r3, r2
 80003c8:	604b      	str	r3, [r1, #4]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <LL_RCC_SetSysClkSource+0x24>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	f023 0203 	bic.w	r2, r3, #3
 80003ec:	4904      	ldr	r1, [pc, #16]	; (8000400 <LL_RCC_SetSysClkSource+0x24>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	608b      	str	r3, [r1, #8]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <LL_RCC_GetSysClkSource+0x18>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f003 030c 	and.w	r3, r3, #12
}
 8000410:	4618      	mov	r0, r3
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000430:	4904      	ldr	r1, [pc, #16]	; (8000444 <LL_RCC_SetAHBPrescaler+0x24>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4313      	orrs	r3, r2
 8000436:	608b      	str	r3, [r1, #8]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <LL_RCC_SetAPB1Prescaler+0x24>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	608b      	str	r3, [r1, #8]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_RCC_SetAPB2Prescaler+0x24>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000480:	4904      	ldr	r1, [pc, #16]	; (8000494 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4313      	orrs	r3, r2
 8000486:	608b      	str	r3, [r1, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004a4:	4907      	ldr	r1, [pc, #28]	; (80004c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004d4:	4907      	ldr	r1, [pc, #28]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4313      	orrs	r3, r2
 80004da:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4013      	ands	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000502:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LL_APB2_GRP1_EnableClock+0x2c>)
 800050e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4013      	ands	r3, r2
 8000514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <LL_SYSCFG_SetEXTISource+0x68>)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	3302      	adds	r3, #2
 800053a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	43db      	mvns	r3, r3
 8000544:	ea02 0103 	and.w	r1, r2, r3
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	fa93 f3a3 	rbit	r3, r3
 8000554:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d101      	bne.n	8000564 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000560:	2320      	movs	r3, #32
 8000562:	e003      	b.n	800056c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fab3 f383 	clz	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	fa03 f202 	lsl.w	r2, r3, r2
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <LL_SYSCFG_SetEXTISource+0x68>)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	430a      	orrs	r2, r1
 800057c:	3302      	adds	r3, #2
 800057e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000582:	bf00      	nop
 8000584:	371c      	adds	r7, #28
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40010000 	.word	0x40010000

08000594 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f023 0207 	bic.w	r2, r3, #7
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	600b      	str	r3, [r1, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40022000 	.word	0x40022000

080005bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_FLASH_GetLatency+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 0307 	and.w	r3, r3, #7
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	600b      	str	r3, [r1, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40007000 	.word	0x40007000

08000600 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800060c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000610:	d101      	bne.n	8000616 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40007000 	.word	0x40007000

08000628 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000628:	b480      	push	{r7}
 800062a:	b08b      	sub	sp, #44	; 0x2c
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa93 f3a3 	rbit	r3, r3
 8000642:	613b      	str	r3, [r7, #16]
  return result;
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800064e:	2320      	movs	r3, #32
 8000650:	e003      	b.n	800065a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	fab3 f383 	clz	r3, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2103      	movs	r1, #3
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	fa93 f3a3 	rbit	r3, r3
 8000670:	61fb      	str	r3, [r7, #28]
  return result;
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	2b00      	cmp	r3, #0
 800067a:	d101      	bne.n	8000680 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800067c:	2320      	movs	r3, #32
 800067e:	e003      	b.n	8000688 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	431a      	orrs	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	372c      	adds	r7, #44	; 0x2c
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b08b      	sub	sp, #44	; 0x2c
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	fa93 f3a3 	rbit	r3, r3
 80006bc:	613b      	str	r3, [r7, #16]
  return result;
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006c8:	2320      	movs	r3, #32
 80006ca:	e003      	b.n	80006d4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fab3 f383 	clz	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	2103      	movs	r1, #3
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	401a      	ands	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	fa93 f3a3 	rbit	r3, r3
 80006ea:	61fb      	str	r3, [r7, #28]
  return result;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80006f6:	2320      	movs	r3, #32
 80006f8:	e003      	b.n	8000702 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	60da      	str	r2, [r3, #12]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4013      	ands	r3, r2
 800074e:	041a      	lsls	r2, r3, #16
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	43d9      	mvns	r1, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	400b      	ands	r3, r1
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	619a      	str	r2, [r3, #24]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fec1 	bl	80004f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000776:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800077a:	f7ff fea5 	bl	80004c8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077e:	2003      	movs	r0, #3
 8000780:	f7ff fd22 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000784:	f7ff fd44 	bl	8000210 <__NVIC_GetPriorityGrouping>
 8000788:	4603      	mov	r3, r0
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd94 	bl	80002bc <NVIC_EncodePriority>
 8000794:	4603      	mov	r3, r0
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f7ff fd64 	bl	8000268 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f812 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 f852 	bl	800084c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1)
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <main+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d1fb      	bne.n	80007a8 <main+0x3c>
	  {
		  //HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		  LL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80007b0:	2120      	movs	r1, #32
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f7ff ffbf 	bl	8000738 <LL_GPIO_TogglePin>
		  flag = 0;
 80007ba:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <main+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
	  if(flag == 1)
 80007c0:	e7f2      	b.n	80007a8 <main+0x3c>
 80007c2:	bf00      	nop
 80007c4:	20000020 	.word	0x20000020

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fee1 	bl	8000594 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80007d2:	bf00      	nop
 80007d4:	f7ff fef2 	bl	80005bc <LL_FLASH_GetLatency>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1fa      	bne.n	80007d4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f7ff fef9 	bl	80005d8 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80007e6:	bf00      	nop
 80007e8:	f7ff ff0a 	bl	8000600 <LL_PWR_IsActiveFlag_VOS>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1fa      	bne.n	80007e8 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 80007f2:	f7ff fd97 	bl	8000324 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80007f6:	bf00      	nop
 80007f8:	f7ff fda4 	bl	8000344 <LL_RCC_MSI_IsReady>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d1fa      	bne.n	80007f8 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000802:	f7ff fdb1 	bl	8000368 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000806:	2060      	movs	r0, #96	; 0x60
 8000808:	f7ff fdbe 	bl	8000388 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fdcf 	bl	80003b0 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fde2 	bl	80003dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000818:	bf00      	nop
 800081a:	f7ff fdf3 	bl	8000404 <LL_RCC_GetSysClkSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1fa      	bne.n	800081a <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fdfb 	bl	8000420 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fe0c 	bl	8000448 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fe1d 	bl	8000470 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <SystemClock_Config+0x80>)
 8000838:	f000 fd0a 	bl	8001250 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <SystemClock_Config+0x80>)
 800083e:	f000 fd15 	bl	800126c <LL_SetSystemCoreClock>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	003d0900 	.word	0x003d0900

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fe12 	bl	8000498 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fe0f 	bl	8000498 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800087a:	2120      	movs	r1, #32
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f7ff ff4c 	bl	800071c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000884:	4923      	ldr	r1, [pc, #140]	; (8000914 <MX_GPIO_Init+0xc8>)
 8000886:	2002      	movs	r0, #2
 8000888:	f7ff fe4e 	bl	8000528 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000896:	2301      	movs	r3, #1
 8000898:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fa07 	bl	8000cc0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin, LL_GPIO_PULL_NO);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_GPIO_Init+0xcc>)
 80008ba:	f7ff fef2 	bl	80006a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_GPIO_Init+0xcc>)
 80008c6:	f7ff feaf 	bl	8000628 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ca:	2320      	movs	r3, #32
 80008cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ce:	2301      	movs	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fc2a 	bl	800113e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80008ea:	f7ff fc91 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fce1 	bl	80002bc <NVIC_EncodePriority>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4619      	mov	r1, r3
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f7ff fcb2 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f7ff fc91 	bl	800022c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	00f00003 	.word	0x00f00003
 8000918:	48000800 	.word	0x48000800

0800091c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	d101      	bne.n	8000936 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000932:	2301      	movs	r3, #1
 8000934:	e000      	b.n	8000938 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40010400 	.word	0x40010400

08000948 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6153      	str	r3, [r2, #20]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40010400 	.word	0x40010400

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80009c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009c8:	f7ff ffa8 	bl	800091c <LL_EXTI_IsActiveFlag_0_31>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d006      	beq.n	80009e0 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80009d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009d6:	f7ff ffb7 	bl	8000948 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    flag = 1;
 80009da:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <EXTI15_10_IRQHandler+0x24>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000020 	.word	0x20000020

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f000 fc27 	bl	800128c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fe95 	bl	800076c <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a50:	080012f4 	.word	0x080012f4
  ldr r2, =_sbss
 8000a54:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a58:	20000024 	.word	0x20000024

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <LL_EXTI_EnableIT_0_31>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4904      	ldr	r1, [pc, #16]	; (8000a80 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	600b      	str	r3, [r1, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40010400 	.word	0x40010400

08000a84 <LL_EXTI_EnableIT_32_63>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <LL_EXTI_EnableIT_32_63+0x20>)
 8000a8e:	6a1a      	ldr	r2, [r3, #32]
 8000a90:	4904      	ldr	r1, [pc, #16]	; (8000aa4 <LL_EXTI_EnableIT_32_63+0x20>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	620b      	str	r3, [r1, #32]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <LL_EXTI_DisableIT_0_31>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LL_EXTI_DisableIT_0_31+0x24>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4904      	ldr	r1, [pc, #16]	; (8000acc <LL_EXTI_DisableIT_0_31+0x24>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40010400 	.word	0x40010400

08000ad0 <LL_EXTI_DisableIT_32_63>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4904      	ldr	r1, [pc, #16]	; (8000af4 <LL_EXTI_DisableIT_32_63+0x24>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	620b      	str	r3, [r1, #32]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40010400 	.word	0x40010400

08000af8 <LL_EXTI_EnableEvent_0_31>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	4904      	ldr	r1, [pc, #16]	; (8000b18 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40010400 	.word	0x40010400

08000b1c <LL_EXTI_EnableEvent_32_63>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b28:	4904      	ldr	r1, [pc, #16]	; (8000b3c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40010400 	.word	0x40010400

08000b40 <LL_EXTI_DisableEvent_0_31>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4904      	ldr	r1, [pc, #16]	; (8000b64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	604b      	str	r3, [r1, #4]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40010400 	.word	0x40010400

08000b68 <LL_EXTI_DisableEvent_32_63>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	4904      	ldr	r1, [pc, #16]	; (8000b8c <LL_EXTI_DisableEvent_32_63+0x24>)
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40010400 	.word	0x40010400

08000b90 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bc0:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	608b      	str	r3, [r1, #8]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40010400 	.word	0x40010400

08000c00 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40010400 	.word	0x40010400

08000c28 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40010400 	.word	0x40010400

08000c4c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40010400 	.word	0x40010400

08000c70 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	60cb      	str	r3, [r1, #12]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400

08000c98 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7a1b      	ldrb	r3, [r3, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80d0 	beq.w	8000e76 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d063      	beq.n	8000da6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7a5b      	ldrb	r3, [r3, #9]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d01c      	beq.n	8000d20 <LL_EXTI_Init+0x60>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dc25      	bgt.n	8000d36 <LL_EXTI_Init+0x76>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <LL_EXTI_Init+0x34>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d00b      	beq.n	8000d0a <LL_EXTI_Init+0x4a>
 8000cf2:	e020      	b.n	8000d36 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff21 	bl	8000b40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff feac 	bl	8000a60 <LL_EXTI_EnableIT_0_31>
          break;
 8000d08:	e018      	b.n	8000d3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff feca 	bl	8000aa8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff feed 	bl	8000af8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d1e:	e00d      	b.n	8000d3c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe9b 	bl	8000a60 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fee2 	bl	8000af8 <LL_EXTI_EnableEvent_0_31>
          break;
 8000d34:	e002      	b.n	8000d3c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
          break;
 8000d3a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7a9b      	ldrb	r3, [r3, #10]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d030      	beq.n	8000da6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7a9b      	ldrb	r3, [r3, #10]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d01c      	beq.n	8000d86 <LL_EXTI_Init+0xc6>
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	dc25      	bgt.n	8000d9c <LL_EXTI_Init+0xdc>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d002      	beq.n	8000d5a <LL_EXTI_Init+0x9a>
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d00b      	beq.n	8000d70 <LL_EXTI_Init+0xb0>
 8000d58:	e020      	b.n	8000d9c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff86 	bl	8000c70 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff11 	bl	8000b90 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000d6e:	e01a      	b.n	8000da6 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff2f 	bl	8000bd8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff52 	bl	8000c28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000d84:	e00f      	b.n	8000da6 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff00 	bl	8000b90 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff47 	bl	8000c28 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000d9a:	e004      	b.n	8000da6 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
            break;
 8000da4:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d077      	beq.n	8000e9e <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7a5b      	ldrb	r3, [r3, #9]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d01c      	beq.n	8000df0 <LL_EXTI_Init+0x130>
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	dc25      	bgt.n	8000e06 <LL_EXTI_Init+0x146>
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <LL_EXTI_Init+0x104>
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d00b      	beq.n	8000dda <LL_EXTI_Init+0x11a>
 8000dc2:	e020      	b.n	8000e06 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fecd 	bl	8000b68 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe56 	bl	8000a84 <LL_EXTI_EnableIT_32_63>
          break;
 8000dd8:	e01a      	b.n	8000e10 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fe76 	bl	8000ad0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe97 	bl	8000b1c <LL_EXTI_EnableEvent_32_63>
          break;
 8000dee:	e00f      	b.n	8000e10 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe45 	bl	8000a84 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe8c 	bl	8000b1c <LL_EXTI_EnableEvent_32_63>
          break;
 8000e04:	e004      	b.n	8000e10 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	60fb      	str	r3, [r7, #12]
          break;
 8000e0e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a9b      	ldrb	r3, [r3, #10]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d042      	beq.n	8000e9e <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a9b      	ldrb	r3, [r3, #10]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d01c      	beq.n	8000e5a <LL_EXTI_Init+0x19a>
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	dc25      	bgt.n	8000e70 <LL_EXTI_Init+0x1b0>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d002      	beq.n	8000e2e <LL_EXTI_Init+0x16e>
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d00b      	beq.n	8000e44 <LL_EXTI_Init+0x184>
 8000e2c:	e020      	b.n	8000e70 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff30 	bl	8000c98 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff feb9 	bl	8000bb4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000e42:	e02c      	b.n	8000e9e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fed9 	bl	8000c00 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fefa 	bl	8000c4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e58:	e021      	b.n	8000e9e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea8 	bl	8000bb4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff feef 	bl	8000c4c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e6e:	e016      	b.n	8000e9e <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
            break;
 8000e74:	e013      	b.n	8000e9e <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fe14 	bl	8000aa8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe5b 	bl	8000b40 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe1e 	bl	8000ad0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe65 	bl	8000b68 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LL_GPIO_SetPinMode>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	613b      	str	r3, [r7, #16]
  return result;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	e003      	b.n	8000eda <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2103      	movs	r1, #3
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	61fb      	str	r3, [r7, #28]
  return result;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000efc:	2320      	movs	r3, #32
 8000efe:	e003      	b.n	8000f08 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	fab3 f383 	clz	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	431a      	orrs	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	372c      	adds	r7, #44	; 0x2c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_GPIO_SetPinOutputType>:
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_GPIO_SetPinSpeed>:
{
 8000f52:	b480      	push	{r7}
 8000f54:	b08b      	sub	sp, #44	; 0x2c
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	613b      	str	r3, [r7, #16]
  return result;
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	e003      	b.n	8000f84 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2103      	movs	r1, #3
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	61fb      	str	r3, [r7, #28]
  return result;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	e003      	b.n	8000fb2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fab3 f383 	clz	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	609a      	str	r2, [r3, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	372c      	adds	r7, #44	; 0x2c
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_GPIO_SetPinPull>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b08b      	sub	sp, #44	; 0x2c
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	613b      	str	r3, [r7, #16]
  return result;
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000ff2:	2320      	movs	r3, #32
 8000ff4:	e003      	b.n	8000ffe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	fab3 f383 	clz	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2103      	movs	r1, #3
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	401a      	ands	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	61fb      	str	r3, [r7, #28]
  return result;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001020:	2320      	movs	r3, #32
 8001022:	e003      	b.n	800102c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	431a      	orrs	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	60da      	str	r2, [r3, #12]
}
 800103a:	bf00      	nop
 800103c:	372c      	adds	r7, #44	; 0x2c
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_GPIO_SetAFPin_0_7>:
{
 8001046:	b480      	push	{r7}
 8001048:	b08b      	sub	sp, #44	; 0x2c
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	613b      	str	r3, [r7, #16]
  return result;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800106c:	2320      	movs	r3, #32
 800106e:	e003      	b.n	8001078 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	210f      	movs	r1, #15
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	61fb      	str	r3, [r7, #28]
  return result;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800109a:	2320      	movs	r3, #32
 800109c:	e003      	b.n	80010a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	621a      	str	r2, [r3, #32]
}
 80010b4:	bf00      	nop
 80010b6:	372c      	adds	r7, #44	; 0x2c
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_GPIO_SetAFPin_8_15>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b08b      	sub	sp, #44	; 0x2c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	613b      	str	r3, [r7, #16]
  return result;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010e8:	2320      	movs	r3, #32
 80010ea:	e003      	b.n	80010f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	210f      	movs	r1, #15
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	61fb      	str	r3, [r7, #28]
  return result;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001118:	2320      	movs	r3, #32
 800111a:	e003      	b.n	8001124 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	; 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b088      	sub	sp, #32
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	60fb      	str	r3, [r7, #12]
  return result;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <LL_GPIO_Init+0x26>
    return 32U;
 8001160:	2320      	movs	r3, #32
 8001162:	e003      	b.n	800116c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fab3 f383 	clz	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800116e:	e048      	b.n	8001202 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d03a      	beq.n	80011fc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d003      	beq.n	8001196 <LL_GPIO_Init+0x58>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d10e      	bne.n	80011b4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	461a      	mov	r2, r3
 800119c:	69b9      	ldr	r1, [r7, #24]
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fed7 	bl	8000f52 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	461a      	mov	r2, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff feb7 	bl	8000f22 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	461a      	mov	r2, r3
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff05 	bl	8000fcc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d111      	bne.n	80011ee <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2bff      	cmp	r3, #255	; 0xff
 80011ce:	d807      	bhi.n	80011e0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	461a      	mov	r2, r3
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff34 	bl	8001046 <LL_GPIO_SetAFPin_0_7>
 80011de:	e006      	b.n	80011ee <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	461a      	mov	r2, r3
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff69 	bl	80010c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	69b9      	ldr	r1, [r7, #24]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe56 	bl	8000ea8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3301      	adds	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1af      	bne.n	8001170 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <LL_InitTick+0x30>)
 8001230:	3b01      	subs	r3, #1
 8001232:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <LL_InitTick+0x30>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <LL_InitTick+0x30>)
 800123c:	2205      	movs	r2, #5
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e010 	.word	0xe000e010

08001250 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001258:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ffdd 	bl	800121c <LL_InitTick>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <LL_SetSystemCoreClock+0x1c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000000 	.word	0x20000000

0800128c <__libc_init_array>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	4d0d      	ldr	r5, [pc, #52]	; (80012c4 <__libc_init_array+0x38>)
 8001290:	4c0d      	ldr	r4, [pc, #52]	; (80012c8 <__libc_init_array+0x3c>)
 8001292:	1b64      	subs	r4, r4, r5
 8001294:	10a4      	asrs	r4, r4, #2
 8001296:	2600      	movs	r6, #0
 8001298:	42a6      	cmp	r6, r4
 800129a:	d109      	bne.n	80012b0 <__libc_init_array+0x24>
 800129c:	4d0b      	ldr	r5, [pc, #44]	; (80012cc <__libc_init_array+0x40>)
 800129e:	4c0c      	ldr	r4, [pc, #48]	; (80012d0 <__libc_init_array+0x44>)
 80012a0:	f000 f818 	bl	80012d4 <_init>
 80012a4:	1b64      	subs	r4, r4, r5
 80012a6:	10a4      	asrs	r4, r4, #2
 80012a8:	2600      	movs	r6, #0
 80012aa:	42a6      	cmp	r6, r4
 80012ac:	d105      	bne.n	80012ba <__libc_init_array+0x2e>
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
 80012b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012b4:	4798      	blx	r3
 80012b6:	3601      	adds	r6, #1
 80012b8:	e7ee      	b.n	8001298 <__libc_init_array+0xc>
 80012ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80012be:	4798      	blx	r3
 80012c0:	3601      	adds	r6, #1
 80012c2:	e7f2      	b.n	80012aa <__libc_init_array+0x1e>
 80012c4:	080012ec 	.word	0x080012ec
 80012c8:	080012ec 	.word	0x080012ec
 80012cc:	080012ec 	.word	0x080012ec
 80012d0:	080012f0 	.word	0x080012f0

080012d4 <_init>:
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	bf00      	nop
 80012d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012da:	bc08      	pop	{r3}
 80012dc:	469e      	mov	lr, r3
 80012de:	4770      	bx	lr

080012e0 <_fini>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	bf00      	nop
 80012e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e6:	bc08      	pop	{r3}
 80012e8:	469e      	mov	lr, r3
 80012ea:	4770      	bx	lr
