
G0_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080048d0  080048d0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d0  080048d0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  20000060  08004938  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011c4  08004938  000211c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012431  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2e  00000000  00000000  00032504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00035138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d19  00000000  00000000  00036248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027790  00000000  00000000  00036f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012861  00000000  00000000  0005e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f54dd  00000000  00000000  00070f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004910  00000000  00000000  00166430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004820 	.word	0x08004820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004820 	.word	0x08004820

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa34 	bl	8000676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f841 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f885 	bl	8000320 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 8000216:	2300      	movs	r3, #0
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
 800021a:	2300      	movs	r3, #0
 800021c:	63fb      	str	r3, [r7, #60]	; 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 800021e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000222:	2101      	movs	r1, #1
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fee0 	bl	8001fea <osSemaphoreCreate>
 800022a:	4603      	mov	r3, r0
 800022c:	4a14      	ldr	r2, [pc, #80]	; (8000280 <main+0x7c>)
 800022e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <main+0x80>)
 8000232:	f107 041c 	add.w	r4, r7, #28
 8000236:	461d      	mov	r5, r3
 8000238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000244:	f107 031c 	add.w	r3, r7, #28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fe6d 	bl	8001f2a <osThreadCreate>
 8000250:	4603      	mov	r3, r0
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <main+0x84>)
 8000254:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 8000256:	4b0d      	ldr	r3, [pc, #52]	; (800028c <main+0x88>)
 8000258:	463c      	mov	r4, r7
 800025a:	461d      	mov	r5, r3
 800025c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000268:	463b      	mov	r3, r7
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fe5c 	bl	8001f2a <osThreadCreate>
 8000272:	4603      	mov	r3, r0
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <main+0x8c>)
 8000276:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000278:	f001 fe50 	bl	8001f1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x78>
 800027e:	bf00      	nop
 8000280:	20000324 	.word	0x20000324
 8000284:	08004840 	.word	0x08004840
 8000288:	2000031c 	.word	0x2000031c
 800028c:	08004864 	.word	0x08004864
 8000290:	20000320 	.word	0x20000320

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b096      	sub	sp, #88	; 0x58
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2244      	movs	r2, #68	; 0x44
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 f9d2 	bl	800464c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ba:	f000 fcdf 	bl	8000c7c <HAL_PWREx_ControlVoltageScaling>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c4:	f000 f8cc 	bl	8000460 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c8:	2310      	movs	r3, #16
 80002ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d4:	2360      	movs	r3, #96	; 0x60
 80002d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	2300      	movs	r3, #0
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fd21 	bl	8000d28 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002ec:	f000 f8b8 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	463b      	mov	r3, r7
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f001 f8e9 	bl	80014e0 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000314:	f000 f8a4 	bl	8000460 <Error_Handler>
  }
}
 8000318:	bf00      	nop
 800031a:	3758      	adds	r7, #88	; 0x58
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <MX_GPIO_Init+0xa4>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a22      	ldr	r2, [pc, #136]	; (80003c4 <MX_GPIO_Init+0xa4>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <MX_GPIO_Init+0xa4>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0304 	and.w	r3, r3, #4
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_GPIO_Init+0xa4>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <MX_GPIO_Init+0xa4>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_GPIO_Init+0xa4>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2120      	movs	r1, #32
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f000 fc47 	bl	8000c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4619      	mov	r1, r3
 8000388:	480f      	ldr	r0, [pc, #60]	; (80003c8 <MX_GPIO_Init+0xa8>)
 800038a:	f000 fa8f 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800038e:	2320      	movs	r3, #32
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	4619      	mov	r1, r3
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f000 fa80 	bl	80008ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2105      	movs	r1, #5
 80003b0:	2028      	movs	r0, #40	; 0x28
 80003b2:	f000 fa51 	bl	8000858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b6:	2028      	movs	r0, #40	; 0x28
 80003b8:	f000 fa6a 	bl	8000890 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	48000800 	.word	0x48000800

080003cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	80fb      	strh	r3, [r7, #6]
	if(BLUE_BUTTON_Pin == GPIO_Pin)
 80003d6:	88fb      	ldrh	r3, [r7, #6]
 80003d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003dc:	d104      	bne.n	80003e8 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		osSemaphoreRelease(Binary_SemHandle);
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <HAL_GPIO_EXTI_Callback+0x24>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fe82 	bl	80020ec <osSemaphoreRelease>
	}
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000324 	.word	0x20000324

080003f4 <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f000 fbfc 	bl	8000c00 <HAL_GPIO_WritePin>

	  osSemaphoreWait(Binary_SemHandle, osWaitForever);
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <Task1_App+0x24>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fe1d 	bl	8002050 <osSemaphoreWait>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000416:	e7f1      	b.n	80003fc <Task1_App+0x8>
 8000418:	20000324 	.word	0x20000324

0800041c <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fbe8 	bl	8000c00 <HAL_GPIO_WritePin>
	  osDelay(1300);
 8000430:	f240 5014 	movw	r0, #1300	; 0x514
 8000434:	f001 fdc5 	bl	8001fc2 <osDelay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000438:	e7f4      	b.n	8000424 <Task2_App+0x8>
	...

0800043c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d101      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800044e:	f000 f92b 	bl	80006a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40001000 	.word	0x40001000

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_MspInit+0x4c>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000476:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <HAL_MspInit+0x4c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	; 0x60
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_MspInit+0x4c>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <HAL_MspInit+0x4c>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <HAL_MspInit+0x4c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	; 0x58
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_MspInit+0x4c>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	210f      	movs	r1, #15
 80004a6:	f06f 0001 	mvn.w	r0, #1
 80004aa:	f000 f9d5 	bl	8000858 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004ca:	4b34      	ldr	r3, [pc, #208]	; (800059c <HAL_InitTick+0xe0>)
 80004cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ce:	4a33      	ldr	r2, [pc, #204]	; (800059c <HAL_InitTick+0xe0>)
 80004d0:	f043 0310 	orr.w	r3, r3, #16
 80004d4:	6593      	str	r3, [r2, #88]	; 0x58
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <HAL_InitTick+0xe0>)
 80004d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004da:	f003 0310 	and.w	r3, r3, #16
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e2:	f107 0210 	add.w	r2, r7, #16
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 f9a5 	bl	800183c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004f2:	6a3b      	ldr	r3, [r7, #32]
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004fc:	f001 f988 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8000500:	6378      	str	r0, [r7, #52]	; 0x34
 8000502:	e004      	b.n	800050e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000504:	f001 f984 	bl	8001810 <HAL_RCC_GetPCLK1Freq>
 8000508:	4603      	mov	r3, r0
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000510:	4a23      	ldr	r2, [pc, #140]	; (80005a0 <HAL_InitTick+0xe4>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	0c9b      	lsrs	r3, r3, #18
 8000518:	3b01      	subs	r3, #1
 800051a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <HAL_InitTick+0xe8>)
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <HAL_InitTick+0xec>)
 8000520:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <HAL_InitTick+0xe8>)
 8000524:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000528:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800052a:	4a1e      	ldr	r2, [pc, #120]	; (80005a4 <HAL_InitTick+0xe8>)
 800052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800052e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <HAL_InitTick+0xe8>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <HAL_InitTick+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <HAL_InitTick+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <HAL_InitTick+0xe8>)
 8000544:	f001 fa0c 	bl	8001960 <HAL_TIM_Base_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800054e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11b      	bne.n	800058e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000556:	4813      	ldr	r0, [pc, #76]	; (80005a4 <HAL_InitTick+0xe8>)
 8000558:	f001 fa64 	bl	8001a24 <HAL_TIM_Base_Start_IT>
 800055c:	4603      	mov	r3, r0
 800055e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000566:	2b00      	cmp	r3, #0
 8000568:	d111      	bne.n	800058e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800056a:	2036      	movs	r0, #54	; 0x36
 800056c:	f000 f990 	bl	8000890 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b0f      	cmp	r3, #15
 8000574:	d808      	bhi.n	8000588 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000576:	2200      	movs	r2, #0
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	2036      	movs	r0, #54	; 0x36
 800057c:	f000 f96c 	bl	8000858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_InitTick+0xf0>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e002      	b.n	800058e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800058e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000592:	4618      	mov	r0, r3
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	431bde83 	.word	0x431bde83
 80005a4:	20000328 	.word	0x20000328
 80005a8:	40001000 	.word	0x40001000
 80005ac:	20000004 	.word	0x20000004

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80005e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005e4:	f000 fb24 	bl	8000c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM6_DAC_IRQHandler+0x10>)
 80005f2:	f001 fa87 	bl	8001b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000328 	.word	0x20000328

08000600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SystemInit+0x20>)
 8000606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <SystemInit+0x20>)
 800060c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800065c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000628:	f7ff ffea 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000652:	f004 f859 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000656:	f7ff fdd5 	bl	8000204 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800065c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000668:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 800066c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000670:	200011c4 	.word	0x200011c4

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>

08000676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 f8de 	bl	8000842 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000686:	200f      	movs	r0, #15
 8000688:	f7ff ff18 	bl	80004bc <HAL_InitTick>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	e001      	b.n	800069c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000698:	f7ff fee8 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_IncTick+0x20>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x24>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_IncTick+0x24>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000374 	.word	0x20000374

080006d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return uwTick;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_GetTick+0x14>)
 80006d6:	681b      	ldr	r3, [r3, #0]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000374 	.word	0x20000374

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <__NVIC_EnableIRQ+0x38>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf28      	it	cs
 80007fa:	2304      	movcs	r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	2b06      	cmp	r3, #6
 8000804:	d902      	bls.n	800080c <NVIC_EncodePriority+0x30>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3b03      	subs	r3, #3
 800080a:	e000      	b.n	800080e <NVIC_EncodePriority+0x32>
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43da      	mvns	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43d9      	mvns	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	4313      	orrs	r3, r2
         );
}
 8000836:	4618      	mov	r0, r3
 8000838:	3724      	adds	r7, #36	; 0x24
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff4c 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800086a:	f7ff ff61 	bl	8000730 <__NVIC_GetPriorityGrouping>
 800086e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	6978      	ldr	r0, [r7, #20]
 8000876:	f7ff ffb1 	bl	80007dc <NVIC_EncodePriority>
 800087a:	4602      	mov	r2, r0
 800087c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff80 	bl	8000788 <__NVIC_SetPriority>
}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff54 	bl	800074c <__NVIC_EnableIRQ>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ba:	e17f      	b.n	8000bbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8171 	beq.w	8000bb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 0303 	and.w	r3, r3, #3
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d005      	beq.n	80008ec <HAL_GPIO_Init+0x40>
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d130      	bne.n	800094e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2203      	movs	r2, #3
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4313      	orrs	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000922:	2201      	movs	r2, #1
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	f003 0201 	and.w	r2, r3, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b03      	cmp	r3, #3
 8000958:	d118      	bne.n	800098c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000960:	2201      	movs	r2, #1
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	08db      	lsrs	r3, r3, #3
 8000976:	f003 0201 	and.w	r2, r3, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b03      	cmp	r3, #3
 8000996:	d017      	beq.n	80009c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d123      	bne.n	8000a1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	08da      	lsrs	r2, r3, #3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3208      	adds	r2, #8
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	220f      	movs	r2, #15
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	08da      	lsrs	r2, r3, #3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3208      	adds	r2, #8
 8000a16:	6939      	ldr	r1, [r7, #16]
 8000a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2203      	movs	r2, #3
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0203 	and.w	r2, r3, #3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 80ac 	beq.w	8000bb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b5f      	ldr	r3, [pc, #380]	; (8000bdc <HAL_GPIO_Init+0x330>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a5e      	ldr	r2, [pc, #376]	; (8000bdc <HAL_GPIO_Init+0x330>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <HAL_GPIO_Init+0x330>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a76:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <HAL_GPIO_Init+0x334>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa0:	d025      	beq.n	8000aee <HAL_GPIO_Init+0x242>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_GPIO_Init+0x338>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01f      	beq.n	8000aea <HAL_GPIO_Init+0x23e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <HAL_GPIO_Init+0x33c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d019      	beq.n	8000ae6 <HAL_GPIO_Init+0x23a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4d      	ldr	r2, [pc, #308]	; (8000bec <HAL_GPIO_Init+0x340>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x236>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4c      	ldr	r2, [pc, #304]	; (8000bf0 <HAL_GPIO_Init+0x344>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x232>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_GPIO_Init+0x348>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x22e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4a      	ldr	r2, [pc, #296]	; (8000bf8 <HAL_GPIO_Init+0x34c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x22a>
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	e00c      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	e00a      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000ada:	2305      	movs	r3, #5
 8000adc:	e008      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e004      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e002      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x244>
 8000aee:	2300      	movs	r3, #0
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	f002 0203 	and.w	r2, r2, #3
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4093      	lsls	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b00:	4937      	ldr	r1, [pc, #220]	; (8000be0 <HAL_GPIO_Init+0x334>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b32:	4a32      	ldr	r2, [pc, #200]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b5c:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b86:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_GPIO_Init+0x350>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f47f ae78 	bne.w	80008bc <HAL_GPIO_Init+0x10>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	48001000 	.word	0x48001000
 8000bf4:	48001400 	.word	0x48001400
 8000bf8:	48001800 	.word	0x48001800
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fbbc 	bl	80003cc <HAL_GPIO_EXTI_Callback>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40010400 	.word	0x40010400

08000c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000

08000c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8a:	d130      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c98:	d038      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2232      	movs	r2, #50	; 0x32
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	0c9b      	lsrs	r3, r3, #18
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc0:	e002      	b.n	8000cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d102      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f2      	bne.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce8:	d110      	bne.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e00f      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfa:	d007      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	20000000 	.word	0x20000000
 8000d24:	431bde83 	.word	0x431bde83

08000d28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e3ca      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d44:	4b94      	ldr	r3, [pc, #592]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80e4 	beq.w	8000f24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <HAL_RCC_OscConfig+0x4a>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b0c      	cmp	r3, #12
 8000d66:	f040 808b 	bne.w	8000e80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 8087 	bne.w	8000e80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d72:	4b89      	ldr	r3, [pc, #548]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x62>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e3a2      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	4b82      	ldr	r3, [pc, #520]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <HAL_RCC_OscConfig+0x7c>
 8000d9a:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	e005      	b.n	8000db0 <HAL_RCC_OscConfig+0x88>
 8000da4:	4b7c      	ldr	r3, [pc, #496]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d223      	bcs.n	8000dfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fd71 	bl	80018a0 <RCC_SetFlashLatencyFromMSIRange>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e383      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc8:	4b73      	ldr	r3, [pc, #460]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a72      	ldr	r2, [pc, #456]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b70      	ldr	r3, [pc, #448]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	496d      	ldr	r1, [pc, #436]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de6:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	4968      	ldr	r1, [pc, #416]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e025      	b.n	8000e48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfc:	4b66      	ldr	r3, [pc, #408]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a65      	ldr	r2, [pc, #404]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b63      	ldr	r3, [pc, #396]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4960      	ldr	r1, [pc, #384]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	495b      	ldr	r1, [pc, #364]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d109      	bne.n	8000e48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fd31 	bl	80018a0 <RCC_SetFlashLatencyFromMSIRange>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e343      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e48:	f000 fc4a 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b52      	ldr	r3, [pc, #328]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	4950      	ldr	r1, [pc, #320]	; (8000f9c <HAL_RCC_OscConfig+0x274>)
 8000e5a:	5ccb      	ldrb	r3, [r1, r3]
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_RCC_OscConfig+0x278>)
 8000e66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <HAL_RCC_OscConfig+0x27c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb25 	bl	80004bc <HAL_InitTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d052      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	e327      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d032      	beq.n	8000eee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a42      	ldr	r2, [pc, #264]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc1c 	bl	80006d0 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e9c:	f7ff fc18 	bl	80006d0 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e310      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4931      	ldr	r1, [pc, #196]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	492c      	ldr	r1, [pc, #176]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
 8000eec:	e01a      	b.n	8000f24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000efa:	f7ff fbe9 	bl	80006d0 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f02:	f7ff fbe5 	bl	80006d0 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e2dd      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f0      	bne.n	8000f02 <HAL_RCC_OscConfig+0x1da>
 8000f20:	e000      	b.n	8000f24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d074      	beq.n	800101a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d005      	beq.n	8000f42 <HAL_RCC_OscConfig+0x21a>
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b0c      	cmp	r3, #12
 8000f3a:	d10e      	bne.n	8000f5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d10b      	bne.n	8000f5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d064      	beq.n	8001018 <HAL_RCC_OscConfig+0x2f0>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d160      	bne.n	8001018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e2ba      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x24a>
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e026      	b.n	8000fc0 <HAL_RCC_OscConfig+0x298>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f7a:	d115      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x280>
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a02      	ldr	r2, [pc, #8]	; (8000f98 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e014      	b.n	8000fc0 <HAL_RCC_OscConfig+0x298>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	08004888 	.word	0x08004888
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000004 	.word	0x20000004
 8000fa8:	4ba0      	ldr	r3, [pc, #640]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a9f      	ldr	r2, [pc, #636]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b9d      	ldr	r3, [pc, #628]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a9c      	ldr	r2, [pc, #624]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fb82 	bl	80006d0 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fb7e 	bl	80006d0 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e276      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe2:	4b92      	ldr	r3, [pc, #584]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x2a8>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fb6e 	bl	80006d0 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fb6a 	bl	80006d0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e262      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800100a:	4b88      	ldr	r3, [pc, #544]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2d0>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d060      	beq.n	80010e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b04      	cmp	r3, #4
 800102a:	d005      	beq.n	8001038 <HAL_RCC_OscConfig+0x310>
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2b0c      	cmp	r3, #12
 8001030:	d119      	bne.n	8001066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d116      	bne.n	8001066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x328>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e23f      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b76      	ldr	r3, [pc, #472]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	061b      	lsls	r3, r3, #24
 800105e:	4973      	ldr	r1, [pc, #460]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	e040      	b.n	80010e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d023      	beq.n	80010b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106e:	4b6f      	ldr	r3, [pc, #444]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6e      	ldr	r2, [pc, #440]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fb29 	bl	80006d0 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fb25 	bl	80006d0 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e21d      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001094:	4b65      	ldr	r3, [pc, #404]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a0:	4b62      	ldr	r3, [pc, #392]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	061b      	lsls	r3, r3, #24
 80010ae:	495f      	ldr	r1, [pc, #380]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
 80010b4:	e018      	b.n	80010e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b6:	4b5d      	ldr	r3, [pc, #372]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5c      	ldr	r2, [pc, #368]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb05 	bl	80006d0 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fb01 	bl	80006d0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e1f9      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010dc:	4b53      	ldr	r3, [pc, #332]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d03c      	beq.n	800116e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01c      	beq.n	8001136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001102:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110c:	f7ff fae0 	bl	80006d0 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff fadc 	bl	80006d0 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1d4      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ef      	beq.n	8001114 <HAL_RCC_OscConfig+0x3ec>
 8001134:	e01b      	b.n	800116e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113c:	4a3b      	ldr	r2, [pc, #236]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001146:	f7ff fac3 	bl	80006d0 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fabf 	bl	80006d0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e1b7      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001160:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ef      	bne.n	800114e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80a6 	beq.w	80012c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10d      	bne.n	80011a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a4:	2301      	movs	r3, #1
 80011a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <HAL_RCC_OscConfig+0x508>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d118      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_RCC_OscConfig+0x508>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_RCC_OscConfig+0x508>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c0:	f7ff fa86 	bl	80006d0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c8:	f7ff fa82 	bl	80006d0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e17a      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_RCC_OscConfig+0x508>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_RCC_OscConfig+0x4d8>
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80011f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_RCC_OscConfig+0x504>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011fe:	e029      	b.n	8001254 <HAL_RCC_OscConfig+0x52c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b05      	cmp	r3, #5
 8001206:	d115      	bne.n	8001234 <HAL_RCC_OscConfig+0x50c>
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_RCC_OscConfig+0x504>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_RCC_OscConfig+0x504>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x52c>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
 8001234:	4b9c      	ldr	r3, [pc, #624]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a9b      	ldr	r2, [pc, #620]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001244:	4b98      	ldr	r3, [pc, #608]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a97      	ldr	r2, [pc, #604]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d016      	beq.n	800128a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fa38 	bl	80006d0 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001262:	e00a      	b.n	800127a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fa34 	bl	80006d0 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e12a      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800127c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0ed      	beq.n	8001264 <HAL_RCC_OscConfig+0x53c>
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff fa21 	bl	80006d0 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fa1d 	bl	80006d0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e113      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a8:	4b7f      	ldr	r3, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80012aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ed      	bne.n	8001292 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012bc:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a79      	ldr	r2, [pc, #484]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80012c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80fe 	beq.w	80014ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	f040 80d0 	bne.w	800147c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012dc:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d130      	bne.n	8001352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	3b01      	subs	r3, #1
 80012fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d127      	bne.n	8001352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d11f      	bne.n	8001352 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800131c:	2a07      	cmp	r2, #7
 800131e:	bf14      	ite	ne
 8001320:	2201      	movne	r2, #1
 8001322:	2200      	moveq	r2, #0
 8001324:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001326:	4293      	cmp	r3, r2
 8001328:	d113      	bne.n	8001352 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	3b01      	subs	r3, #1
 8001338:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800133a:	429a      	cmp	r2, r3
 800133c:	d109      	bne.n	8001352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	085b      	lsrs	r3, r3, #1
 800134a:	3b01      	subs	r3, #1
 800134c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d06e      	beq.n	8001430 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d069      	beq.n	800142c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0ad      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800137a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001380:	f7ff f9a6 	bl	80006d0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff f9a2 	bl	80006d0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e09a      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a6:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	4b40      	ldr	r3, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x784>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013b6:	3a01      	subs	r2, #1
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	4311      	orrs	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013c0:	0212      	lsls	r2, r2, #8
 80013c2:	4311      	orrs	r1, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013c8:	0852      	lsrs	r2, r2, #1
 80013ca:	3a01      	subs	r2, #1
 80013cc:	0552      	lsls	r2, r2, #21
 80013ce:	4311      	orrs	r1, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013d4:	0852      	lsrs	r2, r2, #1
 80013d6:	3a01      	subs	r2, #1
 80013d8:	0652      	lsls	r2, r2, #25
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013e0:	0912      	lsrs	r2, r2, #4
 80013e2:	0452      	lsls	r2, r2, #17
 80013e4:	430a      	orrs	r2, r1
 80013e6:	4930      	ldr	r1, [pc, #192]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013ec:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 80013fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001402:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001404:	f7ff f964 	bl	80006d0 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff f960 	bl	80006d0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e058      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800142a:	e050      	b.n	80014ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e04f      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d148      	bne.n	80014ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 800144e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001454:	f7ff f93c 	bl	80006d0 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff f938 	bl	80006d0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e030      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x734>
 800147a:	e028      	b.n	80014ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d023      	beq.n	80014ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_RCC_OscConfig+0x780>)
 8001488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff f91f 	bl	80006d0 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001494:	e00c      	b.n	80014b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff f91b 	bl	80006d0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d905      	bls.n	80014b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e013      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_OscConfig+0x7b0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ec      	bne.n	8001496 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x7b0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4905      	ldr	r1, [pc, #20]	; (80014d8 <HAL_RCC_OscConfig+0x7b0>)
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_OscConfig+0x7b4>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	e001      	b.n	80014ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	feeefffc 	.word	0xfeeefffc

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0e7      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d910      	bls.n	8001524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 0207 	bic.w	r2, r3, #7
 800150a:	4970      	ldr	r1, [pc, #448]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0cf      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d010      	beq.n	8001552 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153c:	429a      	cmp	r2, r3
 800153e:	d908      	bls.n	8001552 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4960      	ldr	r1, [pc, #384]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d04c      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001566:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d121      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0a6      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d115      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e09a      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e08e      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e086      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 0203 	bic.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4943      	ldr	r1, [pc, #268]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015c8:	f7ff f882 	bl	80006d0 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff f87e 	bl	80006d0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e06e      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 020c 	and.w	r2, r3, #12
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1eb      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d010      	beq.n	8001626 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001610:	429a      	cmp	r2, r3
 8001612:	d208      	bcs.n	8001626 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	492b      	ldr	r1, [pc, #172]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d210      	bcs.n	8001656 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 0207 	bic.w	r2, r3, #7
 800163c:	4923      	ldr	r1, [pc, #140]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_RCC_ClockConfig+0x1ec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e036      	b.n	80016c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4918      	ldr	r1, [pc, #96]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4910      	ldr	r1, [pc, #64]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001694:	f000 f824 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	490b      	ldr	r1, [pc, #44]	; (80016d4 <HAL_RCC_ClockConfig+0x1f4>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1fc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe feff 	bl	80004bc <HAL_InitTick>
 80016be:	4603      	mov	r3, r0
 80016c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80016c2:	7afb      	ldrb	r3, [r7, #11]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08004888 	.word	0x08004888
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004

080016e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f8:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x34>
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d121      	bne.n	8001752 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d11e      	bne.n	8001752 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e005      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800173c:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d102      	bne.n	800175e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	e004      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d101      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001766:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d134      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0xa6>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d003      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0xac>
 8001784:	e005      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001788:	617b      	str	r3, [r7, #20]
      break;
 800178a:	e005      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800178e:	617b      	str	r3, [r7, #20]
      break;
 8001790:	e002      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	617b      	str	r3, [r7, #20]
      break;
 8001796:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	3301      	adds	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	fb03 f202 	mul.w	r2, r3, r2
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	0e5b      	lsrs	r3, r3, #25
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	3301      	adds	r3, #1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017d8:	69bb      	ldr	r3, [r7, #24]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	080048a0 	.word	0x080048a0
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	007a1200 	.word	0x007a1200

080017f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_GetHCLKFreq+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000000 	.word	0x20000000

08001810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001814:	f7ff fff0 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	08004898 	.word	0x08004898

0800183c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	220f      	movs	r2, #15
 800184a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	08db      	lsrs	r3, r3, #3
 8001876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_RCC_GetClockConfig+0x60>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0207 	and.w	r2, r3, #7
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40022000 	.word	0x40022000

080018a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff f9d2 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 80018bc:	6178      	str	r0, [r7, #20]
 80018be:	e014      	b.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6593      	str	r3, [r2, #88]	; 0x58
 80018cc:	4b22      	ldr	r3, [pc, #136]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018d8:	f7ff f9c2 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 80018dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f0:	d10b      	bne.n	800190a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b80      	cmp	r3, #128	; 0x80
 80018f6:	d919      	bls.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2ba0      	cmp	r3, #160	; 0xa0
 80018fc:	d902      	bls.n	8001904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e013      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001904:	2301      	movs	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	e010      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d902      	bls.n	8001916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001910:	2303      	movs	r3, #3
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	e00a      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d102      	bne.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e004      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b70      	cmp	r3, #112	; 0x70
 8001926:	d101      	bne.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001928:	2301      	movs	r3, #1
 800192a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	4909      	ldr	r1, [pc, #36]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e049      	b.n	8001a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f841 	bl	8001a0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 f9da 	bl	8001d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d001      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e04f      	b.n	8001adc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01d      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a66:	d018      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_TIM_Base_Start_IT+0xc8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d00e      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d009      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_TIM_Base_Start_IT+0x76>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_TIM_Base_Start_IT+0xd8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d115      	bne.n	8001ac6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d015      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0xb4>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab2:	d011      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac4:	e008      	b.n	8001ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e000      	b.n	8001ada <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40012c00 	.word	0x40012c00
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40000800 	.word	0x40000800
 8001af4:	40000c00 	.word	0x40000c00
 8001af8:	40013400 	.word	0x40013400
 8001afc:	40014000 	.word	0x40014000
 8001b00:	00010007 	.word	0x00010007

08001b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d020      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0202 	mvn.w	r2, #2
 8001b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8e4 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8d6 	bl	8001d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8e7 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0204 	mvn.w	r2, #4
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8be 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8b0 	bl	8001d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8c1 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0208 	mvn.w	r2, #8
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f898 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f88a 	bl	8001d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f89b 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0210 	mvn.w	r2, #16
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2208      	movs	r2, #8
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f872 	bl	8001d1c <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f864 	bl	8001d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f875 	bl	8001d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0201 	mvn.w	r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fbe6 	bl	800043c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f906 	bl	8001ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8fe 	bl	8001eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f834 	bl	8001d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0220 	mvn.w	r2, #32
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8c6 	bl	8001e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <TIM_Base_SetConfig+0x114>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <TIM_Base_SetConfig+0x40>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d76:	d00f      	beq.n	8001d98 <TIM_Base_SetConfig+0x40>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3d      	ldr	r2, [pc, #244]	; (8001e70 <TIM_Base_SetConfig+0x118>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00b      	beq.n	8001d98 <TIM_Base_SetConfig+0x40>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3c      	ldr	r2, [pc, #240]	; (8001e74 <TIM_Base_SetConfig+0x11c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <TIM_Base_SetConfig+0x40>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3b      	ldr	r2, [pc, #236]	; (8001e78 <TIM_Base_SetConfig+0x120>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3a      	ldr	r2, [pc, #232]	; (8001e7c <TIM_Base_SetConfig+0x124>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d108      	bne.n	8001daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <TIM_Base_SetConfig+0x114>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d01b      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2c      	ldr	r2, [pc, #176]	; (8001e70 <TIM_Base_SetConfig+0x118>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d017      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <TIM_Base_SetConfig+0x11c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <TIM_Base_SetConfig+0x120>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00f      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <TIM_Base_SetConfig+0x124>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00b      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <TIM_Base_SetConfig+0x128>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <TIM_Base_SetConfig+0x12c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_Base_SetConfig+0x9a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <TIM_Base_SetConfig+0x130>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <TIM_Base_SetConfig+0x114>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00f      	beq.n	8001e50 <TIM_Base_SetConfig+0xf8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <TIM_Base_SetConfig+0x124>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00b      	beq.n	8001e50 <TIM_Base_SetConfig+0xf8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <TIM_Base_SetConfig+0x128>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0xf8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <TIM_Base_SetConfig+0x12c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0xf8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <TIM_Base_SetConfig+0x130>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40000c00 	.word	0x40000c00
 8001e7c:	40013400 	.word	0x40013400
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800

08001e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eda:	2b84      	cmp	r3, #132	; 0x84
 8001edc:	d005      	beq.n	8001eea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3303      	adds	r3, #3
 8001ee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001efe:	f3ef 8305 	mrs	r3, IPSR
 8001f02:	607b      	str	r3, [r7, #4]
  return(result);
 8001f04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f20:	f001 f926 	bl	8003170 <vTaskStartScheduler>
  
  return osOK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2c:	b089      	sub	sp, #36	; 0x24
 8001f2e:	af04      	add	r7, sp, #16
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <osThreadCreate+0x54>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685c      	ldr	r4, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691e      	ldr	r6, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffb6 	bl	8001ec8 <makeFreeRtosPriority>
 8001f5c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f66:	9202      	str	r2, [sp, #8]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	9100      	str	r1, [sp, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4632      	mov	r2, r6
 8001f70:	4629      	mov	r1, r5
 8001f72:	4620      	mov	r0, r4
 8001f74:	f000 ff1e 	bl	8002db4 <xTaskCreateStatic>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e01c      	b.n	8001fb8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685c      	ldr	r4, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f8a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff98 	bl	8001ec8 <makeFreeRtosPriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 ff60 	bl	8002e6e <xTaskCreate>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fc2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <osDelay+0x16>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	e000      	b.n	8001fda <osDelay+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 f894 	bl	8003108 <vTaskDelay>
  
  return osOK;
 8001fe0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af02      	add	r7, sp, #8
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00f      	beq.n	800201c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10a      	bne.n	8002018 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	9200      	str	r2, [sp, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2001      	movs	r0, #1
 8002010:	f000 f9be 	bl	8002390 <xQueueGenericCreateStatic>
 8002014:	4603      	mov	r3, r0
 8002016:	e016      	b.n	8002046 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	e014      	b.n	8002046 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d110      	bne.n	8002044 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002022:	2203      	movs	r2, #3
 8002024:	2100      	movs	r1, #0
 8002026:	2001      	movs	r0, #1
 8002028:	f000 fa2a 	bl	8002480 <xQueueGenericCreate>
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <osSemaphoreCreate+0x56>
 8002034:	2300      	movs	r3, #0
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa7a 	bl	8002534 <xQueueGenericSend>
      return sema;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	e000      	b.n	8002046 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002044:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	e03a      	b.n	80020de <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d103      	bne.n	800207c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e009      	b.n	8002090 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <osSemaphoreWait+0x40>
      ticks = 1;
 800208c:	2301      	movs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002090:	f7ff ff32 	bl	8001ef8 <inHandlerMode>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d017      	beq.n	80020ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800209a:	f107 0308 	add.w	r3, r7, #8
 800209e:	461a      	mov	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fcde 	bl	8002a64 <xQueueReceiveFromISR>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80020ae:	23ff      	movs	r3, #255	; 0xff
 80020b0:	e015      	b.n	80020de <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d011      	beq.n	80020dc <osSemaphoreWait+0x8c>
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <osSemaphoreWait+0x98>)
 80020ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	e008      	b.n	80020dc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fbbd 	bl	800284c <xQueueSemaphoreTake>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d001      	beq.n	80020dc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80020d8:	23ff      	movs	r3, #255	; 0xff
 80020da:	e000      	b.n	80020de <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000ed04 	.word	0xe000ed04

080020ec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80020fc:	f7ff fefc 	bl	8001ef8 <inHandlerMode>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb0f 	bl	8002730 <xQueueGiveFromISR>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d001      	beq.n	800211c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002118:	23ff      	movs	r3, #255	; 0xff
 800211a:	e017      	b.n	800214c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <osSemaphoreRelease+0x5e>
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <osSemaphoreRelease+0x68>)
 8002124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f3bf 8f4f 	dsb	sy
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	e00a      	b.n	800214a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002134:	2300      	movs	r3, #0
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9fa 	bl	8002534 <xQueueGenericSend>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d001      	beq.n	800214a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002146:	23ff      	movs	r3, #255	; 0xff
 8002148:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	e000ed04 	.word	0xe000ed04

08002158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0208 	add.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 0208 	add.w	r2, r3, #8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0208 	add.w	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d103      	bne.n	800221a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e00c      	b.n	8002234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3308      	adds	r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e002      	b.n	8002228 <vListInsert+0x2e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	d2f6      	bcs.n	8002222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6852      	ldr	r2, [r2, #4]
 800228c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d103      	bne.n	80022a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022ea:	f001 fea3 	bl	8004034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	441a      	add	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	3b01      	subs	r3, #1
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	441a      	add	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	22ff      	movs	r2, #255	; 0xff
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d114      	bne.n	800236a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01a      	beq.n	800237e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3310      	adds	r3, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f961 	bl	8003614 <xTaskRemoveFromEventList>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <xQueueGenericReset+0xcc>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	e009      	b.n	800237e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3310      	adds	r3, #16
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fef2 	bl	8002158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3324      	adds	r3, #36	; 0x24
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff feed 	bl	8002158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800237e:	f001 fe89 	bl	8004094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	e000ed04 	.word	0xe000ed04

08002390 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08e      	sub	sp, #56	; 0x38
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023b6:	bf00      	nop
 80023b8:	e7fe      	b.n	80023b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <xQueueGenericCreateStatic+0x52>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <xQueueGenericCreateStatic+0x56>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueGenericCreateStatic+0x58>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	623b      	str	r3, [r7, #32]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <xQueueGenericCreateStatic+0x7e>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <xQueueGenericCreateStatic+0x82>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <xQueueGenericCreateStatic+0x84>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	61fb      	str	r3, [r7, #28]
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800242e:	2348      	movs	r3, #72	; 0x48
 8002430:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b48      	cmp	r3, #72	; 0x48
 8002436:	d00a      	beq.n	800244e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	61bb      	str	r3, [r7, #24]
}
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800244e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002462:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4613      	mov	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f83f 	bl	80024f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002478:	4618      	mov	r0, r3
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	613b      	str	r3, [r7, #16]
}
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3348      	adds	r3, #72	; 0x48
 80024b8:	4618      	mov	r0, r3
 80024ba:	f001 fedd 	bl	8004278 <pvPortMalloc>
 80024be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d011      	beq.n	80024ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3348      	adds	r3, #72	; 0x48
 80024ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024d8:	79fa      	ldrb	r2, [r7, #7]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f805 	bl	80024f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024ea:	69bb      	ldr	r3, [r7, #24]
	}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e002      	b.n	8002516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002522:	2101      	movs	r1, #1
 8002524:	69b8      	ldr	r0, [r7, #24]
 8002526:	f7ff fecb 	bl	80022c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xQueueGenericSend+0x32>
	__asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueGenericSend+0x40>
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <xQueueGenericSend+0x44>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <xQueueGenericSend+0x46>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <xQueueGenericSend+0x60>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <xQueueGenericSend+0x6e>
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <xQueueGenericSend+0x72>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueGenericSend+0x74>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	623b      	str	r3, [r7, #32]
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c2:	f001 f9e7 	bl	8003994 <xTaskGetSchedulerState>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <xQueueGenericSend+0x9e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSend+0xa2>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSend+0xa4>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61fb      	str	r3, [r7, #28]
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025f2:	f001 fd1f 	bl	8004034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <xQueueGenericSend+0xd4>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d129      	bne.n	800265c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800260e:	f000 fac1 	bl	8002b94 <prvCopyDataToQueue>
 8002612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fff7 	bl	8003614 <xTaskRemoveFromEventList>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800262c:	4b3f      	ldr	r3, [pc, #252]	; (800272c <xQueueGenericSend+0x1f8>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	e00a      	b.n	8002654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <xQueueGenericSend+0x1f8>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002654:	f001 fd1e 	bl	8004094 <vPortExitCritical>
				return pdPASS;
 8002658:	2301      	movs	r3, #1
 800265a:	e063      	b.n	8002724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002662:	f001 fd17 	bl	8004094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002666:	2300      	movs	r3, #0
 8002668:	e05c      	b.n	8002724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f82f 	bl	80036d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800267a:	2301      	movs	r3, #1
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800267e:	f001 fd09 	bl	8004094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002682:	f000 fddf 	bl	8003244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002686:	f001 fcd5 	bl	8004034 <vPortEnterCritical>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002690:	b25b      	sxtb	r3, r3
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002696:	d103      	bne.n	80026a0 <xQueueGenericSend+0x16c>
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d103      	bne.n	80026b6 <xQueueGenericSend+0x182>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b6:	f001 fced 	bl	8004094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ba:	1d3a      	adds	r2, r7, #4
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f81e 	bl	8003704 <xTaskCheckForTimeOut>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d124      	bne.n	8002718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d0:	f000 fb58 	bl	8002d84 <prvIsQueueFull>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d018      	beq.n	800270c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	3310      	adds	r3, #16
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 ff72 	bl	80035cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fae3 	bl	8002cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026ee:	f000 fdb7 	bl	8003260 <xTaskResumeAll>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af7c 	bne.w	80025f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <xQueueGenericSend+0x1f8>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	e772      	b.n	80025f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800270c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800270e:	f000 fad1 	bl	8002cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002712:	f000 fda5 	bl	8003260 <xTaskResumeAll>
 8002716:	e76c      	b.n	80025f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800271a:	f000 facb 	bl	8002cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800271e:	f000 fd9f 	bl	8003260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002724:	4618      	mov	r0, r3
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	623b      	str	r3, [r7, #32]
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	61fb      	str	r3, [r7, #28]
}
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <xQueueGiveFromISR+0x58>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <xQueueGiveFromISR+0x5c>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <xQueueGiveFromISR+0x5e>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	61bb      	str	r3, [r7, #24]
}
 80027a4:	bf00      	nop
 80027a6:	e7fe      	b.n	80027a6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027a8:	f001 fd26 	bl	80041f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027ac:	f3ef 8211 	mrs	r2, BASEPRI
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	617a      	str	r2, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d22b      	bcs.n	8002830 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d112      	bne.n	800281a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	4618      	mov	r0, r3
 8002802:	f000 ff07 	bl	8003614 <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e007      	b.n	800282a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281e:	3301      	adds	r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	b25a      	sxtb	r2, r3
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800282a:	2301      	movs	r3, #1
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
 800282e:	e001      	b.n	8002834 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800283e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002842:	4618      	mov	r0, r3
 8002844:	3738      	adds	r7, #56	; 0x38
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08e      	sub	sp, #56	; 0x38
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800285e:	2300      	movs	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	623b      	str	r3, [r7, #32]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	61fb      	str	r3, [r7, #28]
}
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800289c:	f001 f87a 	bl	8003994 <xTaskGetSchedulerState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <xQueueSemaphoreTake+0x60>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <xQueueSemaphoreTake+0x64>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <xQueueSemaphoreTake+0x66>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	61bb      	str	r3, [r7, #24]
}
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028cc:	f001 fbb2 	bl	8004034 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d024      	beq.n	8002926 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80028dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80028ec:	f001 f9fa 	bl	8003ce4 <pvTaskIncrementMutexHeldCount>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00f      	beq.n	800291e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	3310      	adds	r3, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe86 	bl	8003614 <xTaskRemoveFromEventList>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <xQueueSemaphoreTake+0x214>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800291e:	f001 fbb9 	bl	8004094 <vPortExitCritical>
				return pdPASS;
 8002922:	2301      	movs	r3, #1
 8002924:	e097      	b.n	8002a56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d111      	bne.n	8002950 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	617b      	str	r3, [r7, #20]
}
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002948:	f001 fba4 	bl	8004094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800294c:	2300      	movs	r3, #0
 800294e:	e082      	b.n	8002a56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	4618      	mov	r0, r3
 800295c:	f000 febc 	bl	80036d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002964:	f001 fb96 	bl	8004094 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002968:	f000 fc6c 	bl	8003244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800296c:	f001 fb62 	bl	8004034 <vPortEnterCritical>
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <xQueueSemaphoreTake+0x13a>
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298c:	b25b      	sxtb	r3, r3
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d103      	bne.n	800299c <xQueueSemaphoreTake+0x150>
 8002994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800299c:	f001 fb7a 	bl	8004094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a0:	463a      	mov	r2, r7
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 feab 	bl	8003704 <xTaskCheckForTimeOut>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d132      	bne.n	8002a1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029b6:	f000 f9cf 	bl	8002d58 <prvIsQueueEmpty>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d026      	beq.n	8002a0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80029c8:	f001 fb34 	bl	8004034 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fffd 	bl	80039d0 <xTaskPriorityInherit>
 80029d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80029d8:	f001 fb5c 	bl	8004094 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fdf1 	bl	80035cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ec:	f000 f962 	bl	8002cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029f0:	f000 fc36 	bl	8003260 <xTaskResumeAll>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f af68 	bne.w	80028cc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <xQueueSemaphoreTake+0x214>)
 80029fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	e75e      	b.n	80028cc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a10:	f000 f950 	bl	8002cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a14:	f000 fc24 	bl	8003260 <xTaskResumeAll>
 8002a18:	e758      	b.n	80028cc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a1c:	f000 f94a 	bl	8002cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a20:	f000 fc1e 	bl	8003260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a26:	f000 f997 	bl	8002d58 <prvIsQueueEmpty>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f43f af4d 	beq.w	80028cc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002a38:	f001 fafc 	bl	8004034 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a3e:	f000 f891 	bl	8002b64 <prvGetDisinheritPriorityAfterTimeout>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f8bc 	bl	8003bc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002a50:	f001 fb20 	bl	8004094 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3738      	adds	r7, #56	; 0x38
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000ed04 	.word	0xe000ed04

08002a64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	623b      	str	r3, [r7, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <xQueueReceiveFromISR+0x3a>
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <xQueueReceiveFromISR+0x3e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <xQueueReceiveFromISR+0x40>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	61fb      	str	r3, [r7, #28]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002abe:	f001 fb9b 	bl	80041f8 <vPortValidateInterruptPriority>
	__asm volatile
 8002ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	61ba      	str	r2, [r7, #24]
 8002ad8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002ada:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02f      	beq.n	8002b4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af8:	f000 f8b6 	bl	8002c68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d112      	bne.n	8002b34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	3310      	adds	r3, #16
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fd7a 	bl	8003614 <xTaskRemoveFromEventList>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e007      	b.n	8002b44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	b25a      	sxtb	r2, r3
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002b44:	2301      	movs	r3, #1
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
 8002b48:	e001      	b.n	8002b4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f383 8811 	msr	BASEPRI, r3
}
 8002b58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e001      	b.n	8002b86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002b86:	68fb      	ldr	r3, [r7, #12]
	}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d14d      	bne.n	8002c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 ff7c 	bl	8003abc <xTaskPriorityDisinherit>
 8002bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e043      	b.n	8002c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d119      	bne.n	8002c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6858      	ldr	r0, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	f001 fdb8 	bl	8004754 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	441a      	add	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d32b      	bcc.n	8002c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	e026      	b.n	8002c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68d8      	ldr	r0, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	461a      	mov	r2, r3
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	f001 fd9e 	bl	8004754 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	425b      	negs	r3, r3
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d207      	bcs.n	8002c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	425b      	negs	r3, r3
 8002c3e:	441a      	add	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d105      	bne.n	8002c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c5e:	697b      	ldr	r3, [r7, #20]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d303      	bcc.n	8002c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	6838      	ldr	r0, [r7, #0]
 8002ca8:	f001 fd54 	bl	8004754 <memcpy>
	}
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cbc:	f001 f9ba 	bl	8004034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc8:	e011      	b.n	8002cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3324      	adds	r3, #36	; 0x24
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fc9c 	bl	8003614 <xTaskRemoveFromEventList>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ce2:	f000 fd71 	bl	80037c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	dce9      	bgt.n	8002cca <prvUnlockQueue+0x16>
 8002cf6:	e000      	b.n	8002cfa <prvUnlockQueue+0x46>
					break;
 8002cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	22ff      	movs	r2, #255	; 0xff
 8002cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d02:	f001 f9c7 	bl	8004094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d06:	f001 f995 	bl	8004034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d12:	e011      	b.n	8002d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3310      	adds	r3, #16
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fc77 	bl	8003614 <xTaskRemoveFromEventList>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d2c:	f000 fd4c 	bl	80037c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	dce9      	bgt.n	8002d14 <prvUnlockQueue+0x60>
 8002d40:	e000      	b.n	8002d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d4c:	f001 f9a2 	bl	8004094 <vPortExitCritical>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d60:	f001 f968 	bl	8004034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e001      	b.n	8002d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d76:	f001 f98d 	bl	8004094 <vPortExitCritical>

	return xReturn;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d8c:	f001 f952 	bl	8004034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d102      	bne.n	8002da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e001      	b.n	8002da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002da6:	f001 f975 	bl	8004094 <vPortExitCritical>

	return xReturn;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xTaskCreateStatic+0x2a>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	623b      	str	r3, [r7, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <xTaskCreateStatic+0x46>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61fb      	str	r3, [r7, #28]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dfa:	23a0      	movs	r3, #160	; 0xa0
 8002dfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2ba0      	cmp	r3, #160	; 0xa0
 8002e02:	d00a      	beq.n	8002e1a <xTaskCreateStatic+0x66>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61bb      	str	r3, [r7, #24]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01e      	beq.n	8002e60 <xTaskCreateStatic+0xac>
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f850 	bl	8002ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e5a:	f000 f8eb 	bl	8003034 <prvAddNewTaskToReadyList>
 8002e5e:	e001      	b.n	8002e64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e64:	697b      	ldr	r3, [r7, #20]
	}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b08c      	sub	sp, #48	; 0x30
 8002e72:	af04      	add	r7, sp, #16
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f9f8 	bl	8004278 <pvPortMalloc>
 8002e88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e90:	20a0      	movs	r0, #160	; 0xa0
 8002e92:	f001 f9f1 	bl	8004278 <pvPortMalloc>
 8002e96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea4:	e005      	b.n	8002eb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f001 fab2 	bl	8004410 <vPortFree>
 8002eac:	e001      	b.n	8002eb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	9303      	str	r3, [sp, #12]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	9302      	str	r3, [sp, #8]
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f80e 	bl	8002ef8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002edc:	69f8      	ldr	r0, [r7, #28]
 8002ede:	f000 f8a9 	bl	8003034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e002      	b.n	8002eee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eee:	69bb      	ldr	r3, [r7, #24]
	}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3720      	adds	r7, #32
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f10:	3b01      	subs	r3, #1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	617b      	str	r3, [r7, #20]
}
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01f      	beq.n	8002f86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e012      	b.n	8002f72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	7819      	ldrb	r1, [r3, #0]
 8002f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3334      	adds	r3, #52	; 0x34
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d006      	beq.n	8002f7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d9e9      	bls.n	8002f4c <prvInitialiseNewTask+0x54>
 8002f78:	e000      	b.n	8002f7c <prvInitialiseNewTask+0x84>
			{
				break;
 8002f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f84:	e003      	b.n	8002f8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d901      	bls.n	8002f98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f94:	2306      	movs	r3, #6
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	3304      	adds	r3, #4
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f8f2 	bl	8002198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f8ed 	bl	8002198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	f1c3 0207 	rsb	r2, r3, #7
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	334c      	adds	r3, #76	; 0x4c
 8002fe8:	224c      	movs	r2, #76	; 0x4c
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 fb2d 	bl	800464c <memset>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <prvInitialiseNewTask+0x130>)
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <prvInitialiseNewTask+0x134>)
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <prvInitialiseNewTask+0x138>)
 8003002:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	69b8      	ldr	r0, [r7, #24]
 800300a:	f000 fee5 	bl	8003dd8 <pxPortInitialiseStack>
 800300e:	4602      	mov	r2, r0
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003020:	bf00      	nop
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20001084 	.word	0x20001084
 800302c:	200010ec 	.word	0x200010ec
 8003030:	20001154 	.word	0x20001154

08003034 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800303c:	f000 fffa 	bl	8004034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <prvAddNewTaskToReadyList+0xb8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <prvAddNewTaskToReadyList+0xb8>)
 8003048:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <prvAddNewTaskToReadyList+0xbc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003052:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <prvAddNewTaskToReadyList+0xbc>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003058:	4b24      	ldr	r3, [pc, #144]	; (80030ec <prvAddNewTaskToReadyList+0xb8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d110      	bne.n	8003082 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003060:	f000 fbd6 	bl	8003810 <prvInitialiseTaskLists>
 8003064:	e00d      	b.n	8003082 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <prvAddNewTaskToReadyList+0xc0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <prvAddNewTaskToReadyList+0xbc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
 800307a:	d802      	bhi.n	8003082 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <prvAddNewTaskToReadyList+0xbc>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <prvAddNewTaskToReadyList+0xc4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <prvAddNewTaskToReadyList+0xc4>)
 800308a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2201      	movs	r2, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <prvAddNewTaskToReadyList+0xc8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <prvAddNewTaskToReadyList+0xc8>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <prvAddNewTaskToReadyList+0xcc>)
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7ff f87c 	bl	80021b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030ba:	f000 ffeb 	bl	8004094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <prvAddNewTaskToReadyList+0xc0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00e      	beq.n	80030e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <prvAddNewTaskToReadyList+0xbc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d207      	bcs.n	80030e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <prvAddNewTaskToReadyList+0xd0>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000478 	.word	0x20000478
 80030f0:	20000378 	.word	0x20000378
 80030f4:	20000484 	.word	0x20000484
 80030f8:	20000494 	.word	0x20000494
 80030fc:	20000480 	.word	0x20000480
 8003100:	2000037c 	.word	0x2000037c
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d017      	beq.n	800314a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <vTaskDelay+0x60>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <vTaskDelay+0x30>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60bb      	str	r3, [r7, #8]
}
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003138:	f000 f884 	bl	8003244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800313c:	2100      	movs	r1, #0
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fde4 	bl	8003d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003144:	f000 f88c 	bl	8003260 <xTaskResumeAll>
 8003148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <vTaskDelay+0x64>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200004a0 	.word	0x200004a0
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800317e:	463a      	mov	r2, r7
 8003180:	1d39      	adds	r1, r7, #4
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f822 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	9202      	str	r2, [sp, #8]
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2300      	movs	r3, #0
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	460a      	mov	r2, r1
 800319e:	4921      	ldr	r1, [pc, #132]	; (8003224 <vTaskStartScheduler+0xb4>)
 80031a0:	4821      	ldr	r0, [pc, #132]	; (8003228 <vTaskStartScheduler+0xb8>)
 80031a2:	f7ff fe07 	bl	8002db4 <xTaskCreateStatic>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4a20      	ldr	r2, [pc, #128]	; (800322c <vTaskStartScheduler+0xbc>)
 80031aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <vTaskStartScheduler+0xbc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031b4:	2301      	movs	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e001      	b.n	80031be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d11b      	bne.n	80031fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	613b      	str	r3, [r7, #16]
}
 80031d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <vTaskStartScheduler+0xc0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	334c      	adds	r3, #76	; 0x4c
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <vTaskStartScheduler+0xc4>)
 80031e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <vTaskStartScheduler+0xc8>)
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <vTaskStartScheduler+0xcc>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <vTaskStartScheduler+0xd0>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031f6:	f000 fe7b 	bl	8003ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031fa:	e00e      	b.n	800321a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d10a      	bne.n	800321a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	60fb      	str	r3, [r7, #12]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <vTaskStartScheduler+0xa8>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	08004880 	.word	0x08004880
 8003228:	080037e1 	.word	0x080037e1
 800322c:	2000049c 	.word	0x2000049c
 8003230:	20000378 	.word	0x20000378
 8003234:	2000005c 	.word	0x2000005c
 8003238:	20000498 	.word	0x20000498
 800323c:	20000484 	.word	0x20000484
 8003240:	2000047c 	.word	0x2000047c

08003244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <vTaskSuspendAll+0x18>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <vTaskSuspendAll+0x18>)
 8003250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	200004a0 	.word	0x200004a0

08003260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <xTaskResumeAll+0x114>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xTaskResumeAll+0x2c>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	603b      	str	r3, [r7, #0]
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800328c:	f000 fed2 	bl	8004034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003290:	4b38      	ldr	r3, [pc, #224]	; (8003374 <xTaskResumeAll+0x114>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	4a37      	ldr	r2, [pc, #220]	; (8003374 <xTaskResumeAll+0x114>)
 8003298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <xTaskResumeAll+0x114>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d161      	bne.n	8003366 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <xTaskResumeAll+0x118>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d05d      	beq.n	8003366 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032aa:	e02e      	b.n	800330a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <xTaskResumeAll+0x11c>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3318      	adds	r3, #24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ffd7 	bl	800226c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ffd2 	bl	800226c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <xTaskResumeAll+0x120>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <xTaskResumeAll+0x120>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a27      	ldr	r2, [pc, #156]	; (8003384 <xTaskResumeAll+0x124>)
 80032e8:	441a      	add	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fe ff5e 	bl	80021b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4b23      	ldr	r3, [pc, #140]	; (8003388 <xTaskResumeAll+0x128>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003304:	4b21      	ldr	r3, [pc, #132]	; (800338c <xTaskResumeAll+0x12c>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800330a:	4b1c      	ldr	r3, [pc, #112]	; (800337c <xTaskResumeAll+0x11c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1cc      	bne.n	80032ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003318:	f000 fb1c 	bl	8003954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <xTaskResumeAll+0x130>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003328:	f000 f836 	bl	8003398 <xTaskIncrementTick>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <xTaskResumeAll+0x12c>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f1      	bne.n	8003328 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <xTaskResumeAll+0x130>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <xTaskResumeAll+0x12c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003352:	2301      	movs	r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <xTaskResumeAll+0x134>)
 8003358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003366:	f000 fe95 	bl	8004094 <vPortExitCritical>

	return xAlreadyYielded;
 800336a:	68bb      	ldr	r3, [r7, #8]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200004a0 	.word	0x200004a0
 8003378:	20000478 	.word	0x20000478
 800337c:	20000438 	.word	0x20000438
 8003380:	20000480 	.word	0x20000480
 8003384:	2000037c 	.word	0x2000037c
 8003388:	20000378 	.word	0x20000378
 800338c:	2000048c 	.word	0x2000048c
 8003390:	20000488 	.word	0x20000488
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <xTaskIncrementTick+0x144>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 808e 	bne.w	80034c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <xTaskIncrementTick+0x148>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033b4:	4a4a      	ldr	r2, [pc, #296]	; (80034e0 <xTaskIncrementTick+0x148>)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d120      	bne.n	8003402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033c0:	4b48      	ldr	r3, [pc, #288]	; (80034e4 <xTaskIncrementTick+0x14c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	603b      	str	r3, [r7, #0]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xTaskIncrementTick+0x46>
 80033e0:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <xTaskIncrementTick+0x14c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <xTaskIncrementTick+0x150>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <xTaskIncrementTick+0x14c>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4a3e      	ldr	r2, [pc, #248]	; (80034e8 <xTaskIncrementTick+0x150>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <xTaskIncrementTick+0x154>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a3c      	ldr	r2, [pc, #240]	; (80034ec <xTaskIncrementTick+0x154>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	f000 faa9 	bl	8003954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <xTaskIncrementTick+0x158>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d348      	bcc.n	800349e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <xTaskIncrementTick+0x14c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d104      	bne.n	8003420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <xTaskIncrementTick+0x158>)
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	601a      	str	r2, [r3, #0]
					break;
 800341e:	e03e      	b.n	800349e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <xTaskIncrementTick+0x14c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d203      	bcs.n	8003440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003438:	4a2d      	ldr	r2, [pc, #180]	; (80034f0 <xTaskIncrementTick+0x158>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800343e:	e02e      	b.n	800349e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe ff11 	bl	800226c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3318      	adds	r3, #24
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe ff08 	bl	800226c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <xTaskIncrementTick+0x15c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <xTaskIncrementTick+0x15c>)
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <xTaskIncrementTick+0x160>)
 800347c:	441a      	add	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3304      	adds	r3, #4
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7fe fe94 	bl	80021b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <xTaskIncrementTick+0x164>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	429a      	cmp	r2, r3
 8003496:	d3b9      	bcc.n	800340c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349c:	e7b6      	b.n	800340c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <xTaskIncrementTick+0x164>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	4914      	ldr	r1, [pc, #80]	; (80034f8 <xTaskIncrementTick+0x160>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d901      	bls.n	80034ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <xTaskIncrementTick+0x168>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e004      	b.n	80034d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <xTaskIncrementTick+0x16c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <xTaskIncrementTick+0x16c>)
 80034d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200004a0 	.word	0x200004a0
 80034e0:	2000047c 	.word	0x2000047c
 80034e4:	20000430 	.word	0x20000430
 80034e8:	20000434 	.word	0x20000434
 80034ec:	20000490 	.word	0x20000490
 80034f0:	20000498 	.word	0x20000498
 80034f4:	20000480 	.word	0x20000480
 80034f8:	2000037c 	.word	0x2000037c
 80034fc:	20000378 	.word	0x20000378
 8003500:	2000048c 	.word	0x2000048c
 8003504:	20000488 	.word	0x20000488

08003508 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800350e:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <vTaskSwitchContext+0xac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003516:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <vTaskSwitchContext+0xb0>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800351c:	e044      	b.n	80035a8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <vTaskSwitchContext+0xb0>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <vTaskSwitchContext+0xb4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f1c3 031f 	rsb	r3, r3, #31
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4921      	ldr	r1, [pc, #132]	; (80035c0 <vTaskSwitchContext+0xb8>)
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <vTaskSwitchContext+0x5c>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <vTaskSwitchContext+0x5a>
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <vTaskSwitchContext+0xb8>)
 8003570:	4413      	add	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	3308      	adds	r3, #8
 8003586:	429a      	cmp	r2, r3
 8003588:	d104      	bne.n	8003594 <vTaskSwitchContext+0x8c>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <vTaskSwitchContext+0xbc>)
 800359c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <vTaskSwitchContext+0xbc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <vTaskSwitchContext+0xc0>)
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	200004a0 	.word	0x200004a0
 80035b8:	2000048c 	.word	0x2000048c
 80035bc:	20000480 	.word	0x20000480
 80035c0:	2000037c 	.word	0x2000037c
 80035c4:	20000378 	.word	0x20000378
 80035c8:	2000005c 	.word	0x2000005c

080035cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60fb      	str	r3, [r7, #12]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <vTaskPlaceOnEventList+0x44>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3318      	adds	r3, #24
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fdfd 	bl	80021fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003600:	2101      	movs	r1, #1
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f000 fb82 	bl	8003d0c <prvAddCurrentTaskToDelayedList>
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000378 	.word	0x20000378

08003614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3318      	adds	r3, #24
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fe11 	bl	800226c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <xTaskRemoveFromEventList+0xac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11c      	bne.n	800368c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	3304      	adds	r3, #4
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe08 	bl	800226c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	2201      	movs	r2, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <xTaskRemoveFromEventList+0xb0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <xTaskRemoveFromEventList+0xb0>)
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <xTaskRemoveFromEventList+0xb4>)
 800367c:	441a      	add	r2, r3
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe fd94 	bl	80021b2 <vListInsertEnd>
 800368a:	e005      	b.n	8003698 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3318      	adds	r3, #24
 8003690:	4619      	mov	r1, r3
 8003692:	480e      	ldr	r0, [pc, #56]	; (80036cc <xTaskRemoveFromEventList+0xb8>)
 8003694:	f7fe fd8d 	bl	80021b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <xTaskRemoveFromEventList+0xbc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d905      	bls.n	80036b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <xTaskRemoveFromEventList+0xc0>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e001      	b.n	80036b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036b6:	697b      	ldr	r3, [r7, #20]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200004a0 	.word	0x200004a0
 80036c4:	20000480 	.word	0x20000480
 80036c8:	2000037c 	.word	0x2000037c
 80036cc:	20000438 	.word	0x20000438
 80036d0:	20000378 	.word	0x20000378
 80036d4:	2000048c 	.word	0x2000048c

080036d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <vTaskInternalSetTimeOutState+0x24>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <vTaskInternalSetTimeOutState+0x28>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	20000490 	.word	0x20000490
 8003700:	2000047c 	.word	0x2000047c

08003704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	613b      	str	r3, [r7, #16]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	60fb      	str	r3, [r7, #12]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003746:	f000 fc75 	bl	8004034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <xTaskCheckForTimeOut+0xbc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d102      	bne.n	800376a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e023      	b.n	80037b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <xTaskCheckForTimeOut+0xc0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d007      	beq.n	8003786 <xTaskCheckForTimeOut+0x82>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	e015      	b.n	80037b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	d20b      	bcs.n	80037a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff9b 	bl	80036d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	e004      	b.n	80037b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037b2:	f000 fc6f 	bl	8004094 <vPortExitCritical>

	return xReturn;
 80037b6:	69fb      	ldr	r3, [r7, #28]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	2000047c 	.word	0x2000047c
 80037c4:	20000490 	.word	0x20000490

080037c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <vTaskMissedYield+0x14>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	2000048c 	.word	0x2000048c

080037e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037e8:	f000 f852 	bl	8003890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <prvIdleTask+0x28>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d9f9      	bls.n	80037e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <prvIdleTask+0x2c>)
 80037f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003804:	e7f0      	b.n	80037e8 <prvIdleTask+0x8>
 8003806:	bf00      	nop
 8003808:	2000037c 	.word	0x2000037c
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	e00c      	b.n	8003836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <prvInitialiseTaskLists+0x60>)
 8003828:	4413      	add	r3, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fc94 	bl	8002158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3301      	adds	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b06      	cmp	r3, #6
 800383a:	d9ef      	bls.n	800381c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <prvInitialiseTaskLists+0x64>)
 800383e:	f7fe fc8b 	bl	8002158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003842:	480d      	ldr	r0, [pc, #52]	; (8003878 <prvInitialiseTaskLists+0x68>)
 8003844:	f7fe fc88 	bl	8002158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003848:	480c      	ldr	r0, [pc, #48]	; (800387c <prvInitialiseTaskLists+0x6c>)
 800384a:	f7fe fc85 	bl	8002158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800384e:	480c      	ldr	r0, [pc, #48]	; (8003880 <prvInitialiseTaskLists+0x70>)
 8003850:	f7fe fc82 	bl	8002158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003854:	480b      	ldr	r0, [pc, #44]	; (8003884 <prvInitialiseTaskLists+0x74>)
 8003856:	f7fe fc7f 	bl	8002158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <prvInitialiseTaskLists+0x78>)
 800385c:	4a05      	ldr	r2, [pc, #20]	; (8003874 <prvInitialiseTaskLists+0x64>)
 800385e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <prvInitialiseTaskLists+0x7c>)
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <prvInitialiseTaskLists+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000037c 	.word	0x2000037c
 8003874:	20000408 	.word	0x20000408
 8003878:	2000041c 	.word	0x2000041c
 800387c:	20000438 	.word	0x20000438
 8003880:	2000044c 	.word	0x2000044c
 8003884:	20000464 	.word	0x20000464
 8003888:	20000430 	.word	0x20000430
 800388c:	20000434 	.word	0x20000434

08003890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003896:	e019      	b.n	80038cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003898:	f000 fbcc 	bl	8004034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <prvCheckTasksWaitingTermination+0x50>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fcdf 	bl	800226c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <prvCheckTasksWaitingTermination+0x54>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <prvCheckTasksWaitingTermination+0x54>)
 80038b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038b8:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <prvCheckTasksWaitingTermination+0x58>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <prvCheckTasksWaitingTermination+0x58>)
 80038c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038c2:	f000 fbe7 	bl	8004094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f810 	bl	80038ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <prvCheckTasksWaitingTermination+0x58>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e1      	bne.n	8003898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000044c 	.word	0x2000044c
 80038e4:	20000478 	.word	0x20000478
 80038e8:	20000460 	.word	0x20000460

080038ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	334c      	adds	r3, #76	; 0x4c
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 feaf 	bl	800465c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fd7f 	bl	8004410 <vPortFree>
				vPortFree( pxTCB );
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fd7c 	bl	8004410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003918:	e018      	b.n	800394c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003920:	2b01      	cmp	r3, #1
 8003922:	d103      	bne.n	800392c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fd73 	bl	8004410 <vPortFree>
	}
 800392a:	e00f      	b.n	800394c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8003932:	2b02      	cmp	r3, #2
 8003934:	d00a      	beq.n	800394c <prvDeleteTCB+0x60>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	60fb      	str	r3, [r7, #12]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <prvDeleteTCB+0x5e>
	}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <prvResetNextTaskUnblockTime+0x38>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d104      	bne.n	800396e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <prvResetNextTaskUnblockTime+0x3c>)
 8003966:	f04f 32ff 	mov.w	r2, #4294967295
 800396a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800396c:	e008      	b.n	8003980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <prvResetNextTaskUnblockTime+0x38>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a04      	ldr	r2, [pc, #16]	; (8003990 <prvResetNextTaskUnblockTime+0x3c>)
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000430 	.word	0x20000430
 8003990:	20000498 	.word	0x20000498

08003994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <xTaskGetSchedulerState+0x34>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039a2:	2301      	movs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e008      	b.n	80039ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <xTaskGetSchedulerState+0x38>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039b0:	2302      	movs	r3, #2
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e001      	b.n	80039ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039ba:	687b      	ldr	r3, [r7, #4]
	}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000484 	.word	0x20000484
 80039cc:	200004a0 	.word	0x200004a0

080039d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d05e      	beq.n	8003aa4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <xTaskPriorityInherit+0xe0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d24e      	bcs.n	8003a92 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db06      	blt.n	8003a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <xTaskPriorityInherit+0xe0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	f1c3 0207 	rsb	r2, r3, #7
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6959      	ldr	r1, [r3, #20]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <xTaskPriorityInherit+0xe4>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4299      	cmp	r1, r3
 8003a20:	d12f      	bne.n	8003a82 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fc20 	bl	800226c <uxListRemove>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <xTaskPriorityInherit+0xe8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4013      	ands	r3, r2
 8003a44:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <xTaskPriorityInherit+0xe8>)
 8003a46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <xTaskPriorityInherit+0xe0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <xTaskPriorityInherit+0xe8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <xTaskPriorityInherit+0xe8>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4a10      	ldr	r2, [pc, #64]	; (8003ab4 <xTaskPriorityInherit+0xe4>)
 8003a72:	441a      	add	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f7fe fb99 	bl	80021b2 <vListInsertEnd>
 8003a80:	e004      	b.n	8003a8c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <xTaskPriorityInherit+0xe0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e008      	b.n	8003aa4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <xTaskPriorityInherit+0xe0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d201      	bcs.n	8003aa4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
	}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000378 	.word	0x20000378
 8003ab4:	2000037c 	.word	0x2000037c
 8003ab8:	20000480 	.word	0x20000480

08003abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06e      	beq.n	8003bb0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <xTaskPriorityDisinherit+0x100>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d00a      	beq.n	8003af2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60bb      	str	r3, [r7, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d044      	beq.n	8003bb0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d140      	bne.n	8003bb0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe fb9a 	bl	800226c <uxListRemove>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	491f      	ldr	r1, [pc, #124]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xTaskPriorityDisinherit+0xae>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <xTaskPriorityDisinherit+0x108>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4013      	ands	r3, r2
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <xTaskPriorityDisinherit+0x108>)
 8003b68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f1c3 0207 	rsb	r2, r3, #7
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <xTaskPriorityDisinherit+0x108>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <xTaskPriorityDisinherit+0x108>)
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b9e:	441a      	add	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7fe fb03 	bl	80021b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bb0:	697b      	ldr	r3, [r7, #20]
	}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000378 	.word	0x20000378
 8003bc0:	2000037c 	.word	0x2000037c
 8003bc4:	20000480 	.word	0x20000480

08003bc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d077      	beq.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60fb      	str	r3, [r7, #12]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e002      	b.n	8003c14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d058      	beq.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d153      	bne.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10a      	bne.n	8003c48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60bb      	str	r3, [r7, #8]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db04      	blt.n	8003c66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f1c3 0207 	rsb	r2, r3, #7
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003c76:	4413      	add	r3, r2
 8003c78:	4299      	cmp	r1, r3
 8003c7a:	d129      	bne.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe faf3 	bl	800226c <uxListRemove>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ca0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7fe fa71 	bl	80021b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cd0:	bf00      	nop
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000378 	.word	0x20000378
 8003cdc:	2000037c 	.word	0x2000037c
 8003ce0:	20000480 	.word	0x20000480

08003ce4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf6:	3201      	adds	r2, #1
 8003cf8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003cfa:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
	}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000378 	.word	0x20000378

08003d0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d1c:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe faa2 	bl	800226c <uxListRemove>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2201      	movs	r2, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4013      	ands	r3, r2
 8003d42:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d10a      	bne.n	8003d64 <prvAddCurrentTaskToDelayedList+0x58>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	481a      	ldr	r0, [pc, #104]	; (8003dc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d5e:	f7fe fa28 	bl	80021b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d62:	e026      	b.n	8003db2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d209      	bcs.n	8003d90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f7fe fa36 	bl	80021fa <vListInsert>
}
 8003d8e:	e010      	b.n	8003db2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fa2c 	bl	80021fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d202      	bcs.n	8003db2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000047c 	.word	0x2000047c
 8003dc0:	20000378 	.word	0x20000378
 8003dc4:	20000480 	.word	0x20000480
 8003dc8:	20000464 	.word	0x20000464
 8003dcc:	20000434 	.word	0x20000434
 8003dd0:	20000430 	.word	0x20000430
 8003dd4:	20000498 	.word	0x20000498

08003dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b04      	subs	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b04      	subs	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b04      	subs	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <pxPortInitialiseStack+0x64>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b14      	subs	r3, #20
 8003e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f06f 0202 	mvn.w	r2, #2
 8003e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b20      	subs	r3, #32
 8003e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	08003e41 	.word	0x08003e41

08003e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <prvTaskExitError+0x54>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d00a      	beq.n	8003e6a <prvTaskExitError+0x2a>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <prvTaskExitError+0x28>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60bb      	str	r3, [r7, #8]
}
 8003e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e7e:	bf00      	nop
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0fc      	beq.n	8003e80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	2000000c 	.word	0x2000000c
	...

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	4770      	bx	lr
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ec8:	4808      	ldr	r0, [pc, #32]	; (8003eec <prvPortStartFirstTask+0x24>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8814 	msr	CONTROL, r0
 8003eda:	b662      	cpsie	i
 8003edc:	b661      	cpsie	f
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	df00      	svc	0
 8003ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eea:	bf00      	nop
 8003eec:	e000ed08 	.word	0xe000ed08

08003ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <xPortStartScheduler+0x120>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a46      	ldr	r2, [pc, #280]	; (8004014 <xPortStartScheduler+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10a      	bne.n	8003f16 <xPortStartScheduler+0x26>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	613b      	str	r3, [r7, #16]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <xPortStartScheduler+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <xPortStartScheduler+0x128>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10a      	bne.n	8003f36 <xPortStartScheduler+0x46>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <xPortStartScheduler+0x12c>)
 8003f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <xPortStartScheduler+0x130>)
 8003f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <xPortStartScheduler+0x134>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f64:	e009      	b.n	8003f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <xPortStartScheduler+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <xPortStartScheduler+0x134>)
 8003f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d0ef      	beq.n	8003f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00a      	beq.n	8003fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <xPortStartScheduler+0x134>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <xPortStartScheduler+0x134>)
 8003fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <xPortStartScheduler+0x138>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <xPortStartScheduler+0x138>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fde:	f000 f8dd 	bl	800419c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <xPortStartScheduler+0x13c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fe8:	f000 f8fc 	bl	80041e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <xPortStartScheduler+0x140>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <xPortStartScheduler+0x140>)
 8003ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ff8:	f7ff ff66 	bl	8003ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ffc:	f7ff fa84 	bl	8003508 <vTaskSwitchContext>
	prvTaskExitError();
 8004000:	f7ff ff1e 	bl	8003e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	410fc271 	.word	0x410fc271
 8004018:	410fc270 	.word	0x410fc270
 800401c:	e000e400 	.word	0xe000e400
 8004020:	200004a4 	.word	0x200004a4
 8004024:	200004a8 	.word	0x200004a8
 8004028:	e000ed20 	.word	0xe000ed20
 800402c:	2000000c 	.word	0x2000000c
 8004030:	e000ef34 	.word	0xe000ef34

08004034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <vPortEnterCritical+0x58>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <vPortEnterCritical+0x58>)
 8004056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <vPortEnterCritical+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10f      	bne.n	8004080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <vPortEnterCritical+0x5c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <vPortEnterCritical+0x4c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	603b      	str	r3, [r7, #0]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vPortEnterCritical+0x4a>
	}
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <vPortExitCritical+0x50>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vPortExitCritical+0x24>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <vPortExitCritical+0x50>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <vPortExitCritical+0x50>)
 80040c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <vPortExitCritical+0x50>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <vPortExitCritical+0x42>
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f383 8811 	msr	BASEPRI, r3
}
 80040d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
	...

080040f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040f0:	f3ef 8009 	mrs	r0, PSP
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <pxCurrentTCBConst>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	f01e 0f10 	tst.w	lr, #16
 8004100:	bf08      	it	eq
 8004102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	6010      	str	r0, [r2, #0]
 800410c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004114:	f380 8811 	msr	BASEPRI, r0
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f7ff f9f2 	bl	8003508 <vTaskSwitchContext>
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f380 8811 	msr	BASEPRI, r0
 800412c:	bc09      	pop	{r0, r3}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004136:	f01e 0f10 	tst.w	lr, #16
 800413a:	bf08      	it	eq
 800413c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004140:	f380 8809 	msr	PSP, r0
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst>:
 8004150:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
}
 8004170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004172:	f7ff f911 	bl	8003398 <xTaskIncrementTick>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <SysTick_Handler+0x40>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f383 8811 	msr	BASEPRI, r3
}
 800418e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <vPortSetupTimerInterrupt+0x38>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <vPortSetupTimerInterrupt+0x3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <vPortSetupTimerInterrupt+0x40>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <vPortSetupTimerInterrupt+0x44>)
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041c0:	2207      	movs	r2, #7
 80041c2:	601a      	str	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e010 	.word	0xe000e010
 80041d4:	e000e018 	.word	0xe000e018
 80041d8:	20000000 	.word	0x20000000
 80041dc:	10624dd3 	.word	0x10624dd3
 80041e0:	e000e014 	.word	0xe000e014

080041e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041f4 <vPortEnableVFP+0x10>
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ee:	6001      	str	r1, [r0, #0]
 80041f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041f2:	bf00      	nop
 80041f4:	e000ed88 	.word	0xe000ed88

080041f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041fe:	f3ef 8305 	mrs	r3, IPSR
 8004202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d914      	bls.n	8004234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <vPortValidateInterruptPriority+0x70>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <vPortValidateInterruptPriority+0x74>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	7afa      	ldrb	r2, [r7, #11]
 800421a:	429a      	cmp	r2, r3
 800421c:	d20a      	bcs.n	8004234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	607b      	str	r3, [r7, #4]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <vPortValidateInterruptPriority+0x78>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <vPortValidateInterruptPriority+0x7c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d90a      	bls.n	800425a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	603b      	str	r3, [r7, #0]
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <vPortValidateInterruptPriority+0x60>
	}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e3f0 	.word	0xe000e3f0
 800426c:	200004a4 	.word	0x200004a4
 8004270:	e000ed0c 	.word	0xe000ed0c
 8004274:	200004a8 	.word	0x200004a8

08004278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004284:	f7fe ffde 	bl	8003244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004288:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <pvPortMalloc+0x180>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004290:	f000 f920 	bl	80044d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <pvPortMalloc+0x184>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	f040 8093 	bne.w	80043c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01d      	beq.n	80042e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80042a8:	2208      	movs	r2, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d014      	beq.n	80042e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f023 0307 	bic.w	r3, r3, #7
 80042c0:	3308      	adds	r3, #8
 80042c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <pvPortMalloc+0x6c>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	617b      	str	r3, [r7, #20]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d06e      	beq.n	80043c8 <pvPortMalloc+0x150>
 80042ea:	4b45      	ldr	r3, [pc, #276]	; (8004400 <pvPortMalloc+0x188>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d869      	bhi.n	80043c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <pvPortMalloc+0x18c>)
 80042f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <pvPortMalloc+0x18c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042fe:	e004      	b.n	800430a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d903      	bls.n	800431c <pvPortMalloc+0xa4>
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f1      	bne.n	8004300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800431c:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <pvPortMalloc+0x180>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	429a      	cmp	r2, r3
 8004324:	d050      	beq.n	80043c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2208      	movs	r2, #8
 800432c:	4413      	add	r3, r2
 800432e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad2      	subs	r2, r2, r3
 8004340:	2308      	movs	r3, #8
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	429a      	cmp	r2, r3
 8004346:	d91f      	bls.n	8004388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <pvPortMalloc+0xf8>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	613b      	str	r3, [r7, #16]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004382:	69b8      	ldr	r0, [r7, #24]
 8004384:	f000 f908 	bl	8004598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <pvPortMalloc+0x188>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <pvPortMalloc+0x188>)
 8004394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <pvPortMalloc+0x188>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <pvPortMalloc+0x190>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d203      	bcs.n	80043aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043a2:	4b17      	ldr	r3, [pc, #92]	; (8004400 <pvPortMalloc+0x188>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <pvPortMalloc+0x190>)
 80043a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <pvPortMalloc+0x184>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <pvPortMalloc+0x194>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <pvPortMalloc+0x194>)
 80043c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043c8:	f7fe ff4a 	bl	8003260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <pvPortMalloc+0x174>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60fb      	str	r3, [r7, #12]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <pvPortMalloc+0x172>
	return pvReturn;
 80043ec:	69fb      	ldr	r3, [r7, #28]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3728      	adds	r7, #40	; 0x28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000106c 	.word	0x2000106c
 80043fc:	20001080 	.word	0x20001080
 8004400:	20001070 	.word	0x20001070
 8004404:	20001064 	.word	0x20001064
 8004408:	20001074 	.word	0x20001074
 800440c:	20001078 	.word	0x20001078

08004410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04d      	beq.n	80044be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004422:	2308      	movs	r3, #8
 8004424:	425b      	negs	r3, r3
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <vPortFree+0xb8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <vPortFree+0x44>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60fb      	str	r3, [r7, #12]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <vPortFree+0x62>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	60bb      	str	r3, [r7, #8]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <vPortFree+0xb8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01e      	beq.n	80044be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11a      	bne.n	80044be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <vPortFree+0xb8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004498:	f7fe fed4 	bl	8003244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <vPortFree+0xbc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4413      	add	r3, r2
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <vPortFree+0xbc>)
 80044a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044aa:	6938      	ldr	r0, [r7, #16]
 80044ac:	f000 f874 	bl	8004598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <vPortFree+0xc0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <vPortFree+0xc0>)
 80044b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80044ba:	f7fe fed1 	bl	8003260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20001080 	.word	0x20001080
 80044cc:	20001070 	.word	0x20001070
 80044d0:	2000107c 	.word	0x2000107c

080044d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80044de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044e0:	4b27      	ldr	r3, [pc, #156]	; (8004580 <prvHeapInit+0xac>)
 80044e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3307      	adds	r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <prvHeapInit+0xac>)
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800450c:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <prvHeapInit+0xb0>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <prvHeapInit+0xb0>)
 8004514:	2200      	movs	r2, #0
 8004516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004520:	2208      	movs	r2, #8
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0307 	bic.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a15      	ldr	r2, [pc, #84]	; (8004588 <prvHeapInit+0xb4>)
 8004534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <prvHeapInit+0xb4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <prvHeapInit+0xb4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <prvHeapInit+0xb4>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <prvHeapInit+0xb8>)
 8004562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <prvHeapInit+0xbc>)
 800456a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <prvHeapInit+0xc0>)
 800456e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	200004ac 	.word	0x200004ac
 8004584:	20001064 	.word	0x20001064
 8004588:	2000106c 	.word	0x2000106c
 800458c:	20001074 	.word	0x20001074
 8004590:	20001070 	.word	0x20001070
 8004594:	20001080 	.word	0x20001080

08004598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <prvInsertBlockIntoFreeList+0xac>)
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e002      	b.n	80045ac <prvInsertBlockIntoFreeList+0x14>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d8f7      	bhi.n	80045a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4413      	add	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d108      	bne.n	80045da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	441a      	add	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d118      	bne.n	8004620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <prvInsertBlockIntoFreeList+0xb0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d00d      	beq.n	8004616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e008      	b.n	8004628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <prvInsertBlockIntoFreeList+0xb0>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e003      	b.n	8004628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d002      	beq.n	8004636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20001064 	.word	0x20001064
 8004648:	2000106c 	.word	0x2000106c

0800464c <memset>:
 800464c:	4402      	add	r2, r0
 800464e:	4603      	mov	r3, r0
 8004650:	4293      	cmp	r3, r2
 8004652:	d100      	bne.n	8004656 <memset+0xa>
 8004654:	4770      	bx	lr
 8004656:	f803 1b01 	strb.w	r1, [r3], #1
 800465a:	e7f9      	b.n	8004650 <memset+0x4>

0800465c <_reclaim_reent>:
 800465c:	4b29      	ldr	r3, [pc, #164]	; (8004704 <_reclaim_reent+0xa8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4283      	cmp	r3, r0
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	4604      	mov	r4, r0
 8004666:	d04b      	beq.n	8004700 <_reclaim_reent+0xa4>
 8004668:	69c3      	ldr	r3, [r0, #28]
 800466a:	b143      	cbz	r3, 800467e <_reclaim_reent+0x22>
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d144      	bne.n	80046fc <_reclaim_reent+0xa0>
 8004672:	69e3      	ldr	r3, [r4, #28]
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	b111      	cbz	r1, 800467e <_reclaim_reent+0x22>
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f879 	bl	8004770 <_free_r>
 800467e:	6961      	ldr	r1, [r4, #20]
 8004680:	b111      	cbz	r1, 8004688 <_reclaim_reent+0x2c>
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f874 	bl	8004770 <_free_r>
 8004688:	69e1      	ldr	r1, [r4, #28]
 800468a:	b111      	cbz	r1, 8004692 <_reclaim_reent+0x36>
 800468c:	4620      	mov	r0, r4
 800468e:	f000 f86f 	bl	8004770 <_free_r>
 8004692:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004694:	b111      	cbz	r1, 800469c <_reclaim_reent+0x40>
 8004696:	4620      	mov	r0, r4
 8004698:	f000 f86a 	bl	8004770 <_free_r>
 800469c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800469e:	b111      	cbz	r1, 80046a6 <_reclaim_reent+0x4a>
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 f865 	bl	8004770 <_free_r>
 80046a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046a8:	b111      	cbz	r1, 80046b0 <_reclaim_reent+0x54>
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 f860 	bl	8004770 <_free_r>
 80046b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046b2:	b111      	cbz	r1, 80046ba <_reclaim_reent+0x5e>
 80046b4:	4620      	mov	r0, r4
 80046b6:	f000 f85b 	bl	8004770 <_free_r>
 80046ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80046bc:	b111      	cbz	r1, 80046c4 <_reclaim_reent+0x68>
 80046be:	4620      	mov	r0, r4
 80046c0:	f000 f856 	bl	8004770 <_free_r>
 80046c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046c6:	b111      	cbz	r1, 80046ce <_reclaim_reent+0x72>
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 f851 	bl	8004770 <_free_r>
 80046ce:	6a23      	ldr	r3, [r4, #32]
 80046d0:	b1b3      	cbz	r3, 8004700 <_reclaim_reent+0xa4>
 80046d2:	4620      	mov	r0, r4
 80046d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046d8:	4718      	bx	r3
 80046da:	5949      	ldr	r1, [r1, r5]
 80046dc:	b941      	cbnz	r1, 80046f0 <_reclaim_reent+0x94>
 80046de:	3504      	adds	r5, #4
 80046e0:	69e3      	ldr	r3, [r4, #28]
 80046e2:	2d80      	cmp	r5, #128	; 0x80
 80046e4:	68d9      	ldr	r1, [r3, #12]
 80046e6:	d1f8      	bne.n	80046da <_reclaim_reent+0x7e>
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 f841 	bl	8004770 <_free_r>
 80046ee:	e7c0      	b.n	8004672 <_reclaim_reent+0x16>
 80046f0:	680e      	ldr	r6, [r1, #0]
 80046f2:	4620      	mov	r0, r4
 80046f4:	f000 f83c 	bl	8004770 <_free_r>
 80046f8:	4631      	mov	r1, r6
 80046fa:	e7ef      	b.n	80046dc <_reclaim_reent+0x80>
 80046fc:	2500      	movs	r5, #0
 80046fe:	e7ef      	b.n	80046e0 <_reclaim_reent+0x84>
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	bf00      	nop
 8004704:	2000005c 	.word	0x2000005c

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4d0d      	ldr	r5, [pc, #52]	; (8004740 <__libc_init_array+0x38>)
 800470c:	4c0d      	ldr	r4, [pc, #52]	; (8004744 <__libc_init_array+0x3c>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	2600      	movs	r6, #0
 8004714:	42a6      	cmp	r6, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	4d0b      	ldr	r5, [pc, #44]	; (8004748 <__libc_init_array+0x40>)
 800471a:	4c0c      	ldr	r4, [pc, #48]	; (800474c <__libc_init_array+0x44>)
 800471c:	f000 f880 	bl	8004820 <_init>
 8004720:	1b64      	subs	r4, r4, r5
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	2600      	movs	r6, #0
 8004726:	42a6      	cmp	r6, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004730:	4798      	blx	r3
 8004732:	3601      	adds	r6, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f855 3b04 	ldr.w	r3, [r5], #4
 800473a:	4798      	blx	r3
 800473c:	3601      	adds	r6, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	080048d0 	.word	0x080048d0
 8004744:	080048d0 	.word	0x080048d0
 8004748:	080048d0 	.word	0x080048d0
 800474c:	080048d4 	.word	0x080048d4

08004750 <__retarget_lock_acquire_recursive>:
 8004750:	4770      	bx	lr

08004752 <__retarget_lock_release_recursive>:
 8004752:	4770      	bx	lr

08004754 <memcpy>:
 8004754:	440a      	add	r2, r1
 8004756:	4291      	cmp	r1, r2
 8004758:	f100 33ff 	add.w	r3, r0, #4294967295
 800475c:	d100      	bne.n	8004760 <memcpy+0xc>
 800475e:	4770      	bx	lr
 8004760:	b510      	push	{r4, lr}
 8004762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800476a:	4291      	cmp	r1, r2
 800476c:	d1f9      	bne.n	8004762 <memcpy+0xe>
 800476e:	bd10      	pop	{r4, pc}

08004770 <_free_r>:
 8004770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004772:	2900      	cmp	r1, #0
 8004774:	d044      	beq.n	8004800 <_free_r+0x90>
 8004776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477a:	9001      	str	r0, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f1a1 0404 	sub.w	r4, r1, #4
 8004782:	bfb8      	it	lt
 8004784:	18e4      	addlt	r4, r4, r3
 8004786:	f000 f83f 	bl	8004808 <__malloc_lock>
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <_free_r+0x94>)
 800478c:	9801      	ldr	r0, [sp, #4]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	b933      	cbnz	r3, 80047a0 <_free_r+0x30>
 8004792:	6063      	str	r3, [r4, #4]
 8004794:	6014      	str	r4, [r2, #0]
 8004796:	b003      	add	sp, #12
 8004798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800479c:	f000 b83a 	b.w	8004814 <__malloc_unlock>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d908      	bls.n	80047b6 <_free_r+0x46>
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf01      	itttt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	1949      	addeq	r1, r1, r5
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	e7ed      	b.n	8004792 <_free_r+0x22>
 80047b6:	461a      	mov	r2, r3
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b10b      	cbz	r3, 80047c0 <_free_r+0x50>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d9fa      	bls.n	80047b6 <_free_r+0x46>
 80047c0:	6811      	ldr	r1, [r2, #0]
 80047c2:	1855      	adds	r5, r2, r1
 80047c4:	42a5      	cmp	r5, r4
 80047c6:	d10b      	bne.n	80047e0 <_free_r+0x70>
 80047c8:	6824      	ldr	r4, [r4, #0]
 80047ca:	4421      	add	r1, r4
 80047cc:	1854      	adds	r4, r2, r1
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	d1e0      	bne.n	8004796 <_free_r+0x26>
 80047d4:	681c      	ldr	r4, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	440c      	add	r4, r1
 80047dc:	6014      	str	r4, [r2, #0]
 80047de:	e7da      	b.n	8004796 <_free_r+0x26>
 80047e0:	d902      	bls.n	80047e8 <_free_r+0x78>
 80047e2:	230c      	movs	r3, #12
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	e7d6      	b.n	8004796 <_free_r+0x26>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf04      	itt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	bf04      	itt	eq
 80047f8:	1949      	addeq	r1, r1, r5
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	6054      	str	r4, [r2, #4]
 80047fe:	e7ca      	b.n	8004796 <_free_r+0x26>
 8004800:	b003      	add	sp, #12
 8004802:	bd30      	pop	{r4, r5, pc}
 8004804:	200011c0 	.word	0x200011c0

08004808 <__malloc_lock>:
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <__malloc_lock+0x8>)
 800480a:	f7ff bfa1 	b.w	8004750 <__retarget_lock_acquire_recursive>
 800480e:	bf00      	nop
 8004810:	200011bc 	.word	0x200011bc

08004814 <__malloc_unlock>:
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__malloc_unlock+0x8>)
 8004816:	f7ff bf9c 	b.w	8004752 <__retarget_lock_release_recursive>
 800481a:	bf00      	nop
 800481c:	200011bc 	.word	0x200011bc

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
