
G0_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044c0  080044c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c0  080044c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080044d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080044d4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebd2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020dc  00000000  00000000  0002ec51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00030d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5f  00000000  00000000  00031d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271e2  00000000  00000000  0003297f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d1d  00000000  00000000  00059b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc94c  00000000  00000000  0006a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043f8  00000000  00000000  001671cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004468 	.word	0x08004468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004468 	.word	0x08004468

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb05 	bl	80007da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f87c 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9a6 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f986 	bl	80004e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80001dc:	f000 f8bc 	bl	8000358 <MX_ADC1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f934 	bl	800044c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)  Error_Handler();
 80001e4:	217f      	movs	r1, #127	; 0x7f
 80001e6:	4831      	ldr	r0, [pc, #196]	; (80002ac <main+0xe4>)
 80001e8:	f001 fe8c 	bl	8001f04 <HAL_ADCEx_Calibration_Start>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <main+0x2e>
 80001f2:	f000 f9c7 	bl	8000584 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_BUFFER, ADC_BUF_SIZE) != HAL_OK) Error_Handler();
 80001f6:	2208      	movs	r2, #8
 80001f8:	492d      	ldr	r1, [pc, #180]	; (80002b0 <main+0xe8>)
 80001fa:	482c      	ldr	r0, [pc, #176]	; (80002ac <main+0xe4>)
 80001fc:	f000 fed6 	bl	8000fac <HAL_ADC_Start_DMA>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <main+0x42>
 8000206:	f000 f9bd 	bl	8000584 <Error_Handler>
  if(HAL_TIM_Base_Start(&htim2) != HAL_OK) Error_Handler();
 800020a:	482a      	ldr	r0, [pc, #168]	; (80002b4 <main+0xec>)
 800020c:	f003 fe12 	bl	8003e34 <HAL_TIM_Base_Start>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <main+0x52>
 8000216:	f000 f9b5 	bl	8000584 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1)
 800021a:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <main+0xf0>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d1fb      	bne.n	800021a <main+0x52>
	  {
		  for(idx = 0; idx < ADC_BUF_SIZE;idx++)
 8000222:	4b26      	ldr	r3, [pc, #152]	; (80002bc <main+0xf4>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
 8000228:	e038      	b.n	800029c <main+0xd4>
		  {
			  ADC_BUFFER[idx] = __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__, ADC_BUFFER[idx], LL_ADC_RESOLUTION_12B);
 800022a:	4b25      	ldr	r3, [pc, #148]	; (80002c0 <main+0xf8>)
 800022c:	881a      	ldrh	r2, [r3, #0]
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <main+0xfc>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d024      	beq.n	8000280 <main+0xb8>
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0xf4>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <main+0xe8>)
 800023e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000242:	461a      	mov	r2, r3
 8000244:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000248:	fb02 f303 	mul.w	r3, r2, r3
 800024c:	461a      	mov	r2, r3
 800024e:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <main+0x100>)
 8000250:	fba3 2302 	umull	r2, r3, r3, r2
 8000254:	099b      	lsrs	r3, r3, #6
 8000256:	461a      	mov	r2, r3
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <main+0xfc>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	1ad2      	subs	r2, r2, r3
 800025e:	4613      	mov	r3, r2
 8000260:	009b      	lsls	r3, r3, #2
 8000262:	4413      	add	r3, r2
 8000264:	011b      	lsls	r3, r3, #4
 8000266:	461a      	mov	r2, r3
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <main+0xf8>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	4619      	mov	r1, r3
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <main+0xfc>)
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	1acb      	subs	r3, r1, r3
 8000274:	fb92 f3f3 	sdiv	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
 800027a:	331e      	adds	r3, #30
 800027c:	b29b      	uxth	r3, r3
 800027e:	e001      	b.n	8000284 <main+0xbc>
 8000280:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <main+0xf4>)
 8000286:	7812      	ldrb	r2, [r2, #0]
 8000288:	4611      	mov	r1, r2
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <main+0xe8>)
 800028c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		  for(idx = 0; idx < ADC_BUF_SIZE;idx++)
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <main+0xf4>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0xf4>)
 800029a:	701a      	strb	r2, [r3, #0]
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0xf4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d9c2      	bls.n	800022a <main+0x62>
		  }
		  flag = 0;
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <main+0xf0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
	  if(flag == 1)
 80002aa:	e7b6      	b.n	800021a <main+0x52>
 80002ac:	20000028 	.word	0x20000028
 80002b0:	20000120 	.word	0x20000120
 80002b4:	200000d4 	.word	0x200000d4
 80002b8:	20000130 	.word	0x20000130
 80002bc:	20000131 	.word	0x20000131
 80002c0:	1fff75ca 	.word	0x1fff75ca
 80002c4:	1fff75a8 	.word	0x1fff75a8
 80002c8:	057619f1 	.word	0x057619f1

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b096      	sub	sp, #88	; 0x58
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0314 	add.w	r3, r7, #20
 80002d6:	2244      	movs	r2, #68	; 0x44
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 f898 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002f2:	f002 fa6d 	bl	80027d0 <HAL_PWREx_ControlVoltageScaling>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002fc:	f000 f942 	bl	8000584 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000300:	2310      	movs	r3, #16
 8000302:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	2300      	movs	r3, #0
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f002 faaf 	bl	800287c <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000324:	f000 f92e 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	463b      	mov	r3, r7
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fe77 	bl	8003034 <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800034c:	f000 f91a 	bl	8000584 <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3758      	adds	r7, #88	; 0x58
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	; 0x28
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
 8000378:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800037a:	4b31      	ldr	r3, [pc, #196]	; (8000440 <MX_ADC1_Init+0xe8>)
 800037c:	4a31      	ldr	r2, [pc, #196]	; (8000444 <MX_ADC1_Init+0xec>)
 800037e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000380:	4b2f      	ldr	r3, [pc, #188]	; (8000440 <MX_ADC1_Init+0xe8>)
 8000382:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000386:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000388:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <MX_ADC1_Init+0xe8>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038e:	4b2c      	ldr	r3, [pc, #176]	; (8000440 <MX_ADC1_Init+0xe8>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000394:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <MX_ADC1_Init+0xe8>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800039a:	4b29      	ldr	r3, [pc, #164]	; (8000440 <MX_ADC1_Init+0xe8>)
 800039c:	2204      	movs	r2, #4
 800039e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a6:	4b26      	ldr	r3, [pc, #152]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003ac:	4b24      	ldr	r3, [pc, #144]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003b2:	4b23      	ldr	r3, [pc, #140]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80003ba:	4b21      	ldr	r3, [pc, #132]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003bc:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ca:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e0:	4817      	ldr	r0, [pc, #92]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003e2:	f000 fc93 	bl	8000d0c <HAL_ADC_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003ec:	f000 f8ca 	bl	8000584 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003f4:	f107 031c 	add.w	r3, r7, #28
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	; (8000440 <MX_ADC1_Init+0xe8>)
 80003fc:	f001 fde2 	bl	8001fc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000406:	f000 f8bd 	bl	8000584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_ADC1_Init+0xf0>)
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040e:	2306      	movs	r3, #6
 8000410:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000412:	2305      	movs	r3, #5
 8000414:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000416:	237f      	movs	r3, #127	; 0x7f
 8000418:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800041a:	2304      	movs	r3, #4
 800041c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_ADC1_Init+0xe8>)
 8000428:	f000 fef2 	bl	8001210 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000432:	f000 f8a7 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	; 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000028 	.word	0x20000028
 8000444:	50040000 	.word	0x50040000
 8000448:	c7520000 	.word	0xc7520000

0800044c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_TIM2_Init+0x98>)
 800046c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000474:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000478:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_TIM2_Init+0x98>)
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000482:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000486:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_TIM2_Init+0x98>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000494:	4813      	ldr	r0, [pc, #76]	; (80004e4 <MX_TIM2_Init+0x98>)
 8000496:	f003 fc75 	bl	8003d84 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004a0:	f000 f870 	bl	8000584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <MX_TIM2_Init+0x98>)
 80004b2:	f003 fd27 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004bc:	f000 f862 	bl	8000584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80004c0:	2320      	movs	r3, #32
 80004c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_TIM2_Init+0x98>)
 80004ce:	f003 ff17 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80004d8:	f000 f854 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000d4 	.word	0x200000d4

080004e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_DMA_Init+0x38>)
 80004f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <MX_DMA_Init+0x38>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6493      	str	r3, [r2, #72]	; 0x48
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_DMA_Init+0x38>)
 80004fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	200b      	movs	r0, #11
 800050c:	f001 fee5 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000510:	200b      	movs	r0, #11
 8000512:	f001 fefe 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_GPIO_Init+0x2c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <MX_GPIO_Init+0x2c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_GPIO_Init+0x2c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK) Error_Handler();
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <HAL_ADC_ConvCpltCallback+0x28>)
 800055e:	f000 fde1 	bl	8001124 <HAL_ADC_Stop_DMA>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_ADC_ConvCpltCallback+0x18>
 8000568:	f000 f80c 	bl	8000584 <Error_Handler>
	flag = 1;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_ADC_ConvCpltCallback+0x2c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000028 	.word	0x20000028
 8000580:	20000130 	.word	0x20000130

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_MspInit+0x44>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6613      	str	r3, [r2, #96]	; 0x60
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x44>)
 80005a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <HAL_MspInit+0x44>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_MspInit+0x44>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0a6      	sub	sp, #152	; 0x98
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2288      	movs	r2, #136	; 0x88
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 ff11 	bl	8004410 <memset>
  if(hadc->Instance==ADC1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2f      	ldr	r2, [pc, #188]	; (80006b0 <HAL_ADC_MspInit+0xd8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d156      	bne.n	80006a6 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800060e:	2308      	movs	r3, #8
 8000610:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800061e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4618      	mov	r0, r3
 800062a:	f002 feef 	bl	800340c <HAL_RCCEx_PeriphCLKConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000634:	f7ff ffa6 	bl	8000584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <HAL_ADC_MspInit+0xdc>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063c:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <HAL_ADC_MspInit+0xdc>)
 800063e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_ADC_MspInit+0xdc>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000652:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <HAL_ADC_MspInit+0xe4>)
 8000654:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000674:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800068a:	480b      	ldr	r0, [pc, #44]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 800068c:	f001 fe5c 	bl	8002348 <HAL_DMA_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000696:	f7ff ff75 	bl	8000584 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 800069e:	64da      	str	r2, [r3, #76]	; 0x4c
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <HAL_ADC_MspInit+0xe0>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3798      	adds	r7, #152	; 0x98
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	50040000 	.word	0x50040000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	2000008c 	.word	0x2000008c
 80006bc:	40020008 	.word	0x40020008

080006c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d0:	d10b      	bne.n	80006ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_TIM_Base_MspInit+0x38>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_TIM_Base_MspInit+0x38>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_TIM_Base_MspInit+0x38>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f89c 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <DMA1_Channel1_IRQHandler+0x10>)
 8000756:	f001 ff4d 	bl	80025f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000008c 	.word	0x2000008c

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <SystemInit+0x20>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <SystemInit+0x20>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800078c:	f7ff ffea 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f003 fe33 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ba:	f7ff fd05 	bl	80001c8 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007cc:	080044c8 	.word	0x080044c8
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d4:	20000138 	.word	0x20000138

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>

080007da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f001 fd6d 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f80e 	bl	800080c <HAL_InitTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	e001      	b.n	8000800 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007fc:	f7ff fec8 	bl	8000590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000800:	79fb      	ldrb	r3, [r7, #7]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000814:	2300      	movs	r3, #0
 8000816:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_InitTick+0x6c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d023      	beq.n	8000868 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_InitTick+0x70>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0x6c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fd79 	bl	800232e <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10f      	bne.n	8000862 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d809      	bhi.n	800085c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f001 fd43 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_InitTick+0x74>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	e007      	b.n	800086c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e004      	b.n	800086c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e001      	b.n	800086c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	20000000 	.word	0x20000000
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x20>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x24>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_IncTick+0x24>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000134 	.word	0x20000134

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_GetTick+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000134 	.word	0x20000134

080008c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	431a      	orrs	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	609a      	str	r2, [r3, #8]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3360      	adds	r3, #96	; 0x60
 800093e:	461a      	mov	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <LL_ADC_SetOffset+0x44>)
 800094e:	4013      	ands	r3, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	4313      	orrs	r3, r2
 800095c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000964:	bf00      	nop
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	03fff000 	.word	0x03fff000

08000974 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3360      	adds	r3, #96	; 0x60
 8000982:	461a      	mov	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3360      	adds	r3, #96	; 0x60
 80009b0:	461a      	mov	r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80009ca:	bf00      	nop
 80009cc:	371c      	adds	r7, #28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3330      	adds	r3, #48	; 0x30
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	f003 030c 	and.w	r3, r3, #12
 8000a18:	4413      	add	r3, r2
 8000a1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	f003 031f 	and.w	r3, r3, #31
 8000a26:	211f      	movs	r1, #31
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	401a      	ands	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	0e9b      	lsrs	r3, r3, #26
 8000a34:	f003 011f 	and.w	r1, r3, #31
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	f003 031f 	and.w	r3, r3, #31
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	431a      	orrs	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a48:	bf00      	nop
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3314      	adds	r3, #20
 8000a64:	461a      	mov	r2, r3
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	0e5b      	lsrs	r3, r3, #25
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	4413      	add	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	0d1b      	lsrs	r3, r3, #20
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	2107      	movs	r1, #7
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	0d1b      	lsrs	r3, r3, #20
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a9e:	bf00      	nop
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0318 	and.w	r3, r3, #24
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ad0:	40d9      	lsrs	r1, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	0007ffff 	.word	0x0007ffff

08000af4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 031f 	and.w	r3, r3, #31
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	6093      	str	r3, [r2, #8]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b48:	d101      	bne.n	8000b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b98:	d101      	bne.n	8000b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc0:	f043 0201 	orr.w	r2, r3, #1
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000be8:	f043 0202 	orr.w	r2, r3, #2
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <LL_ADC_IsEnabled+0x18>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <LL_ADC_IsEnabled+0x1a>
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d101      	bne.n	8000c3a <LL_ADC_IsDisableOngoing+0x18>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <LL_ADC_IsDisableOngoing+0x1a>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c5c:	f043 0204 	orr.w	r2, r3, #4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c84:	f043 0210 	orr.w	r2, r3, #16
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d101      	bne.n	8000cb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cd2:	f043 0220 	orr.w	r2, r3, #32
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d101      	bne.n	8000cfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e130      	b.n	8000f88 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d109      	bne.n	8000d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fc4f 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fef1 	bl	8000b34 <LL_ADC_IsDeepPowerDownEnabled>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fed7 	bl	8000b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff0c 	bl	8000b84 <LL_ADC_IsInternalRegulatorEnabled>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d115      	bne.n	8000d9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fef0 	bl	8000b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d7c:	4b84      	ldr	r3, [pc, #528]	; (8000f90 <HAL_ADC_Init+0x284>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	099b      	lsrs	r3, r3, #6
 8000d82:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <HAL_ADC_Init+0x288>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	099b      	lsrs	r3, r3, #6
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d90:	e002      	b.n	8000d98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff feee 	bl	8000b84 <LL_ADC_IsInternalRegulatorEnabled>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10d      	bne.n	8000dca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff62 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 8000dd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 80c9 	bne.w	8000f76 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f040 80c5 	bne.w	8000f76 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000df4:	f043 0202 	orr.w	r2, r3, #2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fefb 	bl	8000bfc <LL_ADC_IsEnabled>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d115      	bne.n	8000e38 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e0c:	4862      	ldr	r0, [pc, #392]	; (8000f98 <HAL_ADC_Init+0x28c>)
 8000e0e:	f7ff fef5 	bl	8000bfc <LL_ADC_IsEnabled>
 8000e12:	4604      	mov	r4, r0
 8000e14:	4861      	ldr	r0, [pc, #388]	; (8000f9c <HAL_ADC_Init+0x290>)
 8000e16:	f7ff fef1 	bl	8000bfc <LL_ADC_IsEnabled>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	431c      	orrs	r4, r3
 8000e1e:	4860      	ldr	r0, [pc, #384]	; (8000fa0 <HAL_ADC_Init+0x294>)
 8000e20:	f7ff feec 	bl	8000bfc <LL_ADC_IsEnabled>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4323      	orrs	r3, r4
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4619      	mov	r1, r3
 8000e32:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <HAL_ADC_Init+0x298>)
 8000e34:	f7ff fd46 	bl	80008c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7e5b      	ldrb	r3, [r3, #25]
 8000e3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000e48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000e4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d106      	bne.n	8000e74 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	045b      	lsls	r3, r3, #17
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d009      	beq.n	8000e90 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <HAL_ADC_Init+0x29c>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff1c 	bl	8000ce6 <LL_ADC_INJ_IsConversionOngoing>
 8000eae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d13d      	bne.n	8000f32 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d13a      	bne.n	8000f32 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ec0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ec8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ed8:	f023 0302 	bic.w	r3, r3, #2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	69b9      	ldr	r1, [r7, #24]
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d118      	bne.n	8000f22 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000efa:	f023 0304 	bic.w	r3, r3, #4
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f06:	4311      	orrs	r1, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f0c:	4311      	orrs	r1, r2
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f12:	430a      	orrs	r2, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	e007      	b.n	8000f32 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10c      	bne.n	8000f54 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f023 010f 	bic.w	r1, r3, #15
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
 8000f52:	e007      	b.n	8000f64 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020f 	bic.w	r2, r2, #15
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	f023 0303 	bic.w	r3, r3, #3
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	655a      	str	r2, [r3, #84]	; 0x54
 8000f74:	e007      	b.n	8000f86 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3724      	adds	r7, #36	; 0x24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	053e2d63 	.word	0x053e2d63
 8000f98:	50040000 	.word	0x50040000
 8000f9c:	50040100 	.word	0x50040100
 8000fa0:	50040200 	.word	0x50040200
 8000fa4:	50040300 	.word	0x50040300
 8000fa8:	fff0c007 	.word	0xfff0c007

08000fac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000fb8:	4853      	ldr	r0, [pc, #332]	; (8001108 <HAL_ADC_Start_DMA+0x15c>)
 8000fba:	f7ff fd9b 	bl	8000af4 <LL_ADC_GetMultimode>
 8000fbe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe67 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f040 8093 	bne.w	80010f8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_Start_DMA+0x34>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e08e      	b.n	80010fe <HAL_ADC_Start_DMA+0x152>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a47      	ldr	r2, [pc, #284]	; (800110c <HAL_ADC_Start_DMA+0x160>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d008      	beq.n	8001004 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d002      	beq.n	8001004 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d172      	bne.n	80010ea <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f000 fdb1 	bl	8001b6c <ADC_Enable>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d165      	bne.n	80010e0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a38      	ldr	r2, [pc, #224]	; (8001110 <HAL_ADC_Start_DMA+0x164>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d002      	beq.n	8001038 <HAL_ADC_Start_DMA+0x8c>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	e000      	b.n	800103a <HAL_ADC_Start_DMA+0x8e>
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_ADC_Start_DMA+0x168>)
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	4293      	cmp	r3, r2
 8001040:	d002      	beq.n	8001048 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f023 0206 	bic.w	r2, r3, #6
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	659a      	str	r2, [r3, #88]	; 0x58
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <HAL_ADC_Start_DMA+0x16c>)
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <HAL_ADC_Start_DMA+0x170>)
 8001082:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_ADC_Start_DMA+0x174>)
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	221c      	movs	r2, #28
 8001092:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0210 	orr.w	r2, r2, #16
 80010aa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3340      	adds	r3, #64	; 0x40
 80010c6:	4619      	mov	r1, r3
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f001 f9f4 	bl	80024b8 <HAL_DMA_Start_IT>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdb5 	bl	8000c48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80010de:	e00d      	b.n	80010fc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80010e8:	e008      	b.n	80010fc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010f6:	e001      	b.n	80010fc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010f8:	2302      	movs	r3, #2
 80010fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	50040300 	.word	0x50040300
 800110c:	50040200 	.word	0x50040200
 8001110:	50040100 	.word	0x50040100
 8001114:	50040000 	.word	0x50040000
 8001118:	08001d37 	.word	0x08001d37
 800111c:	08001e0f 	.word	0x08001e0f
 8001120:	08001e2b 	.word	0x08001e2b

08001124 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_ADC_Stop_DMA+0x16>
 8001136:	2302      	movs	r3, #2
 8001138:	e051      	b.n	80011de <HAL_ADC_Stop_DMA+0xba>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001142:	2103      	movs	r1, #3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fc55 	bl	80019f4 <ADC_ConversionStop>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d13f      	bne.n	80011d4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d10f      	bne.n	8001192 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f9fe 	bl	8002578 <HAL_DMA_Abort>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0210 	bic.w	r2, r2, #16
 80011a0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fd65 	bl	8001c78 <ADC_Disable>
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e002      	b.n	80011ba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fd5f 	bl	8001c78 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0b6      	sub	sp, #216	; 0xd8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x22>
 800122e:	2302      	movs	r3, #2
 8001230:	e3c9      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x7b6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd2a 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 83aa 	bne.w	80019a0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d824      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	3b02      	subs	r3, #2
 8001262:	2b03      	cmp	r3, #3
 8001264:	d81b      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x8e>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <HAL_ADC_ConfigChannel+0x5c>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001285 	.word	0x08001285
 8001274:	0800128d 	.word	0x0800128d
 8001278:	08001295 	.word	0x08001295
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800127c:	230c      	movs	r3, #12
 800127e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001282:	e010      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001284:	2312      	movs	r3, #18
 8001286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800128a:	e00c      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800128c:	2318      	movs	r3, #24
 800128e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001292:	e008      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800129c:	e003      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800129e:	2306      	movs	r3, #6
 80012a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012b4:	f7ff fba2 	bl	80009fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fceb 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 80012c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd0b 	bl	8000ce6 <LL_ADC_INJ_IsConversionOngoing>
 80012d0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f040 81a4 	bne.w	8001626 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 819f 	bne.w	8001626 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6819      	ldr	r1, [r3, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	461a      	mov	r2, r3
 80012f6:	f7ff fbad 	bl	8000a54 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d00a      	beq.n	8001332 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6919      	ldr	r1, [r3, #16]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800132c:	f7ff fafe 	bl	800092c <LL_ADC_SetOffset>
 8001330:	e179      	b.n	8001626 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fb1b 	bl	8000974 <LL_ADC_GetOffsetChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10a      	bne.n	800135e <HAL_ADC_ConfigChannel+0x14e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fb10 	bl	8000974 <LL_ADC_GetOffsetChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	0e9b      	lsrs	r3, r3, #26
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	e01e      	b.n	800139c <HAL_ADC_ConfigChannel+0x18c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fb05 	bl	8000974 <LL_ADC_GetOffsetChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800137c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800138c:	2320      	movs	r3, #32
 800138e:	e004      	b.n	800139a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001390:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001394:	fab3 f383 	clz	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1a4>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0e9b      	lsrs	r3, r3, #26
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	e018      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1d6>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80013c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80013d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80013d8:	2320      	movs	r3, #32
 80013da:	e004      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80013dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d106      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fad4 	bl	80009a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fab8 	bl	8000974 <LL_ADC_GetOffsetChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10a      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x214>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff faad 	bl	8000974 <LL_ADC_GetOffsetChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	0e9b      	lsrs	r3, r3, #26
 800141e:	f003 021f 	and.w	r2, r3, #31
 8001422:	e01e      	b.n	8001462 <HAL_ADC_ConfigChannel+0x252>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff faa2 	bl	8000974 <LL_ADC_GetOffsetChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800144a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001452:	2320      	movs	r3, #32
 8001454:	e004      	b.n	8001460 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <HAL_ADC_ConfigChannel+0x26a>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0e9b      	lsrs	r3, r3, #26
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	e018      	b.n	80014ac <HAL_ADC_ConfigChannel+0x29c>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800148e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800149e:	2320      	movs	r3, #32
 80014a0:	e004      	b.n	80014ac <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80014a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d106      	bne.n	80014be <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fa71 	bl	80009a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2102      	movs	r1, #2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fa55 	bl	8000974 <LL_ADC_GetOffsetChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x2da>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2102      	movs	r1, #2
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fa4a 	bl	8000974 <LL_ADC_GetOffsetChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	0e9b      	lsrs	r3, r3, #26
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	e01e      	b.n	8001528 <HAL_ADC_ConfigChannel+0x318>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2102      	movs	r1, #2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fa3f 	bl	8000974 <LL_ADC_GetOffsetChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800150c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001518:	2320      	movs	r3, #32
 800151a:	e004      	b.n	8001526 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800151c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x330>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0e9b      	lsrs	r3, r3, #26
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	e014      	b.n	800156a <HAL_ADC_ConfigChannel+0x35a>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800154e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800155c:	2320      	movs	r3, #32
 800155e:	e004      	b.n	800156a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800156a:	429a      	cmp	r2, r3
 800156c:	d106      	bne.n	800157c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	2102      	movs	r1, #2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fa12 	bl	80009a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2103      	movs	r1, #3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f9f6 	bl	8000974 <LL_ADC_GetOffsetChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10a      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x398>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2103      	movs	r1, #3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f9eb 	bl	8000974 <LL_ADC_GetOffsetChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	f003 021f 	and.w	r2, r3, #31
 80015a6:	e017      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x3c8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2103      	movs	r1, #3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f9e0 	bl	8000974 <LL_ADC_GetOffsetChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80015c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80015c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80015ca:	2320      	movs	r3, #32
 80015cc:	e003      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80015ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x3e0>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	e011      	b.n	8001614 <HAL_ADC_ConfigChannel+0x404>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80015fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001600:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001608:	2320      	movs	r3, #32
 800160a:	e003      	b.n	8001614 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800160c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	2103      	movs	r1, #3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f9bd 	bl	80009a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fae6 	bl	8000bfc <LL_ADC_IsEnabled>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8140 	bne.w	80018b8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	f7ff fa31 	bl	8000aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4a8f      	ldr	r2, [pc, #572]	; (800188c <HAL_ADC_ConfigChannel+0x67c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f040 8131 	bne.w	80018b8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10b      	bne.n	800167e <HAL_ADC_ConfigChannel+0x46e>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0e9b      	lsrs	r3, r3, #26
 800166c:	3301      	adds	r3, #1
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b09      	cmp	r3, #9
 8001674:	bf94      	ite	ls
 8001676:	2301      	movls	r3, #1
 8001678:	2300      	movhi	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	e019      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x4a2>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001696:	2320      	movs	r3, #32
 8001698:	e003      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	bf94      	ite	ls
 80016ac:	2301      	movls	r3, #1
 80016ae:	2300      	movhi	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d079      	beq.n	80017aa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x4c2>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0e9b      	lsrs	r3, r3, #26
 80016c8:	3301      	adds	r3, #1
 80016ca:	069b      	lsls	r3, r3, #26
 80016cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016d0:	e015      	b.n	80016fe <HAL_ADC_ConfigChannel+0x4ee>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80016e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80016e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80016ea:	2320      	movs	r3, #32
 80016ec:	e003      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80016ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	069b      	lsls	r3, r3, #26
 80016fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_ADC_ConfigChannel+0x50e>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	3301      	adds	r3, #1
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	e017      	b.n	800174e <HAL_ADC_ConfigChannel+0x53e>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001736:	2320      	movs	r3, #32
 8001738:	e003      	b.n	8001742 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800173a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	3301      	adds	r3, #1
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	ea42 0103 	orr.w	r1, r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10a      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x564>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	3301      	adds	r3, #1
 8001766:	f003 021f 	and.w	r2, r3, #31
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	051b      	lsls	r3, r3, #20
 8001772:	e018      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x596>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e003      	b.n	8001798 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f003 021f 	and.w	r2, r3, #31
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017a6:	430b      	orrs	r3, r1
 80017a8:	e081      	b.n	80018ae <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x5b6>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0e9b      	lsrs	r3, r3, #26
 80017bc:	3301      	adds	r3, #1
 80017be:	069b      	lsls	r3, r3, #26
 80017c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017c4:	e015      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x5e2>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80017de:	2320      	movs	r3, #32
 80017e0:	e003      	b.n	80017ea <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	069b      	lsls	r3, r3, #26
 80017ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x602>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	3301      	adds	r3, #1
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	e017      	b.n	8001842 <HAL_ADC_ConfigChannel+0x632>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	61bb      	str	r3, [r7, #24]
  return result;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800182a:	2320      	movs	r3, #32
 800182c:	e003      	b.n	8001836 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	ea42 0103 	orr.w	r1, r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_ADC_ConfigChannel+0x65e>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	3301      	adds	r3, #1
 800185a:	f003 021f 	and.w	r2, r3, #31
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3b1e      	subs	r3, #30
 8001866:	051b      	lsls	r3, r3, #20
 8001868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186c:	e01e      	b.n	80018ac <HAL_ADC_ConfigChannel+0x69c>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	60fb      	str	r3, [r7, #12]
  return result;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d104      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e006      	b.n	8001898 <HAL_ADC_ConfigChannel+0x688>
 800188a:	bf00      	nop
 800188c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f003 021f 	and.w	r2, r3, #31
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	3b1e      	subs	r3, #30
 80018a6:	051b      	lsls	r3, r3, #20
 80018a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8ce 	bl	8000a54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_ADC_ConfigChannel+0x7c0>)
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d07a      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018c4:	4843      	ldr	r0, [pc, #268]	; (80019d4 <HAL_ADC_ConfigChannel+0x7c4>)
 80018c6:	f7ff f823 	bl	8000910 <LL_ADC_GetCommonPathInternalCh>
 80018ca:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a41      	ldr	r2, [pc, #260]	; (80019d8 <HAL_ADC_ConfigChannel+0x7c8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d12c      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d126      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3c      	ldr	r2, [pc, #240]	; (80019dc <HAL_ADC_ConfigChannel+0x7cc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x6e8>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a3b      	ldr	r2, [pc, #236]	; (80019e0 <HAL_ADC_ConfigChannel+0x7d0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d15d      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001900:	4619      	mov	r1, r3
 8001902:	4834      	ldr	r0, [pc, #208]	; (80019d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001904:	f7fe fff1 	bl	80008ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001922:	e002      	b.n	800192a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3b01      	subs	r3, #1
 8001928:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f9      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001930:	e040      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2d      	ldr	r2, [pc, #180]	; (80019ec <HAL_ADC_ConfigChannel+0x7dc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d118      	bne.n	800196e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800193c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d112      	bne.n	800196e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_ADC_ConfigChannel+0x7cc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d004      	beq.n	800195c <HAL_ADC_ConfigChannel+0x74c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d12d      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800195c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001964:	4619      	mov	r1, r3
 8001966:	481b      	ldr	r0, [pc, #108]	; (80019d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001968:	f7fe ffbf 	bl	80008ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800196c:	e024      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d120      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11a      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <HAL_ADC_ConfigChannel+0x7cc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d115      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800198e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001992:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001996:	4619      	mov	r1, r3
 8001998:	480e      	ldr	r0, [pc, #56]	; (80019d4 <HAL_ADC_ConfigChannel+0x7c4>)
 800199a:	f7fe ffa6 	bl	80008ea <LL_ADC_SetCommonPathInternalCh>
 800199e:	e00c      	b.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80019b2:	e002      	b.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019b4:	bf00      	nop
 80019b6:	e000      	b.n	80019ba <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	37d8      	adds	r7, #216	; 0xd8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	80080000 	.word	0x80080000
 80019d4:	50040300 	.word	0x50040300
 80019d8:	c7520000 	.word	0xc7520000
 80019dc:	50040000 	.word	0x50040000
 80019e0:	50040200 	.word	0x50040200
 80019e4:	20000000 	.word	0x20000000
 80019e8:	053e2d63 	.word	0x053e2d63
 80019ec:	cb840000 	.word	0xcb840000
 80019f0:	80000001 	.word	0x80000001

080019f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f944 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 8001a10:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f965 	bl	8000ce6 <LL_ADC_INJ_IsConversionOngoing>
 8001a1c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8098 	beq.w	8001b5c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02a      	beq.n	8001a90 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7e5b      	ldrb	r3, [r3, #25]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d126      	bne.n	8001a90 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7e1b      	ldrb	r3, [r3, #24]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d122      	bne.n	8001a90 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001a4e:	e014      	b.n	8001a7a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <ADC_ConversionStop+0x174>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d90d      	bls.n	8001a74 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5c:	f043 0210 	orr.w	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e074      	b.n	8001b5e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d1e3      	bne.n	8001a50 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d014      	beq.n	8001ac0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f8fc 	bl	8000c98 <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f8b9 	bl	8000c22 <LL_ADC_IsDisableOngoing>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8d8 	bl	8000c70 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d014      	beq.n	8001af0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f90b 	bl	8000ce6 <LL_ADC_INJ_IsConversionOngoing>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8a1 	bl	8000c22 <LL_ADC_IsDisableOngoing>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8e7 	bl	8000cbe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d005      	beq.n	8001b02 <ADC_ConversionStop+0x10e>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d105      	bne.n	8001b08 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001afc:	230c      	movs	r3, #12
 8001afe:	617b      	str	r3, [r7, #20]
        break;
 8001b00:	e005      	b.n	8001b0e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001b02:	2308      	movs	r3, #8
 8001b04:	617b      	str	r3, [r7, #20]
        break;
 8001b06:	e002      	b.n	8001b0e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
        break;
 8001b0c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001b0e:	f7fe fecd 	bl	80008ac <HAL_GetTick>
 8001b12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b14:	e01b      	b.n	8001b4e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b16:	f7fe fec9 	bl	80008ac <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d914      	bls.n	8001b4e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00d      	beq.n	8001b4e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e007      	b.n	8001b5e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1dc      	bne.n	8001b16 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	a33fffff 	.word	0xa33fffff

08001b6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f83d 	bl	8000bfc <LL_ADC_IsEnabled>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d169      	bne.n	8001c5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <ADC_Enable+0xfc>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00d      	beq.n	8001bb2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e055      	b.n	8001c5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fff8 	bl	8000bac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001bbc:	482b      	ldr	r0, [pc, #172]	; (8001c6c <ADC_Enable+0x100>)
 8001bbe:	f7fe fea7 	bl	8000910 <LL_ADC_GetCommonPathInternalCh>
 8001bc2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <ADC_Enable+0x104>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <ADC_Enable+0x108>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001be6:	e002      	b.n	8001bee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f9      	bne.n	8001be8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe fe5a 	bl	80008ac <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bfa:	e028      	b.n	8001c4e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fffb 	bl	8000bfc <LL_ADC_IsEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe ffcb 	bl	8000bac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c16:	f7fe fe49 	bl	80008ac <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d914      	bls.n	8001c4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d00d      	beq.n	8001c4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e007      	b.n	8001c5e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d1cf      	bne.n	8001bfc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	8000003f 	.word	0x8000003f
 8001c6c:	50040300 	.word	0x50040300
 8001c70:	20000000 	.word	0x20000000
 8001c74:	053e2d63 	.word	0x053e2d63

08001c78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe ffcc 	bl	8000c22 <LL_ADC_IsDisableOngoing>
 8001c8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ffb3 	bl	8000bfc <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d047      	beq.n	8001d2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d144      	bne.n	8001d2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 030d 	and.w	r3, r3, #13
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff8d 	bl	8000bd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cc2:	f7fe fdf3 	bl	80008ac <HAL_GetTick>
 8001cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cc8:	e029      	b.n	8001d1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e023      	b.n	8001d2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ce6:	f7fe fde1 	bl	80008ac <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d914      	bls.n	8001d1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1dc      	bne.n	8001ce6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d14b      	bne.n	8001de8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d021      	beq.n	8001dae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fe31 	bl	80009d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d032      	beq.n	8001de0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12b      	bne.n	8001de0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11f      	bne.n	8001de0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54
 8001dac:	e018      	b.n	8001de0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d111      	bne.n	8001de0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7fe fbb7 	bl	8000554 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001de6:	e00e      	b.n	8001e06 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff fa00 	bl	80011fa <HAL_ADC_ErrorCallback>
}
 8001dfa:	e004      	b.n	8001e06 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff f9e2 	bl	80011e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff f9d2 	bl	80011fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <LL_ADC_IsEnabled>:
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <LL_ADC_IsEnabled+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_ADC_IsEnabled+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_StartCalibration>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001e96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_IsCalibrationOnGoing>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_REG_IsConversionOngoing>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADCEx_Calibration_Start+0x1c>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e04d      	b.n	8001fbc <HAL_ADCEx_Calibration_Start+0xb8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fea5 	bl	8001c78 <ADC_Disable>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d136      	bne.n	8001fa6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f40:	f023 0302 	bic.w	r3, r3, #2
 8001f44:	f043 0202 	orr.w	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff96 	bl	8001e84 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f58:	e014      	b.n	8001f84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001f66:	d30d      	bcc.n	8001f84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f023 0312 	bic.w	r3, r3, #18
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01b      	b.n	8001fbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff94 	bl	8001eb6 <LL_ADC_IsCalibrationOnGoing>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e2      	bne.n	8001f5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f023 0303 	bic.w	r3, r3, #3
 8001f9c:	f043 0201 	orr.w	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
 8001fa4:	e005      	b.n	8001fb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b09f      	sub	sp, #124	; 0x7c
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e093      	b.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001fea:	2300      	movs	r3, #0
 8001fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d102      	bne.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	e001      	b.n	8002006 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e072      	b.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff59 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 800202c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff53 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d154      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002040:	2b00      	cmp	r3, #0
 8002042:	d151      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002046:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02c      	beq.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002062:	035b      	lsls	r3, r3, #13
 8002064:	430b      	orrs	r3, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800206a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800206c:	4829      	ldr	r0, [pc, #164]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800206e:	f7ff fef6 	bl	8001e5e <LL_ADC_IsEnabled>
 8002072:	4604      	mov	r4, r0
 8002074:	4828      	ldr	r0, [pc, #160]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002076:	f7ff fef2 	bl	8001e5e <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	431c      	orrs	r4, r3
 800207e:	4828      	ldr	r0, [pc, #160]	; (8002120 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002080:	f7ff feed 	bl	8001e5e <LL_ADC_IsEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	4323      	orrs	r3, r4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d137      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800208c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002094:	f023 030f 	bic.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	6811      	ldr	r1, [r2, #0]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	6892      	ldr	r2, [r2, #8]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020a8:	e028      	b.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b6:	4817      	ldr	r0, [pc, #92]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020b8:	f7ff fed1 	bl	8001e5e <LL_ADC_IsEnabled>
 80020bc:	4604      	mov	r4, r0
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020c0:	f7ff fecd 	bl	8001e5e <LL_ADC_IsEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	431c      	orrs	r4, r3
 80020c8:	4815      	ldr	r0, [pc, #84]	; (8002120 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020ca:	f7ff fec8 	bl	8001e5e <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4323      	orrs	r3, r4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d112      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020de:	f023 030f 	bic.w	r3, r3, #15
 80020e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020e6:	e009      	b.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020fa:	e000      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800210a:	4618      	mov	r0, r3
 800210c:	377c      	adds	r7, #124	; 0x7c
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	50040000 	.word	0x50040000
 8002118:	50040100 	.word	0x50040100
 800211c:	50040300 	.word	0x50040300
 8002120:	50040200 	.word	0x50040200

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e098      	b.n	800248c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_DMA_Init+0x150>)
 8002362:	429a      	cmp	r2, r3
 8002364:	d80f      	bhi.n	8002386 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_DMA_Init+0x154>)
 800236e:	4413      	add	r3, r2
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
 8002384:	e00e      	b.n	80023a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_DMA_Init+0x160>)
 800238e:	4413      	add	r3, r2
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a42      	ldr	r2, [pc, #264]	; (80024ac <HAL_DMA_Init+0x164>)
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023fe:	d039      	beq.n	8002474 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_DMA_Init+0x168>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 031c 	and.w	r3, r3, #28
 8002416:	210f      	movs	r1, #15
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002420:	4013      	ands	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f003 031c 	and.w	r3, r3, #28
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_DMA_Init+0x168>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e019      	b.n	8002474 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	210f      	movs	r1, #15
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4917      	ldr	r1, [pc, #92]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002456:	4013      	ands	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_DMA_Init+0x16c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 031c 	and.w	r3, r3, #28
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	4911      	ldr	r1, [pc, #68]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40020407 	.word	0x40020407
 800249c:	bffdfff8 	.word	0xbffdfff8
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	40020000 	.word	0x40020000
 80024a8:	bffdfbf8 	.word	0xbffdfbf8
 80024ac:	40020400 	.word	0x40020400
 80024b0:	400200a8 	.word	0x400200a8
 80024b4:	400204a8 	.word	0x400204a8

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_DMA_Start_IT+0x20>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e04b      	b.n	8002570 <HAL_DMA_Start_IT+0xb8>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d13a      	bne.n	8002562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f91e 	bl	8002752 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 020e 	orr.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e00f      	b.n	8002550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0204 	bic.w	r2, r2, #4
 800253e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 020a 	orr.w	r2, r2, #10
 800254e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e005      	b.n	800256e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2204      	movs	r2, #4
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e022      	b.n	80025e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 020e 	bic.w	r2, r2, #14
 80025b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 021c 	and.w	r2, r3, #28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f003 031c 	and.w	r3, r3, #28
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d026      	beq.n	800266e <HAL_DMA_IRQHandler+0x7a>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d021      	beq.n	800266e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f003 021c 	and.w	r2, r3, #28
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2104      	movs	r1, #4
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	2b00      	cmp	r3, #0
 8002662:	d071      	beq.n	8002748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800266c:	e06c      	b.n	8002748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f003 031c 	and.w	r3, r3, #28
 8002676:	2202      	movs	r2, #2
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02e      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xec>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d029      	beq.n	80026e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020a 	bic.w	r2, r2, #10
 80026a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 021c 	and.w	r2, r3, #28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2102      	movs	r1, #2
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d038      	beq.n	8002748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80026de:	e033      	b.n	8002748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 031c 	and.w	r3, r3, #28
 80026e8:	2208      	movs	r2, #8
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02a      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d025      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020e 	bic.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f003 021c 	and.w	r2, r3, #28
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002748:	bf00      	nop
 800274a:	bf00      	nop
}
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f003 021c 	and.w	r2, r3, #28
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d108      	bne.n	8002796 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002794:	e007      	b.n	80027a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_PWREx_GetVoltageRange+0x18>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000

080027d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027de:	d130      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ec:	d038      	beq.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2232      	movs	r2, #50	; 0x32
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9b      	lsrs	r3, r3, #18
 8002810:	3301      	adds	r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002814:	e002      	b.n	800281c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3b01      	subs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d102      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x60>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f2      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d110      	bne.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e00f      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d007      	beq.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002858:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40007000 	.word	0x40007000
 8002874:	20000000 	.word	0x20000000
 8002878:	431bde83 	.word	0x431bde83

0800287c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e3ca      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288e:	4b97      	ldr	r3, [pc, #604]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002898:	4b94      	ldr	r3, [pc, #592]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80e4 	beq.w	8002a78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4a>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	f040 808b 	bne.w	80029d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 8087 	bne.w	80029d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c6:	4b89      	ldr	r3, [pc, #548]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e3a2      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_RCC_OscConfig+0x7c>
 80028ee:	4b7f      	ldr	r3, [pc, #508]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f6:	e005      	b.n	8002904 <HAL_RCC_OscConfig+0x88>
 80028f8:	4b7c      	ldr	r3, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	4293      	cmp	r3, r2
 8002906:	d223      	bcs.n	8002950 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fd1d 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e383      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291c:	4b73      	ldr	r3, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a72      	ldr	r2, [pc, #456]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002922:	f043 0308 	orr.w	r3, r3, #8
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	4b70      	ldr	r3, [pc, #448]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	496d      	ldr	r1, [pc, #436]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800293a:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	4968      	ldr	r1, [pc, #416]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	e025      	b.n	800299c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002950:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a65      	ldr	r2, [pc, #404]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002956:	f043 0308 	orr.w	r3, r3, #8
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4960      	ldr	r1, [pc, #384]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296e:	4b5f      	ldr	r3, [pc, #380]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	495b      	ldr	r1, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fcdd 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e343      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299c:	f000 fc4a 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b52      	ldr	r3, [pc, #328]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	4950      	ldr	r1, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_RCC_OscConfig+0x278>)
 80029ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029bc:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd ff23 	bl	800080c <HAL_InitTick>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d052      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	e327      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d032      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029dc:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a42      	ldr	r2, [pc, #264]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e8:	f7fd ff60 	bl	80008ac <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f0:	f7fd ff5c 	bl	80008ac <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e310      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a36      	ldr	r2, [pc, #216]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4931      	ldr	r1, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	492c      	ldr	r1, [pc, #176]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
 8002a40:	e01a      	b.n	8002a78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a4e:	f7fd ff2d 	bl	80008ac <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a56:	f7fd ff29 	bl	80008ac <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e2dd      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x1da>
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d074      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x21a>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d10e      	bne.n	8002aae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d10b      	bne.n	8002aae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d064      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2f0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d160      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e2ba      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x24a>
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e026      	b.n	8002b14 <HAL_RCC_OscConfig+0x298>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ace:	d115      	bne.n	8002afc <HAL_RCC_OscConfig+0x280>
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a02      	ldr	r2, [pc, #8]	; (8002aec <HAL_RCC_OscConfig+0x270>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x298>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004480 	.word	0x08004480
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004
 8002afc:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a9f      	ldr	r2, [pc, #636]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b9d      	ldr	r3, [pc, #628]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a9c      	ldr	r2, [pc, #624]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fd fec6 	bl	80008ac <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fd fec2 	bl	80008ac <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e276      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b36:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2a8>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fd feb2 	bl	80008ac <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fd feae 	bl	80008ac <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e262      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2d0>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d060      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x310>
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d116      	bne.n	8002bba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	4b7c      	ldr	r3, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x328>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e23f      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	4973      	ldr	r1, [pc, #460]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb8:	e040      	b.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d023      	beq.n	8002c0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc2:	4b6f      	ldr	r3, [pc, #444]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6e      	ldr	r2, [pc, #440]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fd fe6d 	bl	80008ac <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7fd fe69 	bl	80008ac <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e21d      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	495f      	ldr	r1, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
 8002c08:	e018      	b.n	8002c3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fd fe49 	bl	80008ac <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fd fe45 	bl	80008ac <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1f9      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c56:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fd fe24 	bl	80008ac <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fd fe20 	bl	80008ac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1d4      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ef      	beq.n	8002c68 <HAL_RCC_OscConfig+0x3ec>
 8002c88:	e01b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	4a3b      	ldr	r2, [pc, #236]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fd fe07 	bl	80008ac <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca2:	f7fd fe03 	bl	80008ac <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1b7      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1ef      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a6 	beq.w	8002e1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cd4:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10d      	bne.n	8002cfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	; 0x58
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x508>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d118      	bne.n	8002d3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_RCC_OscConfig+0x508>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_RCC_OscConfig+0x508>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d14:	f7fd fdca 	bl	80008ac <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fd fdc6 	bl	80008ac <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17a      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x508>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4d8>
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d52:	e029      	b.n	8002da8 <HAL_RCC_OscConfig+0x52c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d115      	bne.n	8002d88 <HAL_RCC_OscConfig+0x50c>
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d7c:	e014      	b.n	8002da8 <HAL_RCC_OscConfig+0x52c>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40007000 	.word	0x40007000
 8002d88:	4b9c      	ldr	r3, [pc, #624]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a9b      	ldr	r2, [pc, #620]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d98:	4b98      	ldr	r3, [pc, #608]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	4a97      	ldr	r2, [pc, #604]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d016      	beq.n	8002dde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fd fd7c 	bl	80008ac <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fd fd78 	bl	80008ac <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e12a      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ed      	beq.n	8002db8 <HAL_RCC_OscConfig+0x53c>
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fd fd65 	bl	80008ac <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fd fd61 	bl	80008ac <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e113      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dfc:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ed      	bne.n	8002de6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b7a      	ldr	r3, [pc, #488]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a79      	ldr	r2, [pc, #484]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80fe 	beq.w	8003022 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	f040 80d0 	bne.w	8002fd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e30:	4b72      	ldr	r3, [pc, #456]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0203 	and.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d130      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d127      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d11f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e70:	2a07      	cmp	r2, #7
 8002e72:	bf14      	ite	ne
 8002e74:	2201      	movne	r2, #1
 8002e76:	2200      	moveq	r2, #0
 8002e78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d113      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d06e      	beq.n	8002f84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d069      	beq.n	8002f80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0ad      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ed4:	f7fd fcea 	bl	80008ac <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fd fce6 	bl	80008ac <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e09a      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_RCC_OscConfig+0x784>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f0a:	3a01      	subs	r2, #1
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f14:	0212      	lsls	r2, r2, #8
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f1c:	0852      	lsrs	r2, r2, #1
 8002f1e:	3a01      	subs	r2, #1
 8002f20:	0552      	lsls	r2, r2, #21
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0652      	lsls	r2, r2, #25
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	0912      	lsrs	r2, r2, #4
 8002f36:	0452      	lsls	r2, r2, #17
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4930      	ldr	r1, [pc, #192]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2d      	ldr	r2, [pc, #180]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f58:	f7fd fca8 	bl	80008ac <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fd fca4 	bl	80008ac <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e058      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7e:	e050      	b.n	8003022 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e04f      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d148      	bne.n	8003022 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fa8:	f7fd fc80 	bl	80008ac <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fd fc7c 	bl	80008ac <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e030      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x734>
 8002fce:	e028      	b.n	8003022 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d023      	beq.n	800301e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_RCC_OscConfig+0x780>)
 8002fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fc63 	bl	80008ac <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe8:	e00c      	b.n	8003004 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fd fc5f 	bl	80008ac <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d905      	bls.n	8003004 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_OscConfig+0x7b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ec      	bne.n	8002fea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_OscConfig+0x7b0>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4905      	ldr	r1, [pc, #20]	; (800302c <HAL_RCC_OscConfig+0x7b0>)
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_OscConfig+0x7b4>)
 8003018:	4013      	ands	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
 800301c:	e001      	b.n	8003022 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	feeefffc 	.word	0xfeeefffc

08003034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0e7      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b75      	ldr	r3, [pc, #468]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b72      	ldr	r3, [pc, #456]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4970      	ldr	r1, [pc, #448]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0cf      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b66      	ldr	r3, [pc, #408]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003090:	429a      	cmp	r2, r3
 8003092:	d908      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4960      	ldr	r1, [pc, #384]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04c      	beq.n	800314c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d121      	bne.n	800310a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0a6      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e09a      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ea:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e08e      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fa:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e086      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b46      	ldr	r3, [pc, #280]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4943      	ldr	r1, [pc, #268]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fd fbc6 	bl	80008ac <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fd fbc2 	bl	80008ac <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e06e      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	429a      	cmp	r2, r3
 8003166:	d208      	bcs.n	800317a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	492b      	ldr	r1, [pc, #172]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d210      	bcs.n	80031aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0207 	bic.w	r2, r3, #7
 8003190:	4923      	ldr	r1, [pc, #140]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_ClockConfig+0x1ec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e036      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4918      	ldr	r1, [pc, #96]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4910      	ldr	r1, [pc, #64]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031e8:	f000 f824 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	490b      	ldr	r1, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1f4>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003206:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1fc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fafd 	bl	800080c <HAL_InitTick>
 8003212:	4603      	mov	r3, r0
 8003214:	72fb      	strb	r3, [r7, #11]

  return status;
 8003216:	7afb      	ldrb	r3, [r7, #11]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	08004480 	.word	0x08004480
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800324c:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x34>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d121      	bne.n	80032a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d11e      	bne.n	80032a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003268:	4b34      	ldr	r3, [pc, #208]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e005      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003298:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	e004      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032b8:	4b23      	ldr	r3, [pc, #140]	; (8003348 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d134      	bne.n	800332c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0xa6>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d003      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0xac>
 80032d8:	e005      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_RCC_GetSysClockFreq+0x110>)
 80032dc:	617b      	str	r3, [r7, #20]
      break;
 80032de:	e005      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_GetSysClockFreq+0x114>)
 80032e2:	617b      	str	r3, [r7, #20]
      break;
 80032e4:	e002      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	3301      	adds	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	fb03 f202 	mul.w	r2, r3, r2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	0e5b      	lsrs	r3, r3, #25
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	3301      	adds	r3, #1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800332c:	69bb      	ldr	r3, [r7, #24]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	08004490 	.word	0x08004490
 8003344:	00f42400 	.word	0x00f42400
 8003348:	007a1200 	.word	0x007a1200

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003364:	f7ff fa26 	bl	80027b4 <HAL_PWREx_GetVoltageRange>
 8003368:	6178      	str	r0, [r7, #20]
 800336a:	e014      	b.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003384:	f7ff fa16 	bl	80027b4 <HAL_PWREx_GetVoltageRange>
 8003388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d10b      	bne.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d919      	bls.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2ba0      	cmp	r3, #160	; 0xa0
 80033a8:	d902      	bls.n	80033b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033aa:	2302      	movs	r3, #2
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e013      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e010      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d902      	bls.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033bc:	2303      	movs	r3, #3
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e00a      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d102      	bne.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c8:	2302      	movs	r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e004      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d101      	bne.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 0207 	bic.w	r2, r3, #7
 80033e0:	4909      	ldr	r1, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	40022000 	.word	0x40022000

0800340c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003414:	2300      	movs	r3, #0
 8003416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003418:	2300      	movs	r3, #0
 800341a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003424:	2b00      	cmp	r3, #0
 8003426:	d041      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003430:	d02a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003432:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003436:	d824      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800343e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003442:	d81e      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344c:	d010      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800344e:	e018      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003450:	4b86      	ldr	r3, [pc, #536]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a85      	ldr	r2, [pc, #532]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800345c:	e015      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fabb 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 800346a:	4603      	mov	r3, r0
 800346c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800346e:	e00c      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3320      	adds	r3, #32
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fba6 	bl	8003bc8 <RCCEx_PLLSAI2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003480:	e003      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	74fb      	strb	r3, [r7, #19]
      break;
 8003486:	e000      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003490:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349e:	4973      	ldr	r1, [pc, #460]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034a6:	e001      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d041      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c0:	d02a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c6:	d824      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034cc:	d008      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d2:	d81e      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034dc:	d010      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034de:	e018      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034e0:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a61      	ldr	r2, [pc, #388]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ec:	e015      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa73 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034fe:	e00c      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3320      	adds	r3, #32
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fb5e 	bl	8003bc8 <RCCEx_PLLSAI2_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	74fb      	strb	r3, [r7, #19]
      break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003520:	4b52      	ldr	r3, [pc, #328]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800352e:	494f      	ldr	r1, [pc, #316]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80a0 	beq.w	800368a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	4a40      	ldr	r2, [pc, #256]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	; 0x58
 8003570:	4b3e      	ldr	r3, [pc, #248]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800358c:	f7fd f98e 	bl	80008ac <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fd f98a 	bl	80008ac <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
        break;
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a8:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ef      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d15c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ba:	4b2c      	ldr	r3, [pc, #176]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01f      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d019      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fd f949 	bl	80008ac <HAL_GetTick>
 800361a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361c:	e00b      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd f945 	bl	80008ac <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d902      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	74fb      	strb	r3, [r7, #19]
            break;
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ec      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365a:	4904      	ldr	r1, [pc, #16]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003662:	e009      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003678:	7c7b      	ldrb	r3, [r7, #17]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b9e      	ldr	r3, [pc, #632]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	4a9d      	ldr	r2, [pc, #628]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003696:	4b98      	ldr	r3, [pc, #608]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f023 0203 	bic.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	4994      	ldr	r1, [pc, #592]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b8:	4b8f      	ldr	r3, [pc, #572]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 020c 	bic.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	498c      	ldr	r1, [pc, #560]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036da:	4b87      	ldr	r3, [pc, #540]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	4983      	ldr	r1, [pc, #524]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036fc:	4b7e      	ldr	r3, [pc, #504]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	497b      	ldr	r1, [pc, #492]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800371e:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	4972      	ldr	r1, [pc, #456]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003740:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	496a      	ldr	r1, [pc, #424]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	4961      	ldr	r1, [pc, #388]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003784:	4b5c      	ldr	r3, [pc, #368]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	4959      	ldr	r1, [pc, #356]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037a6:	4b54      	ldr	r3, [pc, #336]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	4950      	ldr	r1, [pc, #320]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037c8:	4b4b      	ldr	r3, [pc, #300]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	4948      	ldr	r1, [pc, #288]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	493f      	ldr	r1, [pc, #252]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d028      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800380c:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381a:	4937      	ldr	r1, [pc, #220]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382a:	d106      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	e011      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800383e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003842:	d10c      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f8c8 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d028      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	491f      	ldr	r1, [pc, #124]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003888:	d106      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800388a:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003894:	60d3      	str	r3, [r2, #12]
 8003896:	e011      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2101      	movs	r1, #1
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f899 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d6:	4908      	ldr	r1, [pc, #32]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e6:	d109      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a02      	ldr	r2, [pc, #8]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f2:	60d3      	str	r3, [r2, #12]
 80038f4:	e014      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f867 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800393a:	4928      	ldr	r1, [pc, #160]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394a:	d10d      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f844 	bl	80039e0 <RCCEx_PLLSAI1_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d014      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	74bb      	strb	r3, [r7, #18]
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d10c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	2102      	movs	r1, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f925 	bl	8003bc8 <RCCEx_PLLSAI2_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003998:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	490d      	ldr	r1, [pc, #52]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000

080039e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ee:	4b75      	ldr	r3, [pc, #468]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d018      	beq.n	8003a2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039fa:	4b72      	ldr	r3, [pc, #456]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0203 	and.w	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d10d      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
       ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d047      	beq.n	8003ab6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	e044      	b.n	8003ab6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d018      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0x86>
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d825      	bhi.n	8003a84 <RCCEx_PLLSAI1_Config+0xa4>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d002      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x62>
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d009      	beq.n	8003a54 <RCCEx_PLLSAI1_Config+0x74>
 8003a40:	e020      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a42:	4b60      	ldr	r3, [pc, #384]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d11d      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e01a      	b.n	8003a8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a54:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d116      	bne.n	8003a8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a64:	e013      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a66:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a72:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a82:	e006      	b.n	8003a92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e004      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10d      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	4944      	ldr	r1, [pc, #272]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d17d      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003abc:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fc fef0 	bl	80008ac <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ace:	e009      	b.n	8003ae4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad0:	f7fc feec 	bl	80008ac <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d902      	bls.n	8003ae4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ae2:	e005      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ef      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d160      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d111      	bne.n	8003b20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6892      	ldr	r2, [r2, #8]
 8003b0c:	0211      	lsls	r1, r2, #8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	0912      	lsrs	r2, r2, #4
 8003b14:	0452      	lsls	r2, r2, #17
 8003b16:	430a      	orrs	r2, r1
 8003b18:	492a      	ldr	r1, [pc, #168]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	610b      	str	r3, [r1, #16]
 8003b1e:	e027      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d112      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b26:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	0211      	lsls	r1, r2, #8
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6912      	ldr	r2, [r2, #16]
 8003b3c:	0852      	lsrs	r2, r2, #1
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	0552      	lsls	r2, r2, #21
 8003b42:	430a      	orrs	r2, r1
 8003b44:	491f      	ldr	r1, [pc, #124]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	610b      	str	r3, [r1, #16]
 8003b4a:	e011      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6952      	ldr	r2, [r2, #20]
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fc fe96 	bl	80008ac <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b84:	f7fc fe92 	bl	80008ac <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
          break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bd6:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0203 	and.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d10d      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bfa:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
       ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d047      	beq.n	8003c9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	e044      	b.n	8003c9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d018      	beq.n	8003c4e <RCCEx_PLLSAI2_Config+0x86>
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d825      	bhi.n	8003c6c <RCCEx_PLLSAI2_Config+0xa4>
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d002      	beq.n	8003c2a <RCCEx_PLLSAI2_Config+0x62>
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d009      	beq.n	8003c3c <RCCEx_PLLSAI2_Config+0x74>
 8003c28:	e020      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c2a:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11d      	bne.n	8003c72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3a:	e01a      	b.n	8003c72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4c:	e013      	b.n	8003c76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c4e:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c5a:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c6a:	e006      	b.n	8003c7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e004      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c82:	4b3f      	ldr	r3, [pc, #252]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	430b      	orrs	r3, r1
 8003c98:	4939      	ldr	r1, [pc, #228]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d167      	bne.n	8003d74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ca4:	4b36      	ldr	r3, [pc, #216]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a35      	ldr	r2, [pc, #212]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fc fdfc 	bl	80008ac <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cb6:	e009      	b.n	8003ccc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cb8:	f7fc fdf8 	bl	80008ac <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cca:	e005      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ef      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d14a      	bne.n	8003d74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce4:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	0211      	lsls	r1, r2, #8
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68d2      	ldr	r2, [r2, #12]
 8003cfa:	0912      	lsrs	r2, r2, #4
 8003cfc:	0452      	lsls	r2, r2, #17
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	491f      	ldr	r1, [pc, #124]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	614b      	str	r3, [r1, #20]
 8003d06:	e011      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	0211      	lsls	r1, r2, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6912      	ldr	r2, [r2, #16]
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	3a01      	subs	r2, #1
 8003d22:	0652      	lsls	r2, r2, #25
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4916      	ldr	r1, [pc, #88]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fc fdb8 	bl	80008ac <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d3e:	e009      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d40:	f7fc fdb4 	bl	80008ac <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	73fb      	strb	r3, [r7, #15]
          break;
 8003d52:	e005      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e049      	b.n	8003e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fc88 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 f968 	bl	8004098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e047      	b.n	8003edc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_TIM_Base_Start+0xb4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d018      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_TIM_Base_Start+0xb8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <HAL_TIM_Base_Start+0xbc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_TIM_Base_Start+0xc0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_TIM_Base_Start+0xc4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIM_Base_Start+0x66>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_TIM_Base_Start+0xc8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d115      	bne.n	8003ec6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_TIM_Base_Start+0xcc>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d015      	beq.n	8003ed8 <HAL_TIM_Base_Start+0xa4>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb2:	d011      	beq.n	8003ed8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec4:	e008      	b.n	8003ed8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	00010007 	.word	0x00010007

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_ConfigClockSource+0x1c>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0b6      	b.n	800408e <HAL_TIM_ConfigClockSource+0x18a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5c:	d03e      	beq.n	8003fdc <HAL_TIM_ConfigClockSource+0xd8>
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	f200 8087 	bhi.w	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	f000 8086 	beq.w	800407a <HAL_TIM_ConfigClockSource+0x176>
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d87f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d01a      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xaa>
 8003f78:	2b70      	cmp	r3, #112	; 0x70
 8003f7a:	d87b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d050      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x11e>
 8003f80:	2b60      	cmp	r3, #96	; 0x60
 8003f82:	d877      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d03c      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0xfe>
 8003f88:	2b50      	cmp	r3, #80	; 0x50
 8003f8a:	d873      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d058      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0x13e>
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d86f      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d064      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15e>
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d86b      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d060      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15e>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d867      	bhi.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15e>
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d05a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x15e>
 8003fac:	e062      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fbe:	f000 f97f 	bl	80042c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	609a      	str	r2, [r3, #8]
      break;
 8003fda:	e04f      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	f000 f968 	bl	80042c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffe:	609a      	str	r2, [r3, #8]
      break;
 8004000:	e03c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	461a      	mov	r2, r3
 8004010:	f000 f8dc 	bl	80041cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2150      	movs	r1, #80	; 0x50
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f935 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004020:	e02c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800402e:	461a      	mov	r2, r3
 8004030:	f000 f8fb 	bl	800422a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2160      	movs	r1, #96	; 0x60
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f925 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004040:	e01c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	461a      	mov	r2, r3
 8004050:	f000 f8bc 	bl	80041cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f915 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004060:	e00c      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f000 f90c 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004072:	e003      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e000      	b.n	800407c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800407a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a40      	ldr	r2, [pc, #256]	; (80041ac <TIM_Base_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d00f      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3d      	ldr	r2, [pc, #244]	; (80041b0 <TIM_Base_SetConfig+0x118>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <TIM_Base_SetConfig+0x11c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <TIM_Base_SetConfig+0x120>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a3a      	ldr	r2, [pc, #232]	; (80041bc <TIM_Base_SetConfig+0x124>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d108      	bne.n	80040ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <TIM_Base_SetConfig+0x114>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01f      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d01b      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <TIM_Base_SetConfig+0x118>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d017      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <TIM_Base_SetConfig+0x11c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <TIM_Base_SetConfig+0x120>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <TIM_Base_SetConfig+0x124>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <TIM_Base_SetConfig+0x128>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <TIM_Base_SetConfig+0x12c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a10      	ldr	r2, [pc, #64]	; (80041ac <TIM_Base_SetConfig+0x114>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <TIM_Base_SetConfig+0x124>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <TIM_Base_SetConfig+0x128>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <TIM_Base_SetConfig+0x12c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_Base_SetConfig+0xf8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <TIM_Base_SetConfig+0x130>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d103      	bne.n	8004198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	615a      	str	r2, [r3, #20]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40013400 	.word	0x40013400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400
 80041c8:	40014800 	.word	0x40014800

080041cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f023 0201 	bic.w	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 030a 	bic.w	r3, r3, #10
 8004208:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f023 0210 	bic.w	r2, r3, #16
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004266:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f043 0307 	orr.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	021a      	lsls	r2, r3, #8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	609a      	str	r2, [r3, #8]
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e068      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2e      	ldr	r2, [pc, #184]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d108      	bne.n	800435e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004352:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01d      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a14      	ldr	r2, [pc, #80]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40013400 	.word	0x40013400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f000 f818 	bl	8004468 <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	080044c0 	.word	0x080044c0
 800445c:	080044c0 	.word	0x080044c0
 8004460:	080044c0 	.word	0x080044c0
 8004464:	080044c4 	.word	0x080044c4

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
